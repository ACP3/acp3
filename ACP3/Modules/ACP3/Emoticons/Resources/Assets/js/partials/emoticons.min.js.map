{"version":3,"file":"./ACP3/Modules/ACP3/Emoticons/Resources/Assets/js/partials/emoticons.min.js","mappings":"yBAEA,CAAEA,IACAA,EAASC,iBAAiB,0BAA0BC,SAASC,IAI3D,MAAMC,EAAWJ,EAASK,cAAcF,EAAKG,QAAQC,gBAErDJ,EAAKF,iBAAiB,KAAKC,SAASM,KCCjC,SAAwBC,EAAiBL,GAC9C,IAAIM,EAAgB,EAEpBD,EAAgBE,iBAAiB,SAAUC,IACzCA,EAAMC,iBAEN,MAAMC,EAAeV,EAASW,MACxBC,EAAsBF,EAAaG,OAAO,EAAGP,GAC7CQ,EAAqBJ,EAAaG,OAAOP,GAGzCS,EAAe,IAAH,OAAOV,EAAgBW,MAAvB,KAElBV,GAAiBS,EAAaE,OAE9BjB,EAASW,MAAQC,EAAsBG,EAAeD,EACtDd,EAASkB,QAETlB,EAASmB,kBAAkBb,EAAeA,EAA1C,IAMFN,EAASO,iBAAiB,QAAQ,KAChCD,EAAgBN,EAASoB,cAAzB,GAEH,CD3BKC,CAAejB,EAAcJ,EAA7B,GADF,GAPJ,GAWGJ,S","sources":["webpack://acp3-cms/./ACP3/Modules/ACP3/Emoticons/Resources/Assets/js/partials/emoticons.js","webpack://acp3-cms/./ACP3/Modules/ACP3/Emoticons/Resources/Assets/js/libs/insert-emoticon.js"],"sourcesContent":["import { insertEmoticon } from \"../libs/insert-emoticon\";\n\n((document) => {\n  document.querySelectorAll(\"[data-emoticons-input]\").forEach((elem) => {\n    /**\n     * @type {HTMLTextAreaElement}\n     */\n    const textarea = document.querySelector(elem.dataset.emoticonsInput);\n\n    elem.querySelectorAll(\"a\").forEach((emoticonElem) => {\n      insertEmoticon(emoticonElem, textarea);\n    });\n  });\n})(document);\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\n/**\n *\n * @param {Element} emoticonElement\n * @param {HTMLTextAreaElement} textarea\n */\nexport function insertEmoticon(emoticonElement, textarea) {\n  let caretPosition = 0;\n\n  emoticonElement.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    const currentValue = textarea.value;\n    const textBeforeSelection = currentValue.substr(0, caretPosition);\n    const textAfterSelection = currentValue.substr(caretPosition);\n\n    // Add leading and trailing spaces to the to be inserted emoticon, so that we aren't getting into overflow problems, etc.\n    const emoticonCode = ` ${emoticonElement.title} `;\n\n    caretPosition += emoticonCode.length;\n\n    textarea.value = textBeforeSelection + emoticonCode + textAfterSelection;\n    textarea.focus();\n\n    textarea.setSelectionRange(caretPosition, caretPosition);\n  });\n\n  // When clicking on one of the emoticons, the textarea's blur event gets triggered.\n  // We can use this to save the last known caret position, so that the emoticon can be inserted into the correct\n  // position\n  textarea.addEventListener(\"blur\", () => {\n    caretPosition = textarea.selectionStart;\n  });\n}\n"],"names":["document","querySelectorAll","forEach","elem","textarea","querySelector","dataset","emoticonsInput","emoticonElem","emoticonElement","caretPosition","addEventListener","event","preventDefault","currentValue","value","textBeforeSelection","substr","textAfterSelection","emoticonCode","title","length","focus","setSelectionRange","selectionStart","insertEmoticon"],"sourceRoot":""}