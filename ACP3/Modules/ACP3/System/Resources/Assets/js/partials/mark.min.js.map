{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/mark.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/mark.js"],"names":["_$mark_1","markAllRowsCheckboxElem","action","jQuery","closest","find","trigger","highlightTableRow","$markAllCheckbox","$table","checkboxName","data","on","e","target","type","nodeName","length","$rowCheckbox","this","prop","is","classList","add","cssClassName","toggle","setMarkAllCheckboxState","document","deleteMarkedResults","elem","options","$this","settings","_objectSpread","checkBoxName","language","confirmationTextSingle","confirmationTextMultiple","noEntriesSelectedText","bootboxLocale","preventDefault","$selectedMassActionCheckboxes","confirmationText","replace","bootbox","confirm","message","locale","callback","result","$form","formSubmit","customFormData","triggerHandler","alert","$","$markAll","$tbody","visibleSelectedTableRows","visibleMassActionCheckboxes","indeterminate","checked","each","index","element","click","highlightAllTableRows"],"mappings":"CAAA,WACA,IAAAA,EAAA,mwBCYO,SAA+BC,EAAyBC,GAC7DC,OAAOF,GAAyBG,QAAQ,SAASC,KAAK,wBAAwBC,QAAQ,QAAS,CAACJ,KAAAF,EAAAO,kBAO3F,SAA2BN,GAChC,IAAMO,EAAmBL,OAAOF,GAC9BQ,EAASD,EAAiBJ,QAAQ,SAClCM,EAAeF,EAAiBG,KAAK,iBAEvCF,EAAOG,GAAG,QAAS,wBAAwB,SAAUC,EAAGX,GACtD,GAAsB,aAAlBW,EAAEC,OAAOC,KAAqB,CAChC,GAA0B,MAAtBF,EAAEC,OAAOE,UAAoBb,OAAOU,EAAEC,QAAQV,QAAQ,KAAKa,OAC7D,OAGF,IAAMC,EAAef,OAAO,eAAiBO,EAAe,OAAQS,MACpED,EAAaE,KAAK,WAAYF,EAAaG,GAAG,aAA0B,QAAXnB,GAGhD,QAAXA,EACFiB,KAAKG,UAAUC,IAAIC,GAEnBL,KAAKG,UAAUG,OAAOD,GAGxBE,EAAwBzB,EAAyBS,MAGnDP,OAAOwB,UAAUf,GAAG,WAAW,WAC7Bc,EAAwBzB,EAAyBS,OAAAV,EAAA4B,oBAyB9C,SAA6BC,EAAMC,GACxC,IASEC,EAAQ5B,OAAO0B,GACfG,EAAQC,EAAAA,EAAA,GAVO,CACbC,aAAc,GACdC,SAAU,CACRC,uBAAwB,GACxBC,yBAA0B,GAC1BC,sBAAuB,IAEzBC,cAAe,OAGYT,GAE/BC,EAAMnB,GAAG,SAAS,SAAUC,GAC1BA,EAAE2B,iBAEF,IAAMC,EAAgCtC,OAAO,2BAA6B6B,EAASE,aAAe,gBAElG,GAAIO,EAA8BxB,OAAS,EAAG,CAC5C,IAAMyB,EACqC,IAAzCD,EAA8BxB,OAC1Be,EAASG,SAASC,uBAClBJ,EAASG,SAASE,yBAAyBM,QAAQ,UAAWF,EAA8BxB,QAElG2B,QAAQC,QAAQ,CACdC,QAASJ,EACTK,OAAQf,EAASO,cACjBS,SAAU,SAACC,GACT,GAAIA,EAAQ,CACV,IAAMC,EAAQnB,EAAM3B,QAAQ,QAE5B8C,EAAMC,WAAW,CACfC,eAAgB,CACdlD,OAAQ,eAGZgD,EAAMG,eAAe,mBAK3BT,QAAQU,MAAM,CACZR,QAASd,EAASG,SAASG,sBAC3BS,OAAQf,EAASO,oBA7GzB,ICHEgB,EACMC,EDEFhC,EAAe,OAkDrB,SAASE,EAAwBzB,EAAyBS,GACxD,IAAM+C,EAAStD,OAAOF,GAAyBG,QAAQ,SAASC,KAAK,SAC/DqD,EAA2BD,EAAOpD,KAAK,MAAQmB,EAAe,YAAYP,OAC1E0C,EAA8BF,EAAOpD,KAAK,eAAiBK,EAAe,gBAAgBO,OAEhGhB,EAAwB2D,cACtBF,EAA2B,GAAKC,IAAgCD,EAClEzD,EAAwB4D,QACtBH,EAA2B,GAAKC,IAAgCD,GC5D5DF,GADND,EAcCpD,QAbkB,uBAEV2D,MAAK,SAACC,EAAOC,GACpB,IAAMjC,EAAQwB,EAAES,GAEhBjC,EAAMkC,OAAM,YAAA,EACVjE,EAAAkE,uBAAsBF,EAASjC,EAAMV,GAAG,YAAc,MAAQ,cAAA,EAGhErB,EAAAO,mBAAkByD,OAAA,EAGpBhE,EAAA4B,qBAAoB2B,EAAE,4BAA4BnD,QAAQ,QAASoD,EAAS7C,KAAK,mBFfnF","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nconst cssClassName = \"info\";\n\n/**\n * Marks all visible results\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} action\n */\nexport function highlightAllTableRows(markAllRowsCheckboxElem, action) {\n  jQuery(markAllRowsCheckboxElem).closest(\"table\").find(\"tr:has(td :checkbox)\").trigger(\"click\", [action]);\n}\n\n/**\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n */\nexport function highlightTableRow(markAllRowsCheckboxElem) {\n  const $markAllCheckbox = jQuery(markAllRowsCheckboxElem),\n    $table = $markAllCheckbox.closest(\"table\"),\n    checkboxName = $markAllCheckbox.data(\"checkbox-name\");\n\n  $table.on(\"click\", \"tr:has(td :checkbox)\", function (e, action) {\n    if (e.target.type !== \"checkbox\") {\n      if (e.target.nodeName === \"A\" || jQuery(e.target).closest(\"a\").length) {\n        return;\n      }\n\n      const $rowCheckbox = jQuery('input[name=\"' + checkboxName + '[]\"]', this);\n      $rowCheckbox.prop(\"checked\", !$rowCheckbox.is(\":checked\") || action === \"add\");\n    }\n\n    if (action === \"add\") {\n      this.classList.add(cssClassName);\n    } else {\n      this.classList.toggle(cssClassName);\n    }\n\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName);\n  });\n\n  jQuery(document).on(\"draw.dt\", () => {\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName);\n  });\n}\n\n/**\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} checkboxName\n */\nfunction setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName) {\n  const $tbody = jQuery(markAllRowsCheckboxElem).closest(\"table\").find(\"tbody\");\n  const visibleSelectedTableRows = $tbody.find(\"tr.\" + cssClassName + \":visible\").length;\n  const visibleMassActionCheckboxes = $tbody.find('input[name=\"' + checkboxName + '[]\"]:visible').length;\n\n  markAllRowsCheckboxElem.indeterminate =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes !== visibleSelectedTableRows;\n  markAllRowsCheckboxElem.checked =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes === visibleSelectedTableRows;\n}\n\n/**\n *\n * @param {HTMLElementEventMap} elem\n * @param options\n */\nexport function deleteMarkedResults(elem, options) {\n  const defaults = {\n      checkBoxName: \"\",\n      language: {\n        confirmationTextSingle: \"\",\n        confirmationTextMultiple: \"\",\n        noEntriesSelectedText: \"\",\n      },\n      bootboxLocale: \"en\",\n    },\n    $this = jQuery(elem),\n    settings = { ...defaults, ...options };\n\n  $this.on(\"click\", function (e) {\n    e.preventDefault();\n\n    const $selectedMassActionCheckboxes = jQuery('form .table input[name=\"' + settings.checkBoxName + '[]\"]:checked');\n\n    if ($selectedMassActionCheckboxes.length > 0) {\n      const confirmationText =\n        $selectedMassActionCheckboxes.length === 1\n          ? settings.language.confirmationTextSingle\n          : settings.language.confirmationTextMultiple.replace(\"{items}\", $selectedMassActionCheckboxes.length);\n\n      bootbox.confirm({\n        message: confirmationText,\n        locale: settings.bootboxLocale,\n        callback: (result) => {\n          if (result) {\n            const $form = $this.closest(\"form\");\n\n            $form.formSubmit({\n              customFormData: {\n                action: \"confirmed\",\n              },\n            });\n            $form.triggerHandler(\"submit\");\n          }\n        },\n      });\n    } else {\n      bootbox.alert({\n        message: settings.language.noEntriesSelectedText,\n        locale: settings.bootboxLocale,\n      });\n    }\n  });\n}\n","import { highlightAllTableRows, highlightTableRow, deleteMarkedResults } from \"../lib/mark\";\n\n(($) => {\n  const $markAll = $(\"[data-mark-all-id]\");\n\n  $markAll.each((index, element) => {\n    const $this = $(element);\n\n    $this.click(() => {\n      highlightAllTableRows(element, $this.is(\":checked\") ? \"add\" : \"remove\");\n    });\n\n    highlightTableRow(element);\n  });\n\n  deleteMarkedResults($(\"form #adm-list .fa-trash\").closest(\".btn\"), $markAll.data(\"delete-options\"));\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"mark.min.js"}