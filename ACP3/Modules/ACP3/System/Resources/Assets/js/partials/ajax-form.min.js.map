{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/utils.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/ajax-form.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/loading-layer.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/form-validator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.js"],"names":["_$utils_4","defaultSettings","constructorOptions","dataAttributeOptions","mergedSettings","key","value","Object","entries","keyStripped","string","replace","charAt","toLowerCase","slice","length","JSON","parse","_unused","_classPrivateFieldLooseBase","receiver","privateKey","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","_element","_loadingLayer","_formValidator","_defaults","_settings","_init","_findSubmitButton","_prepareFormData","_handleResponseError","_handleSuccessfulResponse","_addLoadingLayer","_disableSubmitButton","_enableSubmitButton","_decodeResponse","_redirectToNewPage","_scrollIntoView","_replaceContent","_init2","this","nodeName","addEventListener","async","performAjaxRequest","noValidate","e","preventDefault","setFormAsValid","document","dispatchEvent","CustomEvent","detail","isFormValid","preValidateForm","checkFormElementsForErrors","_findSubmitButton2","querySelectorAll","forEach","submitElem","elem","dataset","clicked","_prepareFormData2","submitButton","form","initialData","customFormData","data","getAttribute","FormData","append","_handleResponseError2","response","responseData","clone","text","status","handleFormErrorMessages","open","write","close","_handleSuccessfulResponse2","hash","window","completeCallback","redirect_url","location","_addLoadingLayer2","loadingOverlay","addLoadingLayer","_disableSubmitButton2","disabled","_enableSubmitButton2","_decodeResponse2","json","error","_redirectToNewPage2","href","reload","_scrollIntoView2","setTimeout","targetElement","querySelector","concat","scrollTo","top","getBoundingClientRect","y","behavior","offsetTop","scrollTop","_replaceContent2","doc","DOMParser","parseFromString","innerHTML","_$ajaxForm_1","AjaxForm","[object Object]","element","loadingLayer","formValidator","options","defineProperty","writable","method","mergeSettings","_submitButton","hashChange","showLoadingLayer","_ref","_form$getAttribute$to","_form$getAttribute","_classPrivateFieldLoo","toUpperCase","fetch","body","headers","X-Requested-With","ok","console","hideLoadingLayer","___classPrivateFieldLooseBase_3","__id_3","___classPrivateFieldLooseKey_3","_options","_toggleLoadingLayer","_toggleLoadingLayer2","show","_document$getElementB","getElementById","classList","toggle","_$loadingLayer_3","LoadingLayer","loadingText","loadingLayerHtml","svgIcons","loadingLayerIcon","insertAdjacentHTML","___classPrivateFieldLooseBase_2","__id_2","___classPrivateFieldLooseKey_2","$","_isFormValid","___defaults_2","___settings_2","_formElement","_removeAllPreviousErrors","_removeErrorMessageFromFormField","_addErrorMessageToFormField","_focusTabWithFirstErrorMessage","_prettyPrintResponseErrorMessages","_scrollToFirstFormError","_isElementInViewport","_removeAllPreviousErrors2","invalidFormField","remove","_removeErrorMessageFromFormField2","formField","_formField$closest","_formField$closest$qu","closest","_addErrorMessageToFormField2","errorMessage","add","_focusTabWithFirstErrorMessage2","firstElemWithError","tabId","click","focus","_prettyPrintResponseErrorMessages2","errorBox","errorMessageLine","errorClass","_scrollToFirstFormError2","formErrors","item","scrollOffsetElement","clientHeight","_isElementInViewport2","rect","left","bottom","innerHeight","documentElement","right","innerWidth","clientWidth","_$formValidator_2","FormValidator","formElement","field","elements","checkValidity","validationMessage","errorMessagesHtml","modalBody","jQuery","fn","formSubmit","each","on","target","find"],"mappings":"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","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport function mergeSettings(defaultSettings, constructorOptions, dataAttributeOptions) {\n  const mergedSettings = { ...defaultSettings, ...constructorOptions };\n\n  if (!dataAttributeOptions) {\n    return mergedSettings;\n  }\n\n  for (let [key, value] of Object.entries(dataAttributeOptions)) {\n    const keyStripped = lowerCaseFirstLetter(key.replace(\"ajaxForm\", \"\"));\n\n    if (keyStripped.length > 0 && typeof mergedSettings[keyStripped] !== \"undefined\") {\n      try {\n        mergedSettings[keyStripped] = JSON.parse(value);\n      } catch {\n        mergedSettings[keyStripped] = value;\n      }\n    }\n  }\n\n  return mergedSettings;\n}\n\nfunction lowerCaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class AjaxForm {\n  #element;\n  #loadingLayer;\n  #formValidator;\n  #defaults = {\n    completeCallback: null,\n    targetElement: \"#content\",\n    loadingOverlay: true,\n    customFormData: null,\n    method: null,\n  };\n  #settings;\n\n  /**\n   *\n   * @param {HTMLElement} element\n   * @param {LoadingLayer} loadingLayer\n   * @param {FormValidator} formValidator\n   * @param {object} options\n   */\n  constructor(element, loadingLayer, formValidator, options = {}) {\n    this.#element = element;\n    this.isFormValid = true;\n\n    this.#loadingLayer = loadingLayer;\n    this.#formValidator = formValidator;\n\n    this.#settings = mergeSettings(this.#defaults, options, element.dataset);\n    this.#init();\n  }\n\n  #init() {\n    this.#findSubmitButton();\n    this.#addLoadingLayer();\n\n    if (this.#element.nodeName === \"A\") {\n      this.#element.addEventListener(\"click\", async () => {\n        await this.performAjaxRequest();\n      });\n    } else {\n      this.#element.noValidate = true;\n\n      this.#element.addEventListener(\"submit\", async (e) => {\n        e.preventDefault();\n\n        this.#formValidator.setFormAsValid();\n\n        document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.before\", { detail: this }));\n\n        if (this.#formValidator.isFormValid && this.#formValidator.preValidateForm()) {\n          await this.performAjaxRequest();\n        }\n      });\n\n      this.#element.addEventListener(\"change\", () => {\n        if (this.#formValidator.isFormValid === false) {\n          this.#formValidator.checkFormElementsForErrors();\n        }\n      });\n    }\n  }\n\n  #findSubmitButton() {\n    this.#element.querySelectorAll(\"[type=submit]\").forEach((submitElem) => {\n      submitElem.addEventListener(\"click\", () => {\n        this.#element.querySelectorAll(\"[type=submit]\").forEach((elem) => {\n          delete elem.dataset[\"clicked\"];\n        });\n        submitElem.dataset.clicked = \"true\";\n      });\n    });\n  }\n\n  async performAjaxRequest() {\n    const form = this.#element;\n\n    let hash, submitButton;\n\n    if (this.#element.getAttribute(\"method\")) {\n      submitButton = this.#element.querySelector('[type=\"submit\"][data-clicked=\"true\"]');\n\n      hash = submitButton?.dataset.hashChange;\n    } else {\n      hash = form.dataset.hashChange;\n    }\n\n    this.#loadingLayer.showLoadingLayer();\n    this.#disableSubmitButton(submitButton);\n\n    try {\n      const method = form.getAttribute(\"method\")?.toUpperCase() ?? this.#settings.method?.toUpperCase() ?? \"GET\";\n\n      const response = await fetch(form.getAttribute(\"action\") || form.getAttribute(\"href\"), {\n        method: method,\n        body: method !== \"GET\" ? this.#prepareFormData(submitButton) : null,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      });\n\n      if (!response.ok) {\n        await this.#handleResponseError(response);\n      } else {\n        await this.#handleSuccessfulResponse(response, hash);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.#loadingLayer.hideLoadingLayer();\n      this.#enableSubmitButton(submitButton);\n    }\n  }\n\n  /**\n   *\n   * @returns {FormData}\n   */\n  #prepareFormData(submitButton) {\n    const form = this.#element;\n\n    const initialData = this.#settings.customFormData || {};\n    let data;\n\n    if (form.getAttribute(\"method\")) {\n      data = new FormData(form);\n\n      if (submitButton) {\n        data.append(submitButton.getAttribute(\"name\"), \"1\");\n      }\n    } else {\n      data = new FormData();\n    }\n\n    for (let [key, value] of Object.entries(initialData)) {\n      data.append(key, value);\n    }\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<void>}\n   */\n  async #handleResponseError(response) {\n    const responseData = await response.clone().text();\n\n    if (response.status === 400) {\n      this.#formValidator.handleFormErrorMessages(this.#element, responseData);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.fail\", { detail: this }));\n    } else if (responseData.length > 0) {\n      document.open();\n      document.write(responseData);\n      document.close();\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {string} hash\n   * @returns {Promise<void>}\n   */\n  async #handleSuccessfulResponse(response, hash) {\n    const responseData = await this.#decodeResponse(response);\n\n    if (typeof window[this.#settings.completeCallback] === \"function\") {\n      window[this.#settings.completeCallback](responseData);\n    } else if (responseData.redirect_url) {\n      this.#redirectToNewPage(hash, responseData);\n    } else {\n      this.#replaceContent(hash, responseData);\n      this.#scrollIntoView(hash);\n\n      if (hash !== undefined) {\n        window.location.hash = hash;\n      }\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.complete\"));\n    }\n  }\n\n  #addLoadingLayer() {\n    if (this.#settings.loadingOverlay === false) {\n      return;\n    }\n\n    this.#loadingLayer.addLoadingLayer();\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #disableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #enableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<*>}\n   */\n  async #decodeResponse(response) {\n    try {\n      return await response.clone().json();\n    } catch (error) {\n      return await response.clone().text();\n    }\n  }\n\n  #redirectToNewPage(hash, responseData) {\n    if (hash !== undefined) {\n      window.location.href = responseData.redirect_url + hash;\n      window.location.reload();\n    } else {\n      window.location.href = responseData.redirect_url;\n    }\n  }\n\n  #scrollIntoView(hash) {\n    setTimeout(() => {\n      if (hash) {\n        const targetElement = document.querySelector(`[data-hash-change=\"${hash}\"]`);\n\n        window.scrollTo({ top: targetElement.getBoundingClientRect().y, behavior: \"smooth\" });\n      } else {\n        const targetElement = document.querySelector(this.#settings.targetElement);\n        const offsetTop = targetElement.getBoundingClientRect().y;\n\n        if (document.scrollTop > offsetTop) {\n          window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n        }\n      }\n    });\n  }\n\n  #replaceContent(hash, responseData) {\n    if (hash && document.querySelector(hash)) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(responseData, \"text/html\");\n\n      document.querySelector(hash).innerHTML = doc.querySelector(hash).innerHTML;\n    } else {\n      document.querySelector(this.#settings.targetElement).innerHTML = responseData;\n    }\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class LoadingLayer {\n  #options = {\n    loadingText: \"\",\n  };\n\n  constructor(element, options = {}) {\n    this.#options = mergeSettings(this.#options, options, element.dataset || {});\n  }\n\n  addLoadingLayer() {\n    if (!document.getElementById(\"loading-layer\")) {\n      const body = document.querySelector(\"body\");\n      const jsSvgIcons = JSON.parse(body.dataset.svgIcons);\n      const loadingLayerHtml =\n        '<div id=\"loading-layer\" class=\"loading-layer\"><h1><svg class=\"svg-icon svg-icon__spinner svg-icon--spin\" fill=\"currentColor\"><use xlink:href=\"' +\n        jsSvgIcons[\"loadingLayerIcon\"] +\n        '\"></use></svg> ' +\n        this.#options.loadingText +\n        \"</h1></div>\";\n\n      body.insertAdjacentHTML(\"beforeend\", loadingLayerHtml);\n    }\n  }\n\n  showLoadingLayer() {\n    this.#toggleLoadingLayer(true);\n  }\n\n  hideLoadingLayer() {\n    this.#toggleLoadingLayer(false);\n  }\n\n  #toggleLoadingLayer(show) {\n    document.getElementById(\"loading-layer\")?.classList.toggle(\"loading-layer__active\", show);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class FormValidator {\n  #isFormValid = true;\n  #defaults = {\n    scrollOffsetElement: null,\n  };\n  #settings;\n  #formElement;\n\n  constructor(formElement, options = {}) {\n    this.#settings = mergeSettings(this.#defaults, options, formElement.dataset);\n    this.#formElement = formElement;\n  }\n\n  preValidateForm() {\n    this.checkFormElementsForErrors();\n    this.#focusTabWithFirstErrorMessage();\n    this.#scrollToFirstFormError();\n\n    return this.#isFormValid;\n  }\n\n  checkFormElementsForErrors() {\n    this.#removeAllPreviousErrors();\n\n    for (const field of this.#formElement.elements) {\n      if (field.nodeName !== \"INPUT\" && field.nodeName !== \"TEXTAREA\" && field.nodeName !== \"SELECT\") {\n        continue;\n      }\n\n      if (!field.checkValidity()) {\n        this.#addErrorMessageToFormField(field, field.validationMessage);\n\n        this.#isFormValid = false;\n      }\n    }\n  }\n\n  #removeAllPreviousErrors() {\n    this.#formElement.querySelectorAll(\".is-invalid\").forEach((invalidFormField) => {\n      invalidFormField.classList.remove(\"is-invalid\");\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   */\n  #removeErrorMessageFromFormField(formField) {\n    formField.closest(\"div\")?.querySelector(\".invalid-feedback\")?.remove();\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   * @param {string} errorMessage\n   */\n  #addErrorMessageToFormField(formField, errorMessage) {\n    this.#removeErrorMessageFromFormField(formField);\n\n    formField.classList.add(\"is-invalid\");\n\n    formField\n      .closest(\"div:not(.input-group):not(.btn-group)\")\n      .insertAdjacentHTML(\"beforeend\", `<div class=\"invalid-feedback\">${errorMessage}</div>`);\n  }\n\n  #focusTabWithFirstErrorMessage() {\n    if (!this.#formElement.querySelector(\".nav-tabs\")) {\n      return;\n    }\n\n    const firstElemWithError = this.#formElement.querySelector(\".is-invalid\");\n\n    if (!firstElemWithError) {\n      return;\n    }\n\n    const tabId = firstElemWithError.closest(\".tab-pane\").getAttribute(\"id\");\n\n    this.#formElement.querySelector('.nav-tabs a[href=\"#' + tabId + '\"]').click();\n\n    firstElemWithError.focus();\n  }\n\n  get isFormValid() {\n    return this.#isFormValid;\n  }\n\n  setFormAsValid() {\n    this.#isFormValid = true;\n  }\n\n  /**\n   *\n   * @param {HTMLElement} form\n   * @param {string} errorMessagesHtml\n   */\n  handleFormErrorMessages(form, errorMessagesHtml) {\n    const modalBody = form.querySelector(\".modal-body\");\n\n    // Remove the old - possible existing - error-box\n    document.getElementById(\"error-box\")?.remove();\n\n    // Place the error messages inside the modal body for a better styling\n    if (modalBody) {\n      modalBody.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    } else {\n      form.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    }\n\n    this.#prettyPrintResponseErrorMessages(form, document.getElementById(\"error-box\"));\n  }\n\n  /**\n   *\n   * @param {HTMLElement} form\n   * @param {HTMLElement} errorBox\n   */\n  #prettyPrintResponseErrorMessages(form, errorBox) {\n    this.#removeAllPreviousErrors();\n\n    // highlight all input fields where the validation has failed\n    errorBox.querySelectorAll(\"li\").forEach((errorMessageLine) => {\n      let errorClass = errorMessageLine.dataset.element;\n\n      if (errorClass.length > 0) {\n        let elem = document.getElementById(errorClass) || form.querySelector('[id|=\"' + errorClass + '\"]');\n\n        if (elem) {\n          // Move the error message to the responsible input field(s)\n          // and remove the list item from the error box container\n          this.#addErrorMessageToFormField(elem[0], errorMessageLine.innerHTML);\n          errorMessageLine.remove();\n        }\n      }\n    });\n\n    // if all list items have been removed, remove the error box container too\n    if (errorBox.querySelectorAll(\"li\").length === 0) {\n      errorBox.remove();\n    }\n\n    this.#focusTabWithFirstErrorMessage();\n    this.#scrollToFirstFormError();\n  }\n\n  #scrollToFirstFormError() {\n    if (this.#formElement.closest(\".modal\")?.length > 0) {\n      return;\n    }\n\n    const formErrors = this.#formElement.querySelectorAll(\".is-invalid\");\n\n    if (!formErrors || formErrors.length === 0) {\n      return;\n    }\n\n    if (this.#isElementInViewport(this.#formElement.querySelector(\".invalid-feedback\"))) {\n      return;\n    }\n\n    let offsetTop = formErrors.item(0).getBoundingClientRect().top;\n\n    if (this.#settings.scrollOffsetElement) {\n      const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n\n      if (scrollOffsetElement) {\n        offsetTop -= scrollOffsetElement.clientHeight;\n      }\n    }\n\n    window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n  }\n\n  #isElementInViewport(element) {\n    const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n    let offsetTop = 0;\n\n    if (scrollOffsetElement) {\n      offsetTop = scrollOffsetElement.clientHeight;\n    }\n\n    const rect = element.getBoundingClientRect();\n\n    return (\n      rect.top >= offsetTop &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licencing details.\n */\n\nimport { AjaxForm } from \"../lib/ajax-form\";\nimport { LoadingLayer } from \"../lib/loading-layer\";\nimport { FormValidator } from \"../lib/form-validator\";\n\n// @ToDO: Remove jQuery\n(($) => {\n  const pluginName = \"formSubmit\";\n\n  $.fn[pluginName] = function (options) {\n    return this.each(function () {\n      if (!$.data(this, \"plugin_\" + pluginName)) {\n        $.data(\n          this,\n          \"plugin_\" + pluginName,\n          new AjaxForm(this, new LoadingLayer(this, options), new FormValidator(this, options), options)\n        );\n      }\n    });\n  };\n\n  $('[data-ajax-form=\"true\"]').formSubmit();\n\n  $(document).on(\"draw.dt\", (e) => {\n    $(e.target).find('[data-ajax-form=\"true\"]').formSubmit();\n  });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"ajax-form.min.js"}