{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/utils.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/ajax-form.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/loading-layer.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/form-validator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.js"],"names":["_$utils_4","defaultSettings","constructorOptions","dataAttributeOptions","string","arr","mergedSettings","_objectSpread","_i","_Object$entries","Object","entries","length","_Object$entries$_i","Array","isArray","i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","err","return","o","minLen","_arrayLikeToArray","n","prototype","toString","slice","constructor","name","from","test","TypeError","key","keyStripped","replace","charAt","toLowerCase","___arrayLikeToArray_1","len","arr2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_classPrivateFieldLooseBase","receiver","privateKey","hasOwnProperty","id","_classPrivateFieldLooseKey","_element","_loadingLayer","_formValidator","_defaults","_settings","_init","_findSubmitButton","_prepareFormData","_handleResponseError","_handleSuccessfulResponse","_addLoadingLayer","_disableSubmitButton","_enableSubmitButton","_decodeResponse","_redirectToNewPage","_scrollIntoView","_replaceContent","AjaxForm","element","loadingLayer","formValidator","options","instance","Constructor","_replaceContent2","_scrollIntoView2","_redirectToNewPage2","_decodeResponse2","_enableSubmitButton2","_disableSubmitButton2","_addLoadingLayer2","_handleSuccessfulResponse2","_handleResponseError2","_prepareFormData2","_findSubmitButton2","_init2","completeCallback","targetElement","loadingOverlay","customFormData","method","isFormValid","mergeSettings","dataset","protoProps","_performAjaxRequest","regeneratorRuntime","mark","_callee","form","hash","submitButton","_submitButton","_ref","_form$getAttribute$to","_form$getAttribute","_classPrivateFieldLoo","response","wrap","_context","prev","getAttribute","querySelector","hashChange","showLoadingLayer","toUpperCase","fetch","body","headers","X-Requested-With","sent","ok","t0","catch","console","hideLoadingLayer","finish","stop","_ref3","_this","nodeName","addEventListener","_callee2","_context2","performAjaxRequest","noValidate","_callee3","e","_context3","preventDefault","setFormAsValid","document","dispatchEvent","CustomEvent","detail","preValidateForm","_x","checkFormElementsForErrors","_this2","querySelectorAll","forEach","submitElem","elem","clicked","data","initialData","FormData","append","_x2","_handleResponseError3","_callee4","responseData","_context4","clone","text","status","handleFormErrorMessages","open","write","close","_x3","_x4","_handleSuccessfulResponse3","_callee5","_context5","window","redirect_url","location","addLoadingLayer","disabled","_x5","_decodeResponse3","_callee6","_context6","json","abrupt","href","reload","_this3","setTimeout","concat","scrollTo","top","getBoundingClientRect","y","behavior","offsetTop","scrollTop","doc","DOMParser","parseFromString","innerHTML","_$ajaxForm_1","___defineProperties_3","___classPrivateFieldLooseBase_3","__id_3","___classPrivateFieldLooseKey_3","_options","_toggleLoadingLayer","LoadingLayer","_toggleLoadingLayer2","loadingText","getElementById","loadingLayerHtml","JSON","parse","svgIcons","loadingLayerIcon","insertAdjacentHTML","show","_document$getElementB","classList","toggle","_$loadingLayer_3","___arrayLikeToArray_2","___defineProperties_2","___classPrivateFieldLooseBase_2","__id_2","___classPrivateFieldLooseKey_2","$","_isFormValid","___defaults_2","___settings_2","_formElement","_removeAllPreviousErrors","_removeErrorMessageFromFormField","_addErrorMessageToFormField","_focusTabWithFirstErrorMessage","_prettyPrintResponseErrorMessages","_scrollToFirstFormError","_isElementInViewport","FormValidator","formElement","_isElementInViewport2","_scrollToFirstFormError2","_prettyPrintResponseErrorMessages2","_focusTabWithFirstErrorMessage2","_addErrorMessageToFormField2","_removeErrorMessageFromFormField2","_removeAllPreviousErrors2","scrollOffsetElement","_step","_iterator","allowArrayLike","it","F","s","f","normalCompletion","didErr","step","_e2","_createForOfIteratorHelper","elements","field","checkValidity","validationMessage","get","errorMessagesHtml","modalBody","remove","invalidFormField","formField","_formField$closest","_formField$closest$qu","closest","errorMessage","add","firstElemWithError","tabId","click","focus","errorBox","errorMessageLine","errorClass","formErrors","item","clientHeight","rect","left","bottom","innerHeight","documentElement","right","innerWidth","clientWidth","_$formValidator_2","jQuery","formSubmit","each","on","find"],"mappings":"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","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport function mergeSettings(defaultSettings, constructorOptions, dataAttributeOptions) {\n  const mergedSettings = { ...defaultSettings, ...constructorOptions };\n\n  if (!dataAttributeOptions) {\n    return mergedSettings;\n  }\n\n  for (let [key, value] of Object.entries(dataAttributeOptions)) {\n    const keyStripped = lowerCaseFirstLetter(key.replace(\"ajaxForm\", \"\"));\n\n    if (keyStripped.length > 0 && typeof mergedSettings[keyStripped] !== \"undefined\") {\n      mergedSettings[keyStripped] = value;\n    }\n  }\n\n  return mergedSettings;\n}\n\nfunction lowerCaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class AjaxForm {\n  #element;\n  #loadingLayer;\n  #formValidator;\n  #defaults = {\n    completeCallback: null,\n    targetElement: \"#content\",\n    loadingOverlay: true,\n    customFormData: null,\n    method: null,\n  };\n  #settings;\n\n  /**\n   *\n   * @param {HTMLElement} element\n   * @param {LoadingLayer} loadingLayer\n   * @param {FormValidator} formValidator\n   * @param {object} options\n   */\n  constructor(element, loadingLayer, formValidator, options = {}) {\n    this.#element = element;\n    this.isFormValid = true;\n\n    this.#loadingLayer = loadingLayer;\n    this.#formValidator = formValidator;\n\n    this.#settings = mergeSettings(this.#defaults, options, element.dataset);\n    this.#init();\n  }\n\n  #init() {\n    this.#findSubmitButton();\n    this.#addLoadingLayer();\n\n    if (this.#element.nodeName === \"A\") {\n      this.#element.addEventListener(\"click\", async () => {\n        await this.performAjaxRequest();\n      });\n    } else {\n      this.#element.noValidate = true;\n\n      this.#element.addEventListener(\"submit\", async (e) => {\n        e.preventDefault();\n\n        this.#formValidator.setFormAsValid();\n\n        document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.before\", { detail: this }));\n\n        if (this.#formValidator.isFormValid && this.#formValidator.preValidateForm()) {\n          await this.performAjaxRequest();\n        }\n      });\n\n      this.#element.addEventListener(\"change\", () => {\n        if (this.#formValidator.isFormValid === false) {\n          this.#formValidator.checkFormElementsForErrors();\n        }\n      });\n    }\n  }\n\n  #findSubmitButton() {\n    this.#element.querySelectorAll(\"[type=submit]\").forEach((submitElem) => {\n      submitElem.addEventListener(\"click\", () => {\n        this.#element.querySelectorAll(\"[type=submit]\").forEach((elem) => {\n          delete elem.dataset[\"clicked\"];\n        });\n        submitElem.dataset.clicked = \"true\";\n      });\n    });\n  }\n\n  async performAjaxRequest() {\n    const form = this.#element;\n\n    let hash, submitButton;\n\n    if (this.#element.getAttribute(\"method\")) {\n      submitButton = this.#element.querySelector('[type=\"submit\"][data-clicked=\"true\"]');\n\n      hash = submitButton?.dataset.hashChange;\n    } else {\n      hash = form.dataset.hashChange;\n    }\n\n    this.#loadingLayer.showLoadingLayer();\n    this.#disableSubmitButton(submitButton);\n\n    try {\n      const method = form.getAttribute(\"method\")?.toUpperCase() ?? this.#settings.method?.toUpperCase() ?? \"GET\";\n\n      const response = await fetch(form.getAttribute(\"action\") || form.getAttribute(\"href\"), {\n        method: method,\n        body: method !== \"GET\" ? this.#prepareFormData(submitButton) : null,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      });\n\n      if (!response.ok) {\n        await this.#handleResponseError(response);\n      } else {\n        await this.#handleSuccessfulResponse(response, hash);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.#loadingLayer.hideLoadingLayer();\n      this.#enableSubmitButton(submitButton);\n    }\n  }\n\n  /**\n   *\n   * @returns {FormData}\n   */\n  #prepareFormData(submitButton) {\n    const form = this.#element;\n\n    const initialData = this.#settings.customFormData || {};\n    let data;\n\n    if (form.getAttribute(\"method\")) {\n      data = new FormData(form);\n\n      if (submitButton) {\n        data.append(submitButton.getAttribute(\"name\"), \"1\");\n      }\n    } else {\n      data = new FormData();\n    }\n\n    for (let [key, value] of Object.entries(initialData)) {\n      data.append(key, value);\n    }\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<void>}\n   */\n  async #handleResponseError(response) {\n    const responseData = await response.clone().text();\n\n    if (response.status === 400) {\n      this.#formValidator.handleFormErrorMessages(this.#element, responseData);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.fail\", { detail: this }));\n    } else if (responseData.length > 0) {\n      document.open();\n      document.write(responseData);\n      document.close();\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {string} hash\n   * @returns {Promise<void>}\n   */\n  async #handleSuccessfulResponse(response, hash) {\n    const responseData = await this.#decodeResponse(response);\n\n    if (typeof window[this.#settings.completeCallback] === \"function\") {\n      window[this.#settings.completeCallback](responseData);\n    } else if (responseData.redirect_url) {\n      this.#redirectToNewPage(hash, responseData);\n    } else {\n      this.#replaceContent(hash, responseData);\n      this.#scrollIntoView(hash);\n\n      if (hash !== undefined) {\n        window.location.hash = hash;\n      }\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.complete\"));\n    }\n  }\n\n  #addLoadingLayer() {\n    if (this.#settings.loadingOverlay === false) {\n      return;\n    }\n\n    this.#loadingLayer.addLoadingLayer();\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #disableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #enableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<*>}\n   */\n  async #decodeResponse(response) {\n    try {\n      return await response.clone().json();\n    } catch (error) {\n      return await response.clone().text();\n    }\n  }\n\n  #redirectToNewPage(hash, responseData) {\n    if (hash !== undefined) {\n      window.location.href = responseData.redirect_url + hash;\n      window.location.reload();\n    } else {\n      window.location.href = responseData.redirect_url;\n    }\n  }\n\n  #scrollIntoView(hash) {\n    setTimeout(() => {\n      if (hash) {\n        const targetElement = document.querySelector(`[data-hash-change=\"${hash}\"]`);\n\n        window.scrollTo({ top: targetElement.getBoundingClientRect().y, behavior: \"smooth\" });\n      } else {\n        const targetElement = document.querySelector(this.#settings.targetElement);\n        const offsetTop = targetElement.getBoundingClientRect().y;\n\n        if (document.scrollTop > offsetTop) {\n          window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n        }\n      }\n    });\n  }\n\n  #replaceContent(hash, responseData) {\n    if (hash && document.querySelector(hash)) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(responseData, \"text/html\");\n\n      document.querySelector(hash).innerHTML = doc.querySelector(hash).innerHTML;\n    } else {\n      document.querySelector(this.#settings.targetElement).innerHTML = responseData;\n    }\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class LoadingLayer {\n  #options = {\n    loadingText: \"\",\n  };\n\n  constructor(element, options = {}) {\n    this.#options = mergeSettings(this.#options, options, element.dataset || {});\n  }\n\n  addLoadingLayer() {\n    if (!document.getElementById(\"loading-layer\")) {\n      const body = document.querySelector(\"body\");\n      const jsSvgIcons = JSON.parse(body.dataset.svgIcons);\n      const loadingLayerHtml =\n        '<div id=\"loading-layer\" class=\"loading-layer\"><h1><svg class=\"svg-icon svg-icon__spinner svg-icon--spin\" fill=\"currentColor\"><use xlink:href=\"' +\n        jsSvgIcons[\"loadingLayerIcon\"] +\n        '\"></use></svg> ' +\n        this.#options.loadingText +\n        \"</h1></div>\";\n\n      body.insertAdjacentHTML(\"beforeend\", loadingLayerHtml);\n    }\n  }\n\n  showLoadingLayer() {\n    this.#toggleLoadingLayer(true);\n  }\n\n  hideLoadingLayer() {\n    this.#toggleLoadingLayer(false);\n  }\n\n  #toggleLoadingLayer(show) {\n    document.getElementById(\"loading-layer\")?.classList.toggle(\"loading-layer__active\", show);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class FormValidator {\n  #isFormValid = true;\n  #defaults = {\n    scrollOffsetElement: null,\n  };\n  #settings;\n  #formElement;\n\n  constructor(formElement, options = {}) {\n    this.#settings = mergeSettings(this.#defaults, options, formElement.dataset);\n    this.#formElement = formElement;\n  }\n\n  preValidateForm() {\n    this.checkFormElementsForErrors();\n    this.#focusTabWithFirstErrorMessage();\n    this.#scrollToFirstFormError();\n\n    return this.#isFormValid;\n  }\n\n  checkFormElementsForErrors() {\n    this.#removeAllPreviousErrors();\n\n    for (const field of this.#formElement.elements) {\n      if (field.nodeName !== \"INPUT\" && field.nodeName !== \"TEXTAREA\" && field.nodeName !== \"SELECT\") {\n        continue;\n      }\n\n      if (!field.checkValidity()) {\n        this.#addErrorMessageToFormField(field, field.validationMessage);\n\n        this.#isFormValid = false;\n      }\n    }\n  }\n\n  #removeAllPreviousErrors() {\n    this.#formElement.querySelectorAll(\".is-invalid\").forEach((invalidFormField) => {\n      invalidFormField.classList.remove(\"is-invalid\");\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   */\n  #removeErrorMessageFromFormField(formField) {\n    formField.closest(\"div\")?.querySelector(\".invalid-feedback\")?.remove();\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   * @param {string} errorMessage\n   */\n  #addErrorMessageToFormField(formField, errorMessage) {\n    this.#removeErrorMessageFromFormField(formField);\n\n    formField.classList.add(\"is-invalid\");\n\n    formField\n      .closest(\"div:not(.input-group):not(.btn-group)\")\n      .insertAdjacentHTML(\"beforeend\", `<div class=\"invalid-feedback\">${errorMessage}</div>`);\n  }\n\n  #focusTabWithFirstErrorMessage() {\n    if (!this.#formElement.querySelector(\".nav-tabs\")) {\n      return;\n    }\n\n    const firstElemWithError = this.#formElement.querySelector(\".is-invalid\");\n\n    if (!firstElemWithError) {\n      return;\n    }\n\n    const tabId = firstElemWithError.closest(\".tab-pane\").getAttribute(\"id\");\n\n    this.#formElement.querySelector('.nav-tabs a[href=\"#' + tabId + '\"]').click();\n\n    firstElemWithError.focus();\n  }\n\n  get isFormValid() {\n    return this.#isFormValid;\n  }\n\n  setFormAsValid() {\n    this.#isFormValid = true;\n  }\n\n  /**\n   *\n   * @param {HTMLElement} form\n   * @param {string} errorMessagesHtml\n   */\n  handleFormErrorMessages(form, errorMessagesHtml) {\n    const modalBody = form.querySelector(\".modal-body\");\n\n    // Remove the old - possible existing - error-box\n    document.getElementById(\"error-box\")?.remove();\n\n    // Place the error messages inside the modal body for a better styling\n    if (modalBody) {\n      modalBody.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    } else {\n      form.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    }\n\n    this.#prettyPrintResponseErrorMessages(form, document.getElementById(\"error-box\"));\n  }\n\n  /**\n   *\n   * @param {HTMLElement} form\n   * @param {HTMLElement} errorBox\n   */\n  #prettyPrintResponseErrorMessages(form, errorBox) {\n    this.#removeAllPreviousErrors();\n\n    // highlight all input fields where the validation has failed\n    errorBox.querySelectorAll(\"li\").forEach((errorMessageLine) => {\n      let errorClass = errorMessageLine.dataset.element;\n\n      if (errorClass.length > 0) {\n        let elem = document.getElementById(errorClass) || form.querySelector('[id|=\"' + errorClass + '\"]');\n\n        if (elem) {\n          // Move the error message to the responsible input field(s)\n          // and remove the list item from the error box container\n          this.#addErrorMessageToFormField(elem[0], errorMessageLine.innerHTML);\n          errorMessageLine.remove();\n        }\n      }\n    });\n\n    // if all list items have been removed, remove the error box container too\n    if (errorBox.querySelectorAll(\"li\").length === 0) {\n      errorBox.remove();\n    }\n\n    this.#focusTabWithFirstErrorMessage();\n    this.#scrollToFirstFormError();\n  }\n\n  #scrollToFirstFormError() {\n    if (this.#formElement.closest(\".modal\")?.length > 0) {\n      return;\n    }\n\n    const formErrors = this.#formElement.querySelectorAll(\".is-invalid\");\n\n    if (!formErrors || formErrors.length === 0) {\n      return;\n    }\n\n    if (this.#isElementInViewport(this.#formElement.querySelector(\".invalid-feedback\"))) {\n      return;\n    }\n\n    let offsetTop = formErrors.item(0).getBoundingClientRect().top;\n\n    if (this.#settings.scrollOffsetElement) {\n      const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n\n      if (scrollOffsetElement) {\n        offsetTop -= scrollOffsetElement.clientHeight;\n      }\n    }\n\n    window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n  }\n\n  #isElementInViewport(element) {\n    const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n    let offsetTop = 0;\n\n    if (scrollOffsetElement) {\n      offsetTop = scrollOffsetElement.clientHeight;\n    }\n\n    const rect = element.getBoundingClientRect();\n\n    return (\n      rect.top >= offsetTop &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licencing details.\n */\n\nimport { AjaxForm } from \"../lib/ajax-form\";\nimport { LoadingLayer } from \"../lib/loading-layer\";\nimport { FormValidator } from \"../lib/form-validator\";\n\n// @ToDO: Remove jQuery\n(($) => {\n  const pluginName = \"formSubmit\";\n\n  $.fn[pluginName] = function (options) {\n    return this.each(function () {\n      if (!$.data(this, \"plugin_\" + pluginName)) {\n        $.data(\n          this,\n          \"plugin_\" + pluginName,\n          new AjaxForm(this, new LoadingLayer(this, options), new FormValidator(this, options), options)\n        );\n      }\n    });\n  };\n\n  $('[data-ajax-form=\"true\"]').formSubmit();\n\n  $(document).on(\"draw.dt\", (e) => {\n    $(e.target).find('[data-ajax-form=\"true\"]').formSubmit();\n  });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"ajax-form.min.js"}