{"version":3,"file":"./ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.min.js","mappings":"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","sources":["webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/lib/utils.js","webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/lib/ajax-form.js","webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/lib/loading-indicator.js","webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/lib/form-validator.js","webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.js"],"sourcesContent":["/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport function mergeSettings(defaultSettings, constructorOptions, dataAttributeOptions) {\n  const mergedSettings = { ...defaultSettings, ...constructorOptions };\n\n  if (!dataAttributeOptions) {\n    return mergedSettings;\n  }\n\n  for (let [key, value] of Object.entries(dataAttributeOptions)) {\n    const keyStripped = lowerCaseFirstLetter(key.replace(\"ajaxForm\", \"\"));\n\n    if (keyStripped.length > 0 && typeof mergedSettings[keyStripped] !== \"undefined\") {\n      try {\n        mergedSettings[keyStripped] = JSON.parse(value);\n      } catch {\n        mergedSettings[keyStripped] = value;\n      }\n    }\n  }\n\n  return mergedSettings;\n}\n\nfunction lowerCaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n/**\n * This function add downloads javascript code (e.g. after XHR requests) to the HTML documents <head>, so that the\n * javascript code can actually get executed.\n *\n * @param {HTMLElement} elementContainingScriptTags\n */\nexport function addScriptsToHead(elementContainingScriptTags) {\n  for (const ajaxScriptElement of elementContainingScriptTags.getElementsByTagName(\"script\")) {\n    const scriptElement = document.createElement(\"script\");\n    if (!ajaxScriptElement.src) {\n      scriptElement.innerHTML = ajaxScriptElement.innerHTML;\n    } else {\n      scriptElement.src = ajaxScriptElement.src;\n    }\n    document.head.appendChild(scriptElement);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { addScriptsToHead, mergeSettings } from \"./utils\";\nimport { delegateEvent } from \"./event-handler\";\n\nexport class AjaxForm {\n  #loadingIndicator;\n  #formValidator;\n  #defaults = {\n    completeCallback: null,\n    targetElement: \"#content\",\n    loadingOverlay: true,\n    customFormData: null,\n    method: null,\n  };\n\n  /**\n   *\n   * @param {LoadingIndicator} loadingIndicator\n   * @param {FormValidator} formValidator\n   */\n  constructor(loadingIndicator, formValidator) {\n    this.#loadingIndicator = loadingIndicator;\n    this.#formValidator = formValidator;\n\n    this.#init();\n  }\n\n  #init() {\n    this.#registerClickedSubmitButton();\n\n    delegateEvent(document, \"click\", 'a[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      await this.performAjaxRequest(elem);\n    });\n\n    delegateEvent(document, \"submit\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      this.#formValidator.setFormAsValid(elem);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.before\", { detail: this }));\n\n      if (this.#formValidator.isValid(elem) && this.#formValidator.preValidateForm(elem)) {\n        await this.performAjaxRequest(elem);\n      }\n    });\n\n    delegateEvent(document, \"change\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      if (this.#formValidator.isValid(elem) === false) {\n        this.#formValidator.checkFormElementsForErrors(elem);\n      }\n    });\n  }\n\n  #registerClickedSubmitButton() {\n    delegateEvent(document, \"click\", 'form[data-ajax-form=\"true\"] [type=\"submit\"]', (event, submitElem) => {\n      submitElem\n        .closest(\"form\")\n        .querySelectorAll(\"[type=submit]\")\n        .forEach((elem) => {\n          delete elem.dataset[\"clicked\"];\n        });\n      submitElem.dataset.clicked = \"true\";\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async performAjaxRequest(targetElement) {\n    const mergedSettings = mergeSettings(this.#defaults, {}, targetElement.dataset);\n    let hash, submitButton;\n\n    if (targetElement instanceof HTMLFormElement) {\n      submitButton = targetElement.querySelector('[type=\"submit\"][data-clicked=\"true\"]');\n\n      hash = submitButton?.dataset.hashChange;\n    } else {\n      hash = targetElement.dataset.hashChange;\n    }\n\n    if (mergedSettings.loadingOverlay) {\n      this.#loadingIndicator.addLoadingIndicator(submitButton || targetElement);\n      this.#loadingIndicator.showLoadingIndicator(submitButton || targetElement);\n    }\n\n    this.#disableSubmitButton(submitButton);\n\n    try {\n      const method =\n        targetElement.getAttribute(\"method\")?.toUpperCase() ?? mergedSettings.method?.toUpperCase() ?? \"GET\";\n\n      const response = await fetch(targetElement.getAttribute(\"action\") || targetElement.getAttribute(\"href\"), {\n        method: method,\n        body: method !== \"GET\" ? this.#prepareFormData(targetElement, submitButton, mergedSettings) : null,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      });\n\n      if (!response.ok) {\n        await this.#handleResponseError(response, targetElement);\n      } else {\n        await this.#handleSuccessfulResponse(response, hash, mergedSettings);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.#loadingIndicator.hideLoadingIndicator(submitButton || targetElement);\n      this.#enableSubmitButton(submitButton);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} submitButton\n   * @param {Record<string, any>} mergedSettings\n   * @returns {FormData}\n   */\n  #prepareFormData(formElement, submitButton, mergedSettings) {\n    const initialData = mergedSettings.customFormData || {};\n    let data;\n\n    if (formElement.getAttribute(\"method\")) {\n      data = new FormData(formElement);\n\n      if (submitButton) {\n        data.append(submitButton.getAttribute(\"name\"), \"1\");\n      }\n    } else {\n      data = new FormData();\n    }\n\n    for (let [key, value] of Object.entries(initialData)) {\n      data.append(key, value);\n    }\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async #handleResponseError(response, targetElement) {\n    const responseData = await response.clone().text();\n\n    if (response.status === 400) {\n      this.#formValidator.handleFormErrorMessages(targetElement, responseData);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.fail\", { detail: this }));\n    } else if (responseData.length > 0) {\n      document.open();\n      document.write(responseData);\n      document.close();\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {string} hash\n   * @param {Record<string, any>} mergedSettings\n   * @returns {Promise<void>}\n   */\n  async #handleSuccessfulResponse(response, hash, mergedSettings) {\n    const responseData = await this.#decodeResponse(response);\n\n    if (typeof window[mergedSettings.completeCallback] === \"function\") {\n      window[mergedSettings.completeCallback](responseData);\n    } else if (responseData.redirect_url) {\n      this.#redirectToNewPage(hash, responseData);\n    } else {\n      this.#replaceContent(hash, responseData, mergedSettings);\n      this.#scrollIntoView(hash, mergedSettings);\n\n      if (hash !== undefined) {\n        window.location.hash = hash;\n      }\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.complete\"));\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #disableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #enableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<*>}\n   */\n  async #decodeResponse(response) {\n    try {\n      return await response.clone().json();\n    } catch (error) {\n      return await response.clone().text();\n    }\n  }\n\n  #redirectToNewPage(hash, responseData) {\n    if (hash !== undefined) {\n      window.location.href = responseData.redirect_url + hash;\n      window.location.reload();\n    } else {\n      window.location.href = responseData.redirect_url;\n    }\n  }\n\n  #scrollIntoView(hash, mergedSettings) {\n    setTimeout(() => {\n      if (hash) {\n        const targetElement = document.querySelector(`[data-hash-change=\"${hash}\"]`);\n\n        window.scrollTo({ top: targetElement.getBoundingClientRect().y, behavior: \"smooth\" });\n      } else {\n        const targetElement = document.querySelector(mergedSettings.targetElement);\n        const offsetTop = targetElement.getBoundingClientRect().y;\n\n        if (document.scrollTop > offsetTop) {\n          window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n        }\n      }\n    });\n  }\n\n  #replaceContent(hash, responseData, mergedSettings) {\n    let targetElement;\n    let updatedContentData;\n\n    if (hash && document.querySelector(hash)) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(responseData, \"text/html\");\n\n      targetElement = document.querySelector(hash);\n      updatedContentData = doc.querySelector(hash).innerHTML;\n    } else {\n      targetElement = document.querySelector(mergedSettings.targetElement);\n      updatedContentData = responseData;\n    }\n\n    targetElement.innerHTML = updatedContentData;\n    addScriptsToHead(targetElement);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport class LoadingIndicator {\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  addLoadingIndicator(targetElement) {\n    if (!targetElement.querySelector(\".loading-indicator\")) {\n      const body = document.querySelector(\"body\");\n      const jsSvgIcons = JSON.parse(body.dataset.svgIcons);\n\n      targetElement.insertAdjacentHTML(\"afterbegin\", jsSvgIcons[\"loadingIndicatorIcon\"]);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  showLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, true);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  hideLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, false);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {Boolean} show\n   */\n  #toggleLoadingIndicator(targetElement, show) {\n    targetElement.querySelector(\".loading-indicator\")?.classList.toggle(\"loading-indicator__active\", show);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class FormValidator {\n  #defaults = {\n    scrollOffsetElement: null,\n  };\n  #settings;\n\n  constructor(options = {}) {\n    this.#settings = mergeSettings(this.#defaults, options, {});\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  preValidateForm(formElement) {\n    this.checkFormElementsForErrors(formElement);\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n\n    return this.isValid(formElement);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  checkFormElementsForErrors(formElement) {\n    this.#removeAllPreviousErrors(formElement);\n\n    for (const field of formElement.elements) {\n      if (field.nodeName !== \"INPUT\" && field.nodeName !== \"TEXTAREA\" && field.nodeName !== \"SELECT\") {\n        continue;\n      }\n\n      if (!field.checkValidity()) {\n        this.#addErrorMessageToFormField(field, field.validationMessage);\n\n        if (!formElement.formValidator) {\n          formElement.formValidator = {};\n        }\n\n        formElement.formValidator.isValid = false;\n      }\n    }\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #removeAllPreviousErrors(formElement) {\n    formElement.querySelectorAll(\".is-invalid\").forEach((invalidFormField) => {\n      invalidFormField.classList.remove(\"is-invalid\");\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   */\n  #removeErrorMessageFromFormField(formField) {\n    formField.closest(\"div\")?.querySelector(\".invalid-feedback\")?.remove();\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   * @param {string} errorMessage\n   */\n  #addErrorMessageToFormField(formField, errorMessage) {\n    this.#removeErrorMessageFromFormField(formField);\n\n    formField.classList.add(\"is-invalid\");\n\n    formField\n      .closest(\"div:not(.input-group):not(.btn-group)\")\n      .insertAdjacentHTML(\"beforeend\", `<div class=\"invalid-feedback\">${errorMessage}</div>`);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  #focusTabWithFirstErrorMessage(formElement) {\n    if (!formElement.querySelector(\".nav-tabs\")) {\n      return;\n    }\n\n    const firstElemWithError = formElement.querySelector(\".is-invalid\");\n\n    if (!firstElemWithError) {\n      return;\n    }\n\n    const tabId = firstElemWithError.closest(\".tab-pane\").getAttribute(\"id\");\n\n    formElement.querySelector('.nav-tabs a[href=\"#' + tabId + '\"]').click();\n\n    firstElemWithError.focus();\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  isValid(formElement) {\n    return !!formElement.formValidator?.isValid;\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  setFormAsValid(formElement) {\n    formElement.formValidator = {\n      isValid: true,\n    };\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {string} errorMessagesHtml\n   */\n  handleFormErrorMessages(targetElement, errorMessagesHtml) {\n    if (!(targetElement instanceof HTMLFormElement)) {\n      return;\n    }\n\n    const modalBody = targetElement.querySelector(\".modal-body\");\n\n    // Remove the old - possible existing - error-box\n    document.getElementById(\"error-box\")?.remove();\n\n    // Place the error messages inside the modal body for a better styling\n    if (targetElement.closest(\".modal\") && modalBody) {\n      modalBody.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    } else {\n      targetElement.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    }\n\n    this.#prettyPrintResponseErrorMessages(targetElement, document.getElementById(\"error-box\"));\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} errorBox\n   */\n  #prettyPrintResponseErrorMessages(formElement, errorBox) {\n    this.#removeAllPreviousErrors(formElement);\n\n    // highlight all input fields where the validation has failed\n    errorBox.querySelectorAll(\"li\").forEach((errorMessageLine) => {\n      let errorClass = errorMessageLine.dataset.element;\n\n      if (errorClass?.length > 0) {\n        let elem = document.getElementById(errorClass) || formElement.querySelector('[id|=\"' + errorClass + '\"]');\n\n        if (elem) {\n          // Move the error message to the responsible input field(s)\n          // and remove the list item from the error box container\n          this.#addErrorMessageToFormField(elem[0], errorMessageLine.innerHTML);\n          errorMessageLine.remove();\n        }\n      }\n    });\n\n    // if all list items have been removed, remove the error box container too\n    if (errorBox.querySelectorAll(\"li\").length === 0) {\n      errorBox.remove();\n    }\n\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #scrollToFirstFormError(formElement) {\n    if (formElement.closest(\".modal\")?.length > 0) {\n      return;\n    }\n\n    const formErrors = formElement.querySelectorAll(\".is-invalid\");\n\n    if (!formErrors || formErrors.length === 0) {\n      return;\n    }\n\n    if (this.#isElementInViewport(formElement.querySelector(\".invalid-feedback\"))) {\n      return;\n    }\n\n    let offsetTop = formErrors.item(0).getBoundingClientRect().top;\n\n    if (this.#settings.scrollOffsetElement) {\n      const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n\n      if (scrollOffsetElement) {\n        offsetTop -= scrollOffsetElement.clientHeight;\n      }\n    }\n\n    window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n  }\n\n  #isElementInViewport(element) {\n    const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n    let offsetTop = 0;\n\n    if (scrollOffsetElement) {\n      offsetTop = scrollOffsetElement.clientHeight;\n    }\n\n    const rect = element.getBoundingClientRect();\n\n    return (\n      rect.top >= offsetTop &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licencing details.\n */\n\nimport { AjaxForm } from \"../lib/ajax-form\";\nimport { LoadingIndicator } from \"../lib/loading-indicator\";\nimport { FormValidator } from \"../lib/form-validator\";\n\n(() => {\n  new AjaxForm(new LoadingIndicator(), new FormValidator());\n})();\n"],"names":["mergeSettings","defaultSettings","constructorOptions","dataAttributeOptions","mergedSettings","key","value","Object","entries","keyStripped","string","replace","charAt","toLowerCase","slice","length","JSON","parse","delegateEvent","element","eventName","selectorOrTargetElement","handler","addEventListener","event","elems","document","querySelectorAll","forEach","elem","contains","target","AjaxForm","constructor","loadingIndicator","formValidator","completeCallback","targetElement","loadingOverlay","customFormData","method","this","dataset","hash","submitButton","HTMLFormElement","querySelector","hashChange","addLoadingIndicator","showLoadingIndicator","getAttribute","toUpperCase","response","fetch","body","headers","ok","error","console","hideLoadingIndicator","async","preventDefault","performAjaxRequest","setFormAsValid","dispatchEvent","CustomEvent","detail","isValid","preValidateForm","checkFormElementsForErrors","submitElem","closest","clicked","formElement","initialData","data","FormData","append","responseData","clone","text","status","handleFormErrorMessages","open","write","close","window","redirect_url","undefined","location","disabled","json","href","reload","setTimeout","scrollTo","top","getBoundingClientRect","y","behavior","offsetTop","scrollTop","updatedContentData","doc","DOMParser","parseFromString","innerHTML","elementContainingScriptTags","ajaxScriptElement","getElementsByTagName","scriptElement","createElement","src","head","appendChild","addScriptsToHead","LoadingIndicator","jsSvgIcons","svgIcons","insertAdjacentHTML","show","classList","toggle","FormValidator","options","scrollOffsetElement","field","elements","nodeName","checkValidity","validationMessage","errorMessagesHtml","modalBody","getElementById","remove","invalidFormField","formField","errorMessage","add","firstElemWithError","tabId","click","focus","errorBox","errorMessageLine","errorClass","formErrors","item","clientHeight","rect","left","bottom","innerHeight","documentElement","right","innerWidth","clientWidth"],"sourceRoot":""}