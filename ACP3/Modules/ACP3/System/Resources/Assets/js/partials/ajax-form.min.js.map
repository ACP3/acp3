{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/utils.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/ajax-form.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/loading-layer.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/form-validator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.js"],"names":["_$utils_4","defaultSettings","constructorOptions","dataAttributeOptions","mergedSettings","_objectSpread","_i","_Object$entries","Object","entries","length","_Object$entries$_i","arr","Array","isArray","i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","err","return","o","minLen","_arrayLikeToArray","n","prototype","toString","slice","constructor","name","from","test","TypeError","key","keyStripped","string","replace","charAt","toLowerCase","___arrayLikeToArray_1","len","arr2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","_classPrivateFieldLooseBase","receiver","privateKey","hasOwnProperty","id","_classPrivateFieldLooseKey","_loadingLayer","_formValidator","_defaults","_settings","_init","_findSubmitButton","_prepareFormData","_handleResponseError","_handleSuccessfulResponse","_addLoadingLayer","_disableSubmitButton","_enableSubmitButton","_decodeResponse","_redirectToNewPage","_scrollIntoView","_replaceContent","_rebindHandlers","AjaxForm","element","loadingLayer","formValidator","options","instance","Constructor","_rebindHandlers2","_replaceContent2","_scrollIntoView2","_redirectToNewPage2","_decodeResponse2","_enableSubmitButton2","_disableSubmitButton2","_addLoadingLayer2","_handleSuccessfulResponse2","_handleResponseError2","_prepareFormData2","_findSubmitButton2","_init2","completeCallback","targetElement","loadingOverlay","customFormData","method","isFormValid","mergeSettings","jQuery","data","protoProps","_performAjaxRequest","regeneratorRuntime","mark","_callee","$form","hash","$submitButton","_classPrivateFieldLoo","_classPrivateFieldLoo2","response","wrap","_context","prev","attr","showLoadingLayer","toUpperCase","fetch","body","headers","X-Requested-With","sent","ok","t0","catch","console","hideLoadingLayer","finish","stop","_ref2","_ref","_this","that","noValidate","on","_callee2","e","_context2","preventDefault","setFormAsValid","document","trigger","preValidateForm","performAjaxRequest","_x","_callee3","_context3","prop","_x2","checkFormElementsForErrors","find","click","closest","removeAttr","initialData","FormData","append","_x3","_x4","_handleResponseError3","_callee4","responseData","_context4","clone","text","status","handleFormErrorMessages","open","write","close","_x5","_x6","_x7","_handleSuccessfulResponse3","_callee5","_context5","window","redirect_url","location","addLoadingLayer","_x8","_decodeResponse3","_callee6","_context6","json","abrupt","href","reload","_this2","setTimeout","querySelector","concat","scrollTo","top","getBoundingClientRect","y","behavior","offsetTop","scrollTop","html","formSubmit","_$ajaxForm_1","___defineProperties_3","___classPrivateFieldLooseBase_3","__id_3","___classPrivateFieldLooseKey_3","_options","_toggleLoadingLayer","LoadingLayer","_toggleLoadingLayer2","loadingText","getElementById","$body","loadingLayerIcon","appendTo","show","_document$getElementB","classList","toggle","_$loadingLayer_3","___arrayLikeToArray_2","___defineProperties_2","___classPrivateFieldLooseBase_2","__id_2","___classPrivateFieldLooseKey_2","$","_isFormValid","___defaults_2","___settings_2","_formElement","_removeAllPreviousErrors","_addErrorDecorationToFormGroup","_removeErrorMessageFromFormField","_addErrorMessageToFormField","_focusTabWithFirstErrorMessage","_prettyPrintResponseErrorMessages","_scrollToFirstFormError","_isElementInViewport","FormValidator","formElement","_isElementInViewport2","_scrollToFirstFormError2","_prettyPrintResponseErrorMessages2","_focusTabWithFirstErrorMessage2","_addErrorMessageToFormField2","_removeErrorMessageFromFormField2","_addErrorDecorationToFormGroup2","_removeAllPreviousErrors2","scrollOffsetElement","_step","_iterator","allowArrayLike","it","F","s","f","normalCompletion","didErr","step","_e2","_createForOfIteratorHelper","elements","field","nodeName","checkValidity","validationMessage","get","errorMessagesHtml","$errorBox","$modalBody","remove","hide","prependTo","is","fadeIn","removeClass","elem","_elem$closest","add","_elem$closest2","elementContainingValidationErrors","parentElement","removeChild","$element","errorMessage","jsSvgIcons","validationFailedIcon","$elem","tabId","tab","focus","each","index","$this","errorClass","filter","$formErrors","offset","$scrollOffsetElement","height","rect","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","_$formValidator_2"],"mappings":"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","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport function mergeSettings(defaultSettings, constructorOptions, dataAttributeOptions) {\n  const mergedSettings = { ...defaultSettings, ...constructorOptions };\n\n  for (let [key, value] of Object.entries(dataAttributeOptions)) {\n    const keyStripped = lowerCaseFirstLetter(key.replace(\"ajaxForm\", \"\"));\n\n    if (keyStripped.length > 0 && typeof mergedSettings[keyStripped] !== \"undefined\") {\n      mergedSettings[keyStripped] = value;\n    }\n  }\n\n  return mergedSettings;\n}\n\nfunction lowerCaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class AjaxForm {\n  #loadingLayer;\n  #formValidator;\n  #defaults = {\n    completeCallback: null,\n    targetElement: \"#content\",\n    loadingOverlay: true,\n    customFormData: null,\n    method: null,\n  };\n  #settings;\n\n  /**\n   *\n   * @param {HTMLElement} element\n   * @param {LoadingLayer} loadingLayer\n   * @param {FormValidator} formValidator\n   * @param {object} options\n   */\n  constructor(element, loadingLayer, formValidator, options) {\n    this.element = element;\n    this.isFormValid = true;\n\n    this.#loadingLayer = loadingLayer;\n    this.#formValidator = formValidator;\n\n    this.#settings = mergeSettings(this.#defaults, options, jQuery(element).data());\n    this.#init();\n  }\n\n  #init() {\n    const that = this;\n\n    this.#findSubmitButton();\n    this.#addLoadingLayer();\n    this.element.noValidate = true;\n\n    jQuery(this.element)\n      .on(\"submit\", async (e) => {\n        e.preventDefault();\n\n        this.#formValidator.setFormAsValid();\n\n        jQuery(document).trigger(\"acp3.ajaxFrom.submit.before\", [this]);\n\n        if (this.#formValidator.isFormValid && this.#formValidator.preValidateForm()) {\n          await this.performAjaxRequest();\n        }\n      })\n      .on(\"click\", async function (e) {\n        if (jQuery(this).prop(\"tagName\") === \"A\") {\n          e.preventDefault();\n\n          await that.performAjaxRequest();\n        }\n      })\n      .on(\"change\", () => {\n        if (this.#formValidator.isFormValid === false) {\n          this.#formValidator.checkFormElementsForErrors();\n        }\n      });\n  }\n\n  #findSubmitButton() {\n    jQuery(this.element)\n      .find(\":submit\")\n      .click(function () {\n        jQuery(\":submit\", jQuery(this).closest(\"form\")).removeAttr(\"data-clicked\");\n        jQuery(this).attr(\"data-clicked\", \"true\");\n      });\n  }\n\n  async performAjaxRequest() {\n    const $form = jQuery(this.element);\n\n    let hash, $submitButton;\n\n    if ($form.attr(\"method\")) {\n      $submitButton = jQuery(':submit[data-clicked=\"true\"]', $form);\n\n      hash = $submitButton.data(\"hashChange\");\n    } else {\n      hash = $form.data(\"hashChange\");\n    }\n\n    this.#loadingLayer.showLoadingLayer();\n    this.#disableSubmitButton($submitButton);\n\n    try {\n      const method = $form.attr(\"method\")\n        ? $form.attr(\"method\").toUpperCase()\n        : this.#settings.method?.toUpperCase() ?? \"GET\";\n\n      const response = await fetch($form.attr(\"action\") || $form.attr(\"href\"), {\n        method: method,\n        body: method !== \"GET\" ? this.#prepareFormData($form) : null,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      });\n\n      if (!response.ok) {\n        await this.#handleResponseError(response, $form);\n      } else {\n        await this.#handleSuccessfulResponse(response, $form, hash);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.#loadingLayer.hideLoadingLayer();\n      this.#enableSubmitButton($submitButton);\n    }\n  }\n\n  /**\n   *\n   * @param {jQuery} $form\n   * @returns {FormData}\n   */\n  #prepareFormData($form) {\n    const initialData = this.#settings.customFormData || {};\n    let data;\n\n    if ($form.attr(\"method\")) {\n      const $submitButton = jQuery(':submit[data-clicked=\"true\"]', $form);\n\n      data = new FormData($form[0]);\n\n      if ($submitButton.length) {\n        data.append($submitButton.attr(\"name\"), \"1\");\n      }\n    } else {\n      data = new FormData();\n    }\n\n    for (let [key, value] of Object.entries(initialData)) {\n      data.append(key, value);\n    }\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {jQuery} $form\n   * @returns {Promise<void>}\n   */\n  async #handleResponseError(response, $form) {\n    const responseData = await response.clone().text();\n\n    if (response.status === 400) {\n      this.#formValidator.handleFormErrorMessages($form, responseData);\n\n      jQuery(document).trigger(\"acp3.ajaxFrom.submit.fail\", [this]);\n    } else if (responseData.length > 0) {\n      document.open();\n      document.write(responseData);\n      document.close();\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {jQuery} $form\n   * @param {string} hash\n   * @returns {Promise<void>}\n   */\n  async #handleSuccessfulResponse(response, $form, hash) {\n    const responseData = await this.#decodeResponse(response);\n\n    if (typeof window[this.#settings.completeCallback] === \"function\") {\n      window[this.#settings.completeCallback](responseData);\n    } else if (responseData.redirect_url) {\n      this.#redirectToNewPage(hash, responseData);\n    } else {\n      this.#replaceContent(hash, responseData);\n      this.#rebindHandlers(hash);\n      this.#scrollIntoView(hash);\n\n      if (hash !== undefined) {\n        window.location.hash = hash;\n      }\n\n      jQuery(document).trigger(\"acp3.ajaxFrom.complete\");\n    }\n  }\n\n  #addLoadingLayer() {\n    if (this.#settings.loadingOverlay === false) {\n      return;\n    }\n\n    this.#loadingLayer.addLoadingLayer();\n  }\n\n  #disableSubmitButton($submitButton) {\n    if (typeof $submitButton !== \"undefined\") {\n      $submitButton.prop(\"disabled\", true);\n    }\n  }\n\n  #enableSubmitButton($submitButton) {\n    if (typeof $submitButton !== \"undefined\") {\n      $submitButton.prop(\"disabled\", false);\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<*>}\n   */\n  async #decodeResponse(response) {\n    try {\n      return await response.clone().json();\n    } catch (error) {\n      return await response.clone().text();\n    }\n  }\n\n  #redirectToNewPage(hash, responseData) {\n    if (hash !== undefined) {\n      window.location.href = responseData.redirect_url + hash;\n      window.location.reload();\n    } else {\n      window.location.href = responseData.redirect_url;\n    }\n  }\n\n  #scrollIntoView(hash) {\n    setTimeout(() => {\n      if (hash) {\n        const targetElement = document.querySelector(`[data-hash-change=\"${hash}\"]`);\n\n        window.scrollTo({ top: targetElement.getBoundingClientRect().y, behavior: \"smooth\" });\n      } else {\n        const targetElement = document.querySelector(this.#settings.targetElement);\n        const offsetTop = targetElement.getBoundingClientRect().y;\n\n        if (jQuery(document).scrollTop() > offsetTop) {\n          window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n        }\n      }\n    });\n  }\n\n  #replaceContent(hash, responseData) {\n    if (hash && jQuery(hash).length) {\n      jQuery(hash).html(jQuery(responseData).find(hash).html());\n    } else {\n      jQuery(this.#settings.targetElement).html(responseData);\n    }\n  }\n\n  #rebindHandlers(hash) {\n    const $bindingTarget = hash && jQuery(hash).length ? jQuery(hash) : jQuery(this.#settings.targetElement);\n\n    $bindingTarget.find('[data-ajax-form=\"true\"]').formSubmit();\n\n    this.#findSubmitButton();\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class LoadingLayer {\n  #options = {\n    loadingText: \"\",\n  };\n\n  constructor(element, options) {\n    this.#options = mergeSettings(this.#options, options, jQuery(element).data() || {});\n  }\n\n  addLoadingLayer() {\n    if (!document.getElementById(\"loading-layer\")) {\n      const $body = jQuery(\"body\");\n      const jsSvgIcons = $body.data(\"svgIcons\");\n      const html =\n        '<div id=\"loading-layer\" class=\"loading-layer\"><h1><svg class=\"svg-icon svg-icon__spinner svg-icon--spin\" fill=\"currentColor\"><use xlink:href=\"' +\n        jsSvgIcons[\"loadingLayerIcon\"] +\n        '\"></use></svg> ' +\n        this.#options.loadingText +\n        \"</h1></div>\";\n\n      jQuery(html).appendTo($body);\n    }\n  }\n\n  showLoadingLayer() {\n    this.#toggleLoadingLayer(true);\n  }\n\n  hideLoadingLayer() {\n    this.#toggleLoadingLayer(false);\n  }\n\n  #toggleLoadingLayer(show) {\n    document.getElementById(\"loading-layer\")?.classList.toggle(\"loading-layer__active\", show);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class FormValidator {\n  #isFormValid = true;\n  #defaults = {\n    scrollOffsetElement: null,\n  };\n  #settings;\n  #formElement;\n\n  constructor(formElement, options) {\n    this.#settings = mergeSettings(this.#defaults, options, jQuery(formElement).data());\n    this.#formElement = formElement;\n  }\n\n  preValidateForm() {\n    this.checkFormElementsForErrors();\n    this.#focusTabWithFirstErrorMessage();\n    this.#scrollToFirstFormError();\n\n    return this.#isFormValid;\n  }\n\n  checkFormElementsForErrors() {\n    this.#removeAllPreviousErrors();\n\n    for (const field of this.#formElement.elements) {\n      if (field.nodeName !== \"INPUT\" && field.nodeName !== \"TEXTAREA\" && field.nodeName !== \"SELECT\") {\n        continue;\n      }\n\n      if (!field.checkValidity()) {\n        this.#addErrorDecorationToFormGroup(field);\n        this.#addErrorMessageToFormField(jQuery(field), field.validationMessage);\n\n        this.#isFormValid = false;\n      }\n    }\n  }\n\n  #removeAllPreviousErrors() {\n    const $form = jQuery(this.#formElement);\n\n    $form.find(\".form-group.has-error\").removeClass(\"has-error\");\n    $form.find(\".validation-failed\").remove();\n  }\n\n  /**\n   *\n   * @param {HTMLElement} elem\n   */\n  #addErrorDecorationToFormGroup(elem) {\n    elem.closest(\".form-group\")?.classList.add(\"has-error\");\n  }\n\n  /**\n   *\n   * @param {HTMLElement} elem\n   */\n  #removeErrorMessageFromFormField(elem) {\n    const elementContainingValidationErrors = elem.closest(\"div\")?.querySelector(\".validation-failed\");\n\n    elementContainingValidationErrors?.parentElement.removeChild(elementContainingValidationErrors);\n  }\n\n  #addErrorMessageToFormField($element, errorMessage) {\n    this.#removeErrorMessageFromFormField($element[0]);\n\n    const $body = jQuery(\"body\");\n    const jsSvgIcons = $body.data(\"svgIcons\");\n\n    $element\n      .closest(\"div:not(.input-group):not(.btn-group)\")\n      .append(\n        `<small class=\"help-block validation-failed\"><svg class=\"svg-icon svg-icon__exclamation-circle\" fill=\"currentColor\"><use xlink:href=\"${jsSvgIcons[\"validationFailedIcon\"]}\"></use></svg> ${errorMessage}</small>`\n      );\n  }\n\n  #focusTabWithFirstErrorMessage() {\n    if (jQuery(\".tabbable\").length > 0) {\n      const $elem = jQuery(\".tabbable .form-group.has-error:first\");\n      const tabId = $elem.closest(\".tab-pane\").prop(\"id\");\n\n      jQuery('.tabbable .nav-tabs a[href=\"#' + tabId + '\"]').tab(\"show\");\n\n      $elem.find(\":input\").focus();\n    }\n  }\n\n  get isFormValid() {\n    return this.#isFormValid;\n  }\n\n  setFormAsValid() {\n    this.#isFormValid = true;\n  }\n\n  handleFormErrorMessages($form, errorMessagesHtml) {\n    let $errorBox = jQuery(\"#error-box\");\n    const $modalBody = $form.find(\".modal-body\");\n\n    $errorBox.remove();\n\n    // Place the error messages inside the modal body for a better styling\n    $errorBox = jQuery(errorMessagesHtml);\n\n    $errorBox\n      .hide()\n      .prependTo($modalBody.length > 0 && $modalBody.is(\":visible\") ? $modalBody : $form)\n      .fadeIn();\n\n    this.#prettyPrintResponseErrorMessages($form, $errorBox);\n  }\n\n  #prettyPrintResponseErrorMessages($form, $errorBox) {\n    this.#removeAllPreviousErrors();\n\n    // highlight all input fields where the validation has failed\n    $errorBox.find(\"li\").each((index, element) => {\n      let $this = jQuery(element),\n        errorClass = $this.data(\"error\");\n\n      if (errorClass.length > 0) {\n        let $elem =\n          $form.find(\"#\" + errorClass) || $form.find('[id|=\"' + errorClass + '\"]').filter(':not([id$=\"container\"])');\n\n        if ($elem.length > 0) {\n          this.#addErrorDecorationToFormGroup($elem[0]);\n\n          // Move the error message to the responsible input field(s)\n          // and remove the list item from the error box container\n          if ($elem.length === 1) {\n            this.#addErrorMessageToFormField($elem, $this.html());\n            $this.remove();\n          }\n        }\n      }\n    });\n\n    // if all list items have been removed, remove the error box container too\n    if ($errorBox.find(\"li\").length === 0) {\n      $errorBox.remove();\n    }\n\n    this.#focusTabWithFirstErrorMessage();\n    this.#scrollToFirstFormError();\n  }\n\n  #scrollToFirstFormError() {\n    const $form = jQuery(this.#formElement);\n    const $formErrors = $form.find(\".form-group.has-error\");\n\n    if ($form.closest(\".modal\").length > 0) {\n      return;\n    }\n\n    if (!$formErrors || $formErrors.length === 0) {\n      return;\n    }\n\n    if (this.#isElementInViewport($form.find(\".help-block.validation-failed\"))) {\n      return;\n    }\n\n    let offsetTop = $formErrors.offset().top;\n\n    if (this.#settings.scrollOffsetElement) {\n      const $scrollOffsetElement = jQuery(this.#settings.scrollOffsetElement);\n\n      if ($scrollOffsetElement && $scrollOffsetElement.length > 0) {\n        offsetTop -= $scrollOffsetElement.height();\n      }\n    }\n\n    window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n  }\n\n  #isElementInViewport(element) {\n    // special bonus for those using jQuery\n    if (typeof jQuery === \"function\" && element instanceof jQuery) {\n      element = element[0];\n    }\n\n    const $scrollOffsetElement = jQuery(this.#settings.scrollOffsetElement);\n    let offsetTop = 0;\n\n    if ($scrollOffsetElement) {\n      offsetTop = $scrollOffsetElement.height();\n    }\n\n    const rect = element.getBoundingClientRect();\n\n    return (\n      rect.top >= offsetTop &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licencing details.\n */\n\nimport { AjaxForm } from \"../lib/ajax-form\";\nimport { LoadingLayer } from \"../lib/loading-layer\";\nimport { FormValidator } from \"../lib/form-validator\";\n\n(($) => {\n  const pluginName = \"formSubmit\";\n\n  $.fn[pluginName] = function (options) {\n    return this.each(function () {\n      if (!$.data(this, \"plugin_\" + pluginName)) {\n        $.data(\n          this,\n          \"plugin_\" + pluginName,\n          new AjaxForm(this, new LoadingLayer(this, options), new FormValidator(this, options), options)\n        );\n      }\n    });\n  };\n\n  $('[data-ajax-form=\"true\"]').formSubmit();\n\n  $(document).on(\"draw.dt\", (e) => {\n    $(e.target).find('[data-ajax-form=\"true\"]').formSubmit();\n  });\n})(jQuery);\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"ajax-form.min.js"}