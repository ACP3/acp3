{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/utils.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/ajax-form.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/loading-indicator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/form-validator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.js"],"names":["_$utils_5","defaultSettings","constructorOptions","dataAttributeOptions","mergedSettings","key","value","Object","entries","keyStripped","string","replace","charAt","toLowerCase","slice","length","JSON","parse","_unused","element","eventName","selectorOrTargetElement","handler","addEventListener","event","elems","document","querySelectorAll","forEach","elem","contains","target","_classPrivateFieldLooseBase","receiver","privateKey","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","_loadingIndicator","_formValidator","_defaults","_init","_registerClickedSubmitButton","_prepareFormData","_handleResponseError","_handleSuccessfulResponse","_disableSubmitButton","_enableSubmitButton","_decodeResponse","_redirectToNewPage","_scrollIntoView","_replaceContent","_init2","this","_$eventHandler_2","delegateEvent","async","preventDefault","performAjaxRequest","setFormAsValid","dispatchEvent","CustomEvent","detail","isValid","preValidateForm","checkFormElementsForErrors","_registerClickedSubmitButton2","submitElem","closest","dataset","clicked","_prepareFormData2","formElement","submitButton","initialData","customFormData","data","getAttribute","FormData","append","_handleResponseError2","response","targetElement","responseData","clone","text","status","handleFormErrorMessages","open","write","close","_handleSuccessfulResponse2","hash","window","completeCallback","redirect_url","location","_disableSubmitButton2","disabled","_enableSubmitButton2","_decodeResponse2","json","error","_redirectToNewPage2","href","reload","_scrollIntoView2","setTimeout","querySelector","concat","scrollTo","top","getBoundingClientRect","y","behavior","offsetTop","scrollTop","_replaceContent2","doc","DOMParser","parseFromString","innerHTML","_$ajaxForm_1","AjaxForm","[object Object]","loadingIndicator","formValidator","defineProperty","writable","loadingOverlay","method","mergeSettings","_submitButton","HTMLFormElement","hashChange","addLoadingIndicator","showLoadingIndicator","_ref","_targetElement$getAtt","_targetElement$getAtt2","_mergedSettings$metho","toUpperCase","fetch","body","headers","X-Requested-With","ok","console","hideLoadingIndicator","show","_targetElement$queryS","classList","toggle","_$loadingIndicator_4","LoadingIndicator","_toggleLoadingIndicator","_toggleLoadingIndicator2","loadingIndicatorHtml","svgIcons","loadingIndicatorIcon","insertAdjacentHTML","___classPrivateFieldLooseBase_4","___classPrivateFieldLooseBase_3","__id_3","___classPrivateFieldLooseKey_3","___defaults_3","_settings","_removeAllPreviousErrors","_removeErrorMessageFromFormField","_addErrorMessageToFormField","_focusTabWithFirstErrorMessage","_prettyPrintResponseErrorMessages","_scrollToFirstFormError","_isElementInViewport","_removeAllPreviousErrors2","invalidFormField","remove","_removeErrorMessageFromFormField2","formField","_formField$closest","_formField$closest$qu","_addErrorMessageToFormField2","errorMessage","add","_focusTabWithFirstErrorMessage2","firstElemWithError","tabId","click","focus","_prettyPrintResponseErrorMessages2","errorBox","errorMessageLine","errorClass","getElementById","_scrollToFirstFormError2","_formElement$closest","formErrors","item","scrollOffsetElement","clientHeight","_isElementInViewport2","rect","left","bottom","innerHeight","documentElement","right","innerWidth","clientWidth","_$formValidator_3","FormValidator","options","field","elements","nodeName","checkValidity","validationMessage","_formElement$formVali","errorMessagesHtml","_document$getElementB","modalBody"],"mappings":"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","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport function mergeSettings(defaultSettings, constructorOptions, dataAttributeOptions) {\n  const mergedSettings = { ...defaultSettings, ...constructorOptions };\n\n  if (!dataAttributeOptions) {\n    return mergedSettings;\n  }\n\n  for (let [key, value] of Object.entries(dataAttributeOptions)) {\n    const keyStripped = lowerCaseFirstLetter(key.replace(\"ajaxForm\", \"\"));\n\n    if (keyStripped.length > 0 && typeof mergedSettings[keyStripped] !== \"undefined\") {\n      try {\n        mergedSettings[keyStripped] = JSON.parse(value);\n      } catch {\n        mergedSettings[keyStripped] = value;\n      }\n    }\n  }\n\n  return mergedSettings;\n}\n\nfunction lowerCaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\nimport { delegateEvent } from \"./event-handler\";\n\nexport class AjaxForm {\n  #loadingIndicator;\n  #formValidator;\n  #defaults = {\n    completeCallback: null,\n    targetElement: \"#content\",\n    loadingOverlay: true,\n    customFormData: null,\n    method: null,\n  };\n\n  /**\n   *\n   * @param {LoadingIndicator} loadingIndicator\n   * @param {FormValidator} formValidator\n   */\n  constructor(loadingIndicator, formValidator) {\n    this.#loadingIndicator = loadingIndicator;\n    this.#formValidator = formValidator;\n\n    this.#init();\n  }\n\n  #init() {\n    this.#registerClickedSubmitButton();\n\n    delegateEvent(document, \"click\", 'a[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      await this.performAjaxRequest(elem);\n    });\n\n    delegateEvent(document, \"submit\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      this.#formValidator.setFormAsValid(elem);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.before\", { detail: this }));\n\n      if (this.#formValidator.isValid(elem) && this.#formValidator.preValidateForm(elem)) {\n        await this.performAjaxRequest(elem);\n      }\n    });\n\n    delegateEvent(document, \"change\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      if (this.#formValidator.isValid(elem) === false) {\n        this.#formValidator.checkFormElementsForErrors(elem);\n      }\n    });\n  }\n\n  #registerClickedSubmitButton() {\n    delegateEvent(document, \"click\", 'form[data-ajax-form=\"true\"] [type=\"submit\"]', (event, submitElem) => {\n      submitElem\n        .closest(\"form\")\n        .querySelectorAll(\"[type=submit]\")\n        .forEach((elem) => {\n          delete elem.dataset[\"clicked\"];\n        });\n      submitElem.dataset.clicked = \"true\";\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async performAjaxRequest(targetElement) {\n    const mergedSettings = mergeSettings(this.#defaults, {}, targetElement.dataset);\n    let hash, submitButton;\n\n    if (targetElement instanceof HTMLFormElement) {\n      submitButton = targetElement.querySelector('[type=\"submit\"][data-clicked=\"true\"]');\n\n      hash = submitButton?.dataset.hashChange;\n    } else {\n      hash = targetElement.dataset.hashChange;\n    }\n\n    if (mergedSettings.loadingOverlay) {\n      this.#loadingIndicator.addLoadingIndicator(submitButton || targetElement);\n      this.#loadingIndicator.showLoadingIndicator(submitButton || targetElement);\n    }\n\n    this.#disableSubmitButton(submitButton);\n\n    try {\n      const method =\n        targetElement.getAttribute(\"method\")?.toUpperCase() ?? mergedSettings.method?.toUpperCase() ?? \"GET\";\n\n      const response = await fetch(targetElement.getAttribute(\"action\") || targetElement.getAttribute(\"href\"), {\n        method: method,\n        body: method !== \"GET\" ? this.#prepareFormData(targetElement, submitButton, mergedSettings) : null,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      });\n\n      if (!response.ok) {\n        await this.#handleResponseError(response, targetElement);\n      } else {\n        await this.#handleSuccessfulResponse(response, hash, mergedSettings);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.#loadingIndicator.hideLoadingIndicator(submitButton || targetElement);\n      this.#enableSubmitButton(submitButton);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} submitButton\n   * @param {Record<string, any>} mergedSettings\n   * @returns {FormData}\n   */\n  #prepareFormData(formElement, submitButton, mergedSettings) {\n    const initialData = mergedSettings.customFormData || {};\n    let data;\n\n    if (formElement.getAttribute(\"method\")) {\n      data = new FormData(formElement);\n\n      if (submitButton) {\n        data.append(submitButton.getAttribute(\"name\"), \"1\");\n      }\n    } else {\n      data = new FormData();\n    }\n\n    for (let [key, value] of Object.entries(initialData)) {\n      data.append(key, value);\n    }\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async #handleResponseError(response, targetElement) {\n    const responseData = await response.clone().text();\n\n    if (response.status === 400) {\n      this.#formValidator.handleFormErrorMessages(targetElement, responseData);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.fail\", { detail: this }));\n    } else if (responseData.length > 0) {\n      document.open();\n      document.write(responseData);\n      document.close();\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {string} hash\n   * @param {Record<string, any>} mergedSettings\n   * @returns {Promise<void>}\n   */\n  async #handleSuccessfulResponse(response, hash, mergedSettings) {\n    const responseData = await this.#decodeResponse(response);\n\n    if (typeof window[mergedSettings.completeCallback] === \"function\") {\n      window[mergedSettings.completeCallback](responseData);\n    } else if (responseData.redirect_url) {\n      this.#redirectToNewPage(hash, responseData);\n    } else {\n      this.#replaceContent(hash, responseData, mergedSettings);\n      this.#scrollIntoView(hash, mergedSettings);\n\n      if (hash !== undefined) {\n        window.location.hash = hash;\n      }\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.complete\"));\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #disableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #enableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<*>}\n   */\n  async #decodeResponse(response) {\n    try {\n      return await response.clone().json();\n    } catch (error) {\n      return await response.clone().text();\n    }\n  }\n\n  #redirectToNewPage(hash, responseData) {\n    if (hash !== undefined) {\n      window.location.href = responseData.redirect_url + hash;\n      window.location.reload();\n    } else {\n      window.location.href = responseData.redirect_url;\n    }\n  }\n\n  #scrollIntoView(hash, mergedSettings) {\n    setTimeout(() => {\n      if (hash) {\n        const targetElement = document.querySelector(`[data-hash-change=\"${hash}\"]`);\n\n        window.scrollTo({ top: targetElement.getBoundingClientRect().y, behavior: \"smooth\" });\n      } else {\n        const targetElement = document.querySelector(mergedSettings.targetElement);\n        const offsetTop = targetElement.getBoundingClientRect().y;\n\n        if (document.scrollTop > offsetTop) {\n          window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n        }\n      }\n    });\n  }\n\n  #replaceContent(hash, responseData, mergedSettings) {\n    if (hash && document.querySelector(hash)) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(responseData, \"text/html\");\n\n      document.querySelector(hash).innerHTML = doc.querySelector(hash).innerHTML;\n    } else {\n      document.querySelector(mergedSettings.targetElement).innerHTML = responseData;\n    }\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport class LoadingIndicator {\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  addLoadingIndicator(targetElement) {\n    if (!targetElement.querySelector(\".loading-indicator\")) {\n      const body = document.querySelector(\"body\");\n      const jsSvgIcons = JSON.parse(body.dataset.svgIcons);\n      const loadingIndicatorHtml =\n        '<svg class=\"svg-icon svg-icon__spinner svg-icon--spin loading-indicator\" fill=\"currentColor\"><use xlink:href=\"' +\n        jsSvgIcons[\"loadingIndicatorIcon\"] +\n        '\"></use></svg>';\n\n      targetElement.insertAdjacentHTML(\"afterbegin\", loadingIndicatorHtml);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  showLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, true);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  hideLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, false);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {Boolean} show\n   */\n  #toggleLoadingIndicator(targetElement, show) {\n    targetElement.querySelector(\".loading-indicator\")?.classList.toggle(\"loading-indicator__active\", show);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class FormValidator {\n  #defaults = {\n    scrollOffsetElement: null,\n  };\n  #settings;\n\n  constructor(options = {}) {\n    this.#settings = mergeSettings(this.#defaults, options, {});\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  preValidateForm(formElement) {\n    this.checkFormElementsForErrors(formElement);\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n\n    return this.isValid(formElement);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  checkFormElementsForErrors(formElement) {\n    this.#removeAllPreviousErrors(formElement);\n\n    for (const field of formElement.elements) {\n      if (field.nodeName !== \"INPUT\" && field.nodeName !== \"TEXTAREA\" && field.nodeName !== \"SELECT\") {\n        continue;\n      }\n\n      if (!field.checkValidity()) {\n        this.#addErrorMessageToFormField(field, field.validationMessage);\n\n        formElement.formValidator.isValid = false;\n      }\n    }\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #removeAllPreviousErrors(formElement) {\n    formElement.querySelectorAll(\".is-invalid\").forEach((invalidFormField) => {\n      invalidFormField.classList.remove(\"is-invalid\");\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   */\n  #removeErrorMessageFromFormField(formField) {\n    formField.closest(\"div\")?.querySelector(\".invalid-feedback\")?.remove();\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   * @param {string} errorMessage\n   */\n  #addErrorMessageToFormField(formField, errorMessage) {\n    this.#removeErrorMessageFromFormField(formField);\n\n    formField.classList.add(\"is-invalid\");\n\n    formField\n      .closest(\"div:not(.input-group):not(.btn-group)\")\n      .insertAdjacentHTML(\"beforeend\", `<div class=\"invalid-feedback\">${errorMessage}</div>`);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  #focusTabWithFirstErrorMessage(formElement) {\n    if (!formElement.querySelector(\".nav-tabs\")) {\n      return;\n    }\n\n    const firstElemWithError = formElement.querySelector(\".is-invalid\");\n\n    if (!firstElemWithError) {\n      return;\n    }\n\n    const tabId = firstElemWithError.closest(\".tab-pane\").getAttribute(\"id\");\n\n    formElement.querySelector('.nav-tabs a[href=\"#' + tabId + '\"]').click();\n\n    firstElemWithError.focus();\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  isValid(formElement) {\n    return !!formElement.formValidator?.isValid;\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  setFormAsValid(formElement) {\n    formElement.formValidator = {\n      isValid: true,\n    };\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {string} errorMessagesHtml\n   */\n  handleFormErrorMessages(targetElement, errorMessagesHtml) {\n    if (!(targetElement instanceof HTMLFormElement)) {\n      return;\n    }\n\n    const modalBody = targetElement.querySelector(\".modal-body\");\n\n    // Remove the old - possible existing - error-box\n    document.getElementById(\"error-box\")?.remove();\n\n    // Place the error messages inside the modal body for a better styling\n    if (modalBody) {\n      modalBody.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    } else {\n      targetElement.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    }\n\n    this.#prettyPrintResponseErrorMessages(targetElement, document.getElementById(\"error-box\"));\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} errorBox\n   */\n  #prettyPrintResponseErrorMessages(formElement, errorBox) {\n    this.#removeAllPreviousErrors(formElement);\n\n    // highlight all input fields where the validation has failed\n    errorBox.querySelectorAll(\"li\").forEach((errorMessageLine) => {\n      let errorClass = errorMessageLine.dataset.element;\n\n      if (errorClass.length > 0) {\n        let elem = document.getElementById(errorClass) || formElement.querySelector('[id|=\"' + errorClass + '\"]');\n\n        if (elem) {\n          // Move the error message to the responsible input field(s)\n          // and remove the list item from the error box container\n          this.#addErrorMessageToFormField(elem[0], errorMessageLine.innerHTML);\n          errorMessageLine.remove();\n        }\n      }\n    });\n\n    // if all list items have been removed, remove the error box container too\n    if (errorBox.querySelectorAll(\"li\").length === 0) {\n      errorBox.remove();\n    }\n\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #scrollToFirstFormError(formElement) {\n    if (formElement.closest(\".modal\")?.length > 0) {\n      return;\n    }\n\n    const formErrors = formElement.querySelectorAll(\".is-invalid\");\n\n    if (!formErrors || formErrors.length === 0) {\n      return;\n    }\n\n    if (this.#isElementInViewport(formElement.querySelector(\".invalid-feedback\"))) {\n      return;\n    }\n\n    let offsetTop = formErrors.item(0).getBoundingClientRect().top;\n\n    if (this.#settings.scrollOffsetElement) {\n      const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n\n      if (scrollOffsetElement) {\n        offsetTop -= scrollOffsetElement.clientHeight;\n      }\n    }\n\n    window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n  }\n\n  #isElementInViewport(element) {\n    const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n    let offsetTop = 0;\n\n    if (scrollOffsetElement) {\n      offsetTop = scrollOffsetElement.clientHeight;\n    }\n\n    const rect = element.getBoundingClientRect();\n\n    return (\n      rect.top >= offsetTop &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licencing details.\n */\n\nimport { AjaxForm } from \"../lib/ajax-form\";\nimport { LoadingIndicator } from \"../lib/loading-indicator\";\nimport { FormValidator } from \"../lib/form-validator\";\n\n(() => {\n  new AjaxForm(new LoadingIndicator(), new FormValidator());\n})();\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"ajax-form.min.js"}