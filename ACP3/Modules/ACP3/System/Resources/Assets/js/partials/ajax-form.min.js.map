{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/utils.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/ajax-form.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/loading-indicator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/form-validator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.js"],"names":["_$utils_5","elementContainingScriptTags","ajaxScriptElement","getElementsByTagName","scriptElement","document","createElement","src","innerHTML","head","appendChild","mergeSettings","defaultSettings","constructorOptions","dataAttributeOptions","mergedSettings","key","value","Object","entries","keyStripped","string","replace","charAt","toLowerCase","slice","length","JSON","parse","_unused","element","eventName","selectorOrTargetElement","handler","addEventListener","event","elems","querySelectorAll","forEach","elem","contains","target","_classPrivateFieldLooseBase","receiver","privateKey","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","_loadingIndicator","_formValidator","_defaults","_init","_registerClickedSubmitButton","_prepareFormData","_handleResponseError","_handleSuccessfulResponse","_disableSubmitButton","_enableSubmitButton","_decodeResponse","_redirectToNewPage","_scrollIntoView","_replaceContent","_init2","this","_$eventHandler_2","delegateEvent","async","preventDefault","performAjaxRequest","setFormAsValid","dispatchEvent","CustomEvent","detail","isValid","preValidateForm","checkFormElementsForErrors","_registerClickedSubmitButton2","submitElem","closest","dataset","clicked","_prepareFormData2","formElement","submitButton","initialData","customFormData","data","getAttribute","FormData","append","_handleResponseError2","response","targetElement","responseData","clone","text","status","handleFormErrorMessages","open","write","close","_handleSuccessfulResponse2","hash","window","completeCallback","redirect_url","location","_disableSubmitButton2","disabled","_enableSubmitButton2","_decodeResponse2","json","error","_redirectToNewPage2","href","reload","_scrollIntoView2","setTimeout","querySelector","concat","scrollTo","top","getBoundingClientRect","y","behavior","offsetTop","scrollTop","_replaceContent2","updatedContentData","doc","DOMParser","parseFromString","addScriptsToHead","_$ajaxForm_1","AjaxForm","[object Object]","loadingIndicator","formValidator","defineProperty","writable","loadingOverlay","method","_submitButton","HTMLFormElement","hashChange","addLoadingIndicator","showLoadingIndicator","_ref","_targetElement$getAtt","_targetElement$getAtt2","_mergedSettings$metho","toUpperCase","fetch","body","headers","X-Requested-With","ok","console","hideLoadingIndicator","show","_targetElement$queryS","classList","toggle","_$loadingIndicator_4","LoadingIndicator","_toggleLoadingIndicator","_toggleLoadingIndicator2","loadingIndicatorHtml","svgIcons","loadingIndicatorIcon","insertAdjacentHTML","___classPrivateFieldLooseBase_4","___classPrivateFieldLooseBase_3","__id_3","___classPrivateFieldLooseKey_3","___defaults_3","_settings","_removeAllPreviousErrors","_removeErrorMessageFromFormField","_addErrorMessageToFormField","_focusTabWithFirstErrorMessage","_prettyPrintResponseErrorMessages","_scrollToFirstFormError","_isElementInViewport","_removeAllPreviousErrors2","invalidFormField","remove","_removeErrorMessageFromFormField2","formField","_formField$closest","_formField$closest$qu","_addErrorMessageToFormField2","errorMessage","add","_focusTabWithFirstErrorMessage2","firstElemWithError","tabId","click","focus","_prettyPrintResponseErrorMessages2","errorBox","errorMessageLine","errorClass","getElementById","_scrollToFirstFormError2","_formElement$closest","formErrors","item","scrollOffsetElement","clientHeight","_isElementInViewport2","rect","left","bottom","innerHeight","documentElement","right","innerWidth","clientWidth","_$formValidator_3","FormValidator","options","arguments","field","elements","nodeName","checkValidity","validationMessage","_formElement$formVali","errorMessagesHtml","_document$getElementB","modalBody"],"mappings":"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","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport function mergeSettings(defaultSettings, constructorOptions, dataAttributeOptions) {\n  const mergedSettings = { ...defaultSettings, ...constructorOptions };\n\n  if (!dataAttributeOptions) {\n    return mergedSettings;\n  }\n\n  for (let [key, value] of Object.entries(dataAttributeOptions)) {\n    const keyStripped = lowerCaseFirstLetter(key.replace(\"ajaxForm\", \"\"));\n\n    if (keyStripped.length > 0 && typeof mergedSettings[keyStripped] !== \"undefined\") {\n      try {\n        mergedSettings[keyStripped] = JSON.parse(value);\n      } catch {\n        mergedSettings[keyStripped] = value;\n      }\n    }\n  }\n\n  return mergedSettings;\n}\n\nfunction lowerCaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n/**\n * This function add downloads javascript code (e.g. after XHR requests) to the HTML documents <head>, so that the\n * javascript code can actually get executed.\n *\n * @param {HTMLElement} elementContainingScriptTags\n */\nexport function addScriptsToHead(elementContainingScriptTags) {\n  for (const ajaxScriptElement of elementContainingScriptTags.getElementsByTagName(\"script\")) {\n    const scriptElement = document.createElement(\"script\");\n    if (!ajaxScriptElement.src) {\n      scriptElement.innerHTML = ajaxScriptElement.innerHTML;\n    } else {\n      scriptElement.src = ajaxScriptElement.src;\n    }\n    document.head.appendChild(scriptElement);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { addScriptsToHead, mergeSettings } from \"./utils\";\nimport { delegateEvent } from \"./event-handler\";\n\nexport class AjaxForm {\n  #loadingIndicator;\n  #formValidator;\n  #defaults = {\n    completeCallback: null,\n    targetElement: \"#content\",\n    loadingOverlay: true,\n    customFormData: null,\n    method: null,\n  };\n\n  /**\n   *\n   * @param {LoadingIndicator} loadingIndicator\n   * @param {FormValidator} formValidator\n   */\n  constructor(loadingIndicator, formValidator) {\n    this.#loadingIndicator = loadingIndicator;\n    this.#formValidator = formValidator;\n\n    this.#init();\n  }\n\n  #init() {\n    this.#registerClickedSubmitButton();\n\n    delegateEvent(document, \"click\", 'a[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      await this.performAjaxRequest(elem);\n    });\n\n    delegateEvent(document, \"submit\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      this.#formValidator.setFormAsValid(elem);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.before\", { detail: this }));\n\n      if (this.#formValidator.isValid(elem) && this.#formValidator.preValidateForm(elem)) {\n        await this.performAjaxRequest(elem);\n      }\n    });\n\n    delegateEvent(document, \"change\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      if (this.#formValidator.isValid(elem) === false) {\n        this.#formValidator.checkFormElementsForErrors(elem);\n      }\n    });\n  }\n\n  #registerClickedSubmitButton() {\n    delegateEvent(document, \"click\", 'form[data-ajax-form=\"true\"] [type=\"submit\"]', (event, submitElem) => {\n      submitElem\n        .closest(\"form\")\n        .querySelectorAll(\"[type=submit]\")\n        .forEach((elem) => {\n          delete elem.dataset[\"clicked\"];\n        });\n      submitElem.dataset.clicked = \"true\";\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async performAjaxRequest(targetElement) {\n    const mergedSettings = mergeSettings(this.#defaults, {}, targetElement.dataset);\n    let hash, submitButton;\n\n    if (targetElement instanceof HTMLFormElement) {\n      submitButton = targetElement.querySelector('[type=\"submit\"][data-clicked=\"true\"]');\n\n      hash = submitButton?.dataset.hashChange;\n    } else {\n      hash = targetElement.dataset.hashChange;\n    }\n\n    if (mergedSettings.loadingOverlay) {\n      this.#loadingIndicator.addLoadingIndicator(submitButton || targetElement);\n      this.#loadingIndicator.showLoadingIndicator(submitButton || targetElement);\n    }\n\n    this.#disableSubmitButton(submitButton);\n\n    try {\n      const method =\n        targetElement.getAttribute(\"method\")?.toUpperCase() ?? mergedSettings.method?.toUpperCase() ?? \"GET\";\n\n      const response = await fetch(targetElement.getAttribute(\"action\") || targetElement.getAttribute(\"href\"), {\n        method: method,\n        body: method !== \"GET\" ? this.#prepareFormData(targetElement, submitButton, mergedSettings) : null,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      });\n\n      if (!response.ok) {\n        await this.#handleResponseError(response, targetElement);\n      } else {\n        await this.#handleSuccessfulResponse(response, hash, mergedSettings);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.#loadingIndicator.hideLoadingIndicator(submitButton || targetElement);\n      this.#enableSubmitButton(submitButton);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} submitButton\n   * @param {Record<string, any>} mergedSettings\n   * @returns {FormData}\n   */\n  #prepareFormData(formElement, submitButton, mergedSettings) {\n    const initialData = mergedSettings.customFormData || {};\n    let data;\n\n    if (formElement.getAttribute(\"method\")) {\n      data = new FormData(formElement);\n\n      if (submitButton) {\n        data.append(submitButton.getAttribute(\"name\"), \"1\");\n      }\n    } else {\n      data = new FormData();\n    }\n\n    for (let [key, value] of Object.entries(initialData)) {\n      data.append(key, value);\n    }\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async #handleResponseError(response, targetElement) {\n    const responseData = await response.clone().text();\n\n    if (response.status === 400) {\n      this.#formValidator.handleFormErrorMessages(targetElement, responseData);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.fail\", { detail: this }));\n    } else if (responseData.length > 0) {\n      document.open();\n      document.write(responseData);\n      document.close();\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {string} hash\n   * @param {Record<string, any>} mergedSettings\n   * @returns {Promise<void>}\n   */\n  async #handleSuccessfulResponse(response, hash, mergedSettings) {\n    const responseData = await this.#decodeResponse(response);\n\n    if (typeof window[mergedSettings.completeCallback] === \"function\") {\n      window[mergedSettings.completeCallback](responseData);\n    } else if (responseData.redirect_url) {\n      this.#redirectToNewPage(hash, responseData);\n    } else {\n      this.#replaceContent(hash, responseData, mergedSettings);\n      this.#scrollIntoView(hash, mergedSettings);\n\n      if (hash !== undefined) {\n        window.location.hash = hash;\n      }\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.complete\"));\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #disableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #enableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<*>}\n   */\n  async #decodeResponse(response) {\n    try {\n      return await response.clone().json();\n    } catch (error) {\n      return await response.clone().text();\n    }\n  }\n\n  #redirectToNewPage(hash, responseData) {\n    if (hash !== undefined) {\n      window.location.href = responseData.redirect_url + hash;\n      window.location.reload();\n    } else {\n      window.location.href = responseData.redirect_url;\n    }\n  }\n\n  #scrollIntoView(hash, mergedSettings) {\n    setTimeout(() => {\n      if (hash) {\n        const targetElement = document.querySelector(`[data-hash-change=\"${hash}\"]`);\n\n        window.scrollTo({ top: targetElement.getBoundingClientRect().y, behavior: \"smooth\" });\n      } else {\n        const targetElement = document.querySelector(mergedSettings.targetElement);\n        const offsetTop = targetElement.getBoundingClientRect().y;\n\n        if (document.scrollTop > offsetTop) {\n          window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n        }\n      }\n    });\n  }\n\n  #replaceContent(hash, responseData, mergedSettings) {\n    let targetElement;\n    let updatedContentData;\n\n    if (hash && document.querySelector(hash)) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(responseData, \"text/html\");\n\n      targetElement = document.querySelector(hash);\n      updatedContentData = doc.querySelector(hash).innerHTML;\n    } else {\n      targetElement = document.querySelector(mergedSettings.targetElement);\n      updatedContentData = responseData;\n    }\n\n    targetElement.innerHTML = updatedContentData;\n    addScriptsToHead(targetElement);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport class LoadingIndicator {\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  addLoadingIndicator(targetElement) {\n    if (!targetElement.querySelector(\".loading-indicator\")) {\n      const body = document.querySelector(\"body\");\n      const jsSvgIcons = JSON.parse(body.dataset.svgIcons);\n      const loadingIndicatorHtml =\n        '<svg class=\"svg-icon svg-icon__spinner svg-icon--spin loading-indicator me-1\" fill=\"currentColor\"><use xlink:href=\"' +\n        jsSvgIcons[\"loadingIndicatorIcon\"] +\n        '\"></use></svg>';\n\n      targetElement.insertAdjacentHTML(\"afterbegin\", loadingIndicatorHtml);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  showLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, true);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  hideLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, false);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {Boolean} show\n   */\n  #toggleLoadingIndicator(targetElement, show) {\n    targetElement.querySelector(\".loading-indicator\")?.classList.toggle(\"loading-indicator__active\", show);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class FormValidator {\n  #defaults = {\n    scrollOffsetElement: null,\n  };\n  #settings;\n\n  constructor(options = {}) {\n    this.#settings = mergeSettings(this.#defaults, options, {});\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  preValidateForm(formElement) {\n    this.checkFormElementsForErrors(formElement);\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n\n    return this.isValid(formElement);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  checkFormElementsForErrors(formElement) {\n    this.#removeAllPreviousErrors(formElement);\n\n    for (const field of formElement.elements) {\n      if (field.nodeName !== \"INPUT\" && field.nodeName !== \"TEXTAREA\" && field.nodeName !== \"SELECT\") {\n        continue;\n      }\n\n      if (!field.checkValidity()) {\n        this.#addErrorMessageToFormField(field, field.validationMessage);\n\n        if (!formElement.formValidator) {\n          formElement.formValidator = {};\n        }\n\n        formElement.formValidator.isValid = false;\n      }\n    }\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #removeAllPreviousErrors(formElement) {\n    formElement.querySelectorAll(\".is-invalid\").forEach((invalidFormField) => {\n      invalidFormField.classList.remove(\"is-invalid\");\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   */\n  #removeErrorMessageFromFormField(formField) {\n    formField.closest(\"div\")?.querySelector(\".invalid-feedback\")?.remove();\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   * @param {string} errorMessage\n   */\n  #addErrorMessageToFormField(formField, errorMessage) {\n    this.#removeErrorMessageFromFormField(formField);\n\n    formField.classList.add(\"is-invalid\");\n\n    formField\n      .closest(\"div:not(.input-group):not(.btn-group)\")\n      .insertAdjacentHTML(\"beforeend\", `<div class=\"invalid-feedback\">${errorMessage}</div>`);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  #focusTabWithFirstErrorMessage(formElement) {\n    if (!formElement.querySelector(\".nav-tabs\")) {\n      return;\n    }\n\n    const firstElemWithError = formElement.querySelector(\".is-invalid\");\n\n    if (!firstElemWithError) {\n      return;\n    }\n\n    const tabId = firstElemWithError.closest(\".tab-pane\").getAttribute(\"id\");\n\n    formElement.querySelector('.nav-tabs a[href=\"#' + tabId + '\"]').click();\n\n    firstElemWithError.focus();\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  isValid(formElement) {\n    return !!formElement.formValidator?.isValid;\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  setFormAsValid(formElement) {\n    formElement.formValidator = {\n      isValid: true,\n    };\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {string} errorMessagesHtml\n   */\n  handleFormErrorMessages(targetElement, errorMessagesHtml) {\n    if (!(targetElement instanceof HTMLFormElement)) {\n      return;\n    }\n\n    const modalBody = targetElement.querySelector(\".modal-body\");\n\n    // Remove the old - possible existing - error-box\n    document.getElementById(\"error-box\")?.remove();\n\n    // Place the error messages inside the modal body for a better styling\n    if (targetElement.closest(\".modal\") && modalBody) {\n      modalBody.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    } else {\n      targetElement.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    }\n\n    this.#prettyPrintResponseErrorMessages(targetElement, document.getElementById(\"error-box\"));\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} errorBox\n   */\n  #prettyPrintResponseErrorMessages(formElement, errorBox) {\n    this.#removeAllPreviousErrors(formElement);\n\n    // highlight all input fields where the validation has failed\n    errorBox.querySelectorAll(\"li\").forEach((errorMessageLine) => {\n      let errorClass = errorMessageLine.dataset.element;\n\n      if (errorClass?.length > 0) {\n        let elem = document.getElementById(errorClass) || formElement.querySelector('[id|=\"' + errorClass + '\"]');\n\n        if (elem) {\n          // Move the error message to the responsible input field(s)\n          // and remove the list item from the error box container\n          this.#addErrorMessageToFormField(elem[0], errorMessageLine.innerHTML);\n          errorMessageLine.remove();\n        }\n      }\n    });\n\n    // if all list items have been removed, remove the error box container too\n    if (errorBox.querySelectorAll(\"li\").length === 0) {\n      errorBox.remove();\n    }\n\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #scrollToFirstFormError(formElement) {\n    if (formElement.closest(\".modal\")?.length > 0) {\n      return;\n    }\n\n    const formErrors = formElement.querySelectorAll(\".is-invalid\");\n\n    if (!formErrors || formErrors.length === 0) {\n      return;\n    }\n\n    if (this.#isElementInViewport(formElement.querySelector(\".invalid-feedback\"))) {\n      return;\n    }\n\n    let offsetTop = formErrors.item(0).getBoundingClientRect().top;\n\n    if (this.#settings.scrollOffsetElement) {\n      const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n\n      if (scrollOffsetElement) {\n        offsetTop -= scrollOffsetElement.clientHeight;\n      }\n    }\n\n    window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n  }\n\n  #isElementInViewport(element) {\n    const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n    let offsetTop = 0;\n\n    if (scrollOffsetElement) {\n      offsetTop = scrollOffsetElement.clientHeight;\n    }\n\n    const rect = element.getBoundingClientRect();\n\n    return (\n      rect.top >= offsetTop &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licencing details.\n */\n\nimport { AjaxForm } from \"../lib/ajax-form\";\nimport { LoadingIndicator } from \"../lib/loading-indicator\";\nimport { FormValidator } from \"../lib/form-validator\";\n\n(() => {\n  new AjaxForm(new LoadingIndicator(), new FormValidator());\n})();\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2stZmxhdC9fcHJlbHVkZSIsIkFDUDMvTW9kdWxlcy9BQ1AzL1N5c3RlbS9SZXNvdXJjZXMvQXNzZXRzL2pzL2xpYi91dGlscy5qcyIsIkFDUDMvTW9kdWxlcy9BQ1AzL1N5c3RlbS9SZXNvdXJjZXMvQXNzZXRzL2pzL2xpYi9ldmVudC1oYW5kbGVyLmpzIiwiQUNQMy9Nb2R1bGVzL0FDUDMvU3lzdGVtL1Jlc291cmNlcy9Bc3NldHMvanMvbGliL2FqYXgtZm9ybS5qcyIsIkFDUDMvTW9kdWxlcy9BQ1AzL1N5c3RlbS9SZXNvdXJjZXMvQXNzZXRzL2pzL2xpYi9sb2FkaW5nLWluZGljYXRvci5qcyIsIkFDUDMvTW9kdWxlcy9BQ1AzL1N5c3RlbS9SZXNvdXJjZXMvQXNzZXRzL2pzL2xpYi9mb3JtLXZhbGlkYXRvci5qcyIsIkFDUDMvTW9kdWxlcy9BQ1AzL1N5c3RlbS9SZXNvdXJjZXMvQXNzZXRzL2pzL3BhcnRpYWxzL2FqYXgtZm9ybS5qcyJdLCJuYW1lcyI6WyJfJHV0aWxzXzUiLCJlbGVtZW50Q29udGFpbmluZ1NjcmlwdFRhZ3MiLCJhamF4U2NyaXB0RWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0RWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNyYyIsImlubmVySFRNTCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsIm1lcmdlU2V0dGluZ3MiLCJkZWZhdWx0U2V0dGluZ3MiLCJjb25zdHJ1Y3Rvck9wdGlvbnMiLCJkYXRhQXR0cmlidXRlT3B0aW9ucyIsIm1lcmdlZFNldHRpbmdzIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwia2V5U3RyaXBwZWQiLCJzdHJpbmciLCJyZXBsYWNlIiwiY2hhckF0IiwidG9Mb3dlckNhc2UiLCJzbGljZSIsImxlbmd0aCIsIkpTT04iLCJwYXJzZSIsIl91bnVzZWQiLCJlbGVtZW50IiwiZXZlbnROYW1lIiwic2VsZWN0b3JPclRhcmdldEVsZW1lbnQiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiZWxlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsZW0iLCJjb250YWlucyIsInRhcmdldCIsIl9jbGFzc1ByaXZhdGVGaWVsZExvb3NlQmFzZSIsInJlY2VpdmVyIiwicHJpdmF0ZUtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlR5cGVFcnJvciIsImlkIiwiX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VLZXkiLCJuYW1lIiwiX2xvYWRpbmdJbmRpY2F0b3IiLCJfZm9ybVZhbGlkYXRvciIsIl9kZWZhdWx0cyIsIl9pbml0IiwiX3JlZ2lzdGVyQ2xpY2tlZFN1Ym1pdEJ1dHRvbiIsIl9wcmVwYXJlRm9ybURhdGEiLCJfaGFuZGxlUmVzcG9uc2VFcnJvciIsIl9oYW5kbGVTdWNjZXNzZnVsUmVzcG9uc2UiLCJfZGlzYWJsZVN1Ym1pdEJ1dHRvbiIsIl9lbmFibGVTdWJtaXRCdXR0b24iLCJfZGVjb2RlUmVzcG9uc2UiLCJfcmVkaXJlY3RUb05ld1BhZ2UiLCJfc2Nyb2xsSW50b1ZpZXciLCJfcmVwbGFjZUNvbnRlbnQiLCJfaW5pdDIiLCJ0aGlzIiwiXyRldmVudEhhbmRsZXJfMiIsImRlbGVnYXRlRXZlbnQiLCJhc3luYyIsInByZXZlbnREZWZhdWx0IiwicGVyZm9ybUFqYXhSZXF1ZXN0Iiwic2V0Rm9ybUFzVmFsaWQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJpc1ZhbGlkIiwicHJlVmFsaWRhdGVGb3JtIiwiY2hlY2tGb3JtRWxlbWVudHNGb3JFcnJvcnMiLCJfcmVnaXN0ZXJDbGlja2VkU3VibWl0QnV0dG9uMiIsInN1Ym1pdEVsZW0iLCJjbG9zZXN0IiwiZGF0YXNldCIsImNsaWNrZWQiLCJfcHJlcGFyZUZvcm1EYXRhMiIsImZvcm1FbGVtZW50Iiwic3VibWl0QnV0dG9uIiwiaW5pdGlhbERhdGEiLCJjdXN0b21Gb3JtRGF0YSIsImRhdGEiLCJnZXRBdHRyaWJ1dGUiLCJGb3JtRGF0YSIsImFwcGVuZCIsIl9oYW5kbGVSZXNwb25zZUVycm9yMiIsInJlc3BvbnNlIiwidGFyZ2V0RWxlbWVudCIsInJlc3BvbnNlRGF0YSIsImNsb25lIiwidGV4dCIsInN0YXR1cyIsImhhbmRsZUZvcm1FcnJvck1lc3NhZ2VzIiwib3BlbiIsIndyaXRlIiwiY2xvc2UiLCJfaGFuZGxlU3VjY2Vzc2Z1bFJlc3BvbnNlMiIsImhhc2giLCJ3aW5kb3ciLCJjb21wbGV0ZUNhbGxiYWNrIiwicmVkaXJlY3RfdXJsIiwibG9jYXRpb24iLCJfZGlzYWJsZVN1Ym1pdEJ1dHRvbjIiLCJkaXNhYmxlZCIsIl9lbmFibGVTdWJtaXRCdXR0b24yIiwiX2RlY29kZVJlc3BvbnNlMiIsImpzb24iLCJlcnJvciIsIl9yZWRpcmVjdFRvTmV3UGFnZTIiLCJocmVmIiwicmVsb2FkIiwiX3Njcm9sbEludG9WaWV3MiIsInNldFRpbWVvdXQiLCJxdWVyeVNlbGVjdG9yIiwiY29uY2F0Iiwic2Nyb2xsVG8iLCJ0b3AiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ5IiwiYmVoYXZpb3IiLCJvZmZzZXRUb3AiLCJzY3JvbGxUb3AiLCJfcmVwbGFjZUNvbnRlbnQyIiwidXBkYXRlZENvbnRlbnREYXRhIiwiZG9jIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiYWRkU2NyaXB0c1RvSGVhZCIsIl8kYWpheEZvcm1fMSIsIkFqYXhGb3JtIiwiW29iamVjdCBPYmplY3RdIiwibG9hZGluZ0luZGljYXRvciIsImZvcm1WYWxpZGF0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwibG9hZGluZ092ZXJsYXkiLCJtZXRob2QiLCJfc3VibWl0QnV0dG9uIiwiSFRNTEZvcm1FbGVtZW50IiwiaGFzaENoYW5nZSIsImFkZExvYWRpbmdJbmRpY2F0b3IiLCJzaG93TG9hZGluZ0luZGljYXRvciIsIl9yZWYiLCJfdGFyZ2V0RWxlbWVudCRnZXRBdHQiLCJfdGFyZ2V0RWxlbWVudCRnZXRBdHQyIiwiX21lcmdlZFNldHRpbmdzJG1ldGhvIiwidG9VcHBlckNhc2UiLCJmZXRjaCIsImJvZHkiLCJoZWFkZXJzIiwiWC1SZXF1ZXN0ZWQtV2l0aCIsIm9rIiwiY29uc29sZSIsImhpZGVMb2FkaW5nSW5kaWNhdG9yIiwic2hvdyIsIl90YXJnZXRFbGVtZW50JHF1ZXJ5UyIsImNsYXNzTGlzdCIsInRvZ2dsZSIsIl8kbG9hZGluZ0luZGljYXRvcl80IiwiTG9hZGluZ0luZGljYXRvciIsIl90b2dnbGVMb2FkaW5nSW5kaWNhdG9yIiwiX3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IyIiwibG9hZGluZ0luZGljYXRvckh0bWwiLCJzdmdJY29ucyIsImxvYWRpbmdJbmRpY2F0b3JJY29uIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwiX19fY2xhc3NQcml2YXRlRmllbGRMb29zZUJhc2VfNCIsIl9fX2NsYXNzUHJpdmF0ZUZpZWxkTG9vc2VCYXNlXzMiLCJfX2lkXzMiLCJfX19jbGFzc1ByaXZhdGVGaWVsZExvb3NlS2V5XzMiLCJfX19kZWZhdWx0c18zIiwiX3NldHRpbmdzIiwiX3JlbW92ZUFsbFByZXZpb3VzRXJyb3JzIiwiX3JlbW92ZUVycm9yTWVzc2FnZUZyb21Gb3JtRmllbGQiLCJfYWRkRXJyb3JNZXNzYWdlVG9Gb3JtRmllbGQiLCJfZm9jdXNUYWJXaXRoRmlyc3RFcnJvck1lc3NhZ2UiLCJfcHJldHR5UHJpbnRSZXNwb25zZUVycm9yTWVzc2FnZXMiLCJfc2Nyb2xsVG9GaXJzdEZvcm1FcnJvciIsIl9pc0VsZW1lbnRJblZpZXdwb3J0IiwiX3JlbW92ZUFsbFByZXZpb3VzRXJyb3JzMiIsImludmFsaWRGb3JtRmllbGQiLCJyZW1vdmUiLCJfcmVtb3ZlRXJyb3JNZXNzYWdlRnJvbUZvcm1GaWVsZDIiLCJmb3JtRmllbGQiLCJfZm9ybUZpZWxkJGNsb3Nlc3QiLCJfZm9ybUZpZWxkJGNsb3Nlc3QkcXUiLCJfYWRkRXJyb3JNZXNzYWdlVG9Gb3JtRmllbGQyIiwiZXJyb3JNZXNzYWdlIiwiYWRkIiwiX2ZvY3VzVGFiV2l0aEZpcnN0RXJyb3JNZXNzYWdlMiIsImZpcnN0RWxlbVdpdGhFcnJvciIsInRhYklkIiwiY2xpY2siLCJmb2N1cyIsIl9wcmV0dHlQcmludFJlc3BvbnNlRXJyb3JNZXNzYWdlczIiLCJlcnJvckJveCIsImVycm9yTWVzc2FnZUxpbmUiLCJlcnJvckNsYXNzIiwiZ2V0RWxlbWVudEJ5SWQiLCJfc2Nyb2xsVG9GaXJzdEZvcm1FcnJvcjIiLCJfZm9ybUVsZW1lbnQkY2xvc2VzdCIsImZvcm1FcnJvcnMiLCJpdGVtIiwic2Nyb2xsT2Zmc2V0RWxlbWVudCIsImNsaWVudEhlaWdodCIsIl9pc0VsZW1lbnRJblZpZXdwb3J0MiIsInJlY3QiLCJsZWZ0IiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJyaWdodCIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsIl8kZm9ybVZhbGlkYXRvcl8zIiwiRm9ybVZhbGlkYXRvciIsIm9wdGlvbnMiLCJhcmd1bWVudHMiLCJmaWVsZCIsImVsZW1lbnRzIiwibm9kZU5hbWUiLCJjaGVja1ZhbGlkaXR5IiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJfZm9ybUVsZW1lbnQkZm9ybVZhbGkiLCJlcnJvck1lc3NhZ2VzSHRtbCIsIl9kb2N1bWVudCRnZXRFbGVtZW50QiIsIm1vZGFsQm9keSJdLCJtYXBwaW5ncyI6IkNBQUEsV0FDQSxJQUFBQSxFQUFBLHVFQ29DTyxTQUEwQkMsR0FDL0IsSUFBSyxNQUFNQyxLQUFxQkQsRUFBNEJFLHFCQUFxQixVQUFXLENBQzFGLE1BQU1DLEVBQWdCQyxTQUFTQyxjQUFjLFVBQ3hDSixFQUFrQkssSUFHckJILEVBQWNHLElBQU1MLEVBQWtCSyxJQUZ0Q0gsRUFBY0ksVUFBWU4sRUFBa0JNLFVBSTlDSCxTQUFTSSxLQUFLQyxZQUFZTixLQUFBSixFQUFBVyxjQXhDdkIsU0FBdUJDLEVBQWlCQyxFQUFvQkMsR0FDakUsTUFBTUMsRUFBaUIsSUFBS0gsS0FBb0JDLEdBRWhELElBQUtDLEVBQ0gsT0FBT0MsRUFHVCxJQUFLLElBQUtDLEVBQUtDLEtBQVVDLE9BQU9DLFFBQVFMLEdBQXVCLENBQzdELE1BQU1NLEdBY29CQyxFQWRlTCxFQUFJTSxRQUFRLFdBQVksS0FlckRDLE9BQU8sR0FBR0MsY0FBZ0JILEVBQU9JLE1BQU0sR0FibkQsR0FBSUwsRUFBWU0sT0FBUyxRQUFBLElBQVlYLEVBQWVLLEdBQ2xELElBQ0VMLEVBQWVLLEdBQWVPLEtBQUtDLE1BQU1YLEdBQ3pDLE1BQUFZLEdBQ0FkLEVBQWVLLEdBQWVILEdBUXRDLElBQThCSSxFQUg1QixPQUFPTiw2RUNaRixTQUF1QmUsRUFBU0MsRUFBV0MsRUFBeUJDLEdBQ3pFSCxFQUFRSSxpQkFBaUJILEVBQVlJLElBQ25DLEdBQXVDLGlCQUE1QkgsRUFBc0MsQ0FDL0MsTUFBTUksRUFBUS9CLFNBQVNnQyxpQkFBaUJMLEdBRXhDLElBQUtJLEVBQ0gsT0FHRkEsRUFBTUUsUUFBU0MsSUFDVEEsR0FBUUEsRUFBS0MsU0FBU0wsRUFBTU0sU0FDOUJSLEVBQVFFLEVBQU9JLFVBR1ZQLEdBQTJCQSxFQUF3QlEsU0FBU0wsRUFBTU0sU0FDM0VSLEVBQVFFLEVBQU9ILGVDckJyQixTQUFBVSxFQUFBQyxFQUFBQyxHQUFBLElBQUExQixPQUFBMkIsVUFBQUMsZUFBQUMsS0FBQUosRUFBQUMsR0FBQSxNQUFBLElBQUFJLFVBQUEsa0RBQUEsT0FBQUwscUVBQUEsSUFBQU0sRUFBQSxFQUFBLFNBQUFDLEVBQUFDLEdBQUEsTUFBQSxhQUFBRixJQUFBLElBQUFFLEVBQUEsSUFBQUMsRUFBQUYsRUFBQSxvQkFBQUcsRUFBQUgsRUFBQSxpQkFBQUksRUFBQUosRUFBQSxZQUFBSyxFQUFBTCxFQUFBLFFBQUFNLEVBQUFOLEVBQUEsK0JBQUFPLEVBQUFQLEVBQUEsbUJBQUFRLEVBQUFSLEVBQUEsdUJBQUFTLEVBQUFULEVBQUEsNEJBQUFVLEVBQUFWLEVBQUEsdUJBQUFXLEVBQUFYLEVBQUEsc0JBQUFZLEVBQUFaLEVBQUEsa0JBQUFhLEVBQUFiLEVBQUEscUJBQUFjLEVBQUFkLEVBQUEsa0JBQUFlLEVBQUFmLEVBQUEsa0JBQUEsU0FBQWdCLElBMEJJeEIsRUFBQXlCLEtBQUFYLEdBQUFBLE1BQUEsRUFFQVksRUFBQUMsZUFBY2hFLFNBQVUsUUFBUywyQkFBNEJpRSxNQUFPbkMsRUFBT0ksS0FDekVKLEVBQU1vQyx1QkFFQUosS0FBS0ssbUJBQW1CakMsTUFBQSxFQUdoQzZCLEVBQUFDLGVBQWNoRSxTQUFVLFNBQVUsOEJBQStCaUUsTUFBT25DLEVBQU9JLEtBQzdFSixFQUFNb0MsaUJBRU43QixFQUFBeUIsS0FBQWQsR0FBQUEsR0FBb0JvQixlQUFlbEMsR0FFbkNsQyxTQUFTcUUsY0FBYyxJQUFJQyxZQUFZLDhCQUErQixDQUFFQyxPQUFRVCxRQUU1RXpCLEVBQUF5QixLQUFBZCxHQUFBQSxHQUFvQndCLFFBQVF0QyxJQUFTRyxFQUFBeUIsS0FBQWQsR0FBQUEsR0FBb0J5QixnQkFBZ0J2QyxVQUNyRTRCLEtBQUtLLG1CQUFtQmpDLE1BQUEsRUFJbEM2QixFQUFBQyxlQUFjaEUsU0FBVSxTQUFVLDhCQUErQmlFLE1BQU9uQyxFQUFPSSxNQUFBLElBQ3pFRyxFQUFBeUIsS0FBQWQsR0FBQUEsR0FBb0J3QixRQUFRdEMsSUFDOUJHLEVBQUF5QixLQUFBZCxHQUFBQSxHQUFvQjBCLDJCQUEyQnhDLEtBQUEsU0FBQXlDLEtBQUEsRUFNbkRaLEVBQUFDLGVBQWNoRSxTQUFVLFFBQVMsOENBQStDLENBQUM4QixFQUFPOEMsS0FDdEZBLEVBQ0dDLFFBQVEsUUFDUjdDLGlCQUFpQixpQkFDakJDLFFBQVNDLFdBQ0RBLEVBQUs0QyxRQUFMQyxVQUVYSCxFQUFXRSxRQUFRQyxRQUFVLFNBQUEsU0FBQUMsRUE0RGhCQyxFQUFhQyxFQUFjeEUsR0FDMUMsTUFBTXlFLEVBQWN6RSxFQUFlMEUsZ0JBQWtCLEdBQ3JELElBQUlDLEVBRUFKLEVBQVlLLGFBQWEsV0FDM0JELEVBQU8sSUFBSUUsU0FBU04sR0FFaEJDLEdBQ0ZHLEVBQUtHLE9BQU9OLEVBQWFJLGFBQWEsUUFBUyxNQUdqREQsRUFBTyxJQUFJRSxTQUdiLElBQUssSUFBSzVFLEVBQUtDLEtBQVVDLE9BQU9DLFFBQVFxRSxHQUN0Q0UsRUFBS0csT0FBTzdFLEVBQUtDLEdBR25CLE9BQU95RSxFQUFBcEIsZUFBQXdCLEVBU2tCQyxFQUFVQyxHQUNuQyxNQUFNQyxRQUFxQkYsRUFBU0csUUFBUUMsT0FFcEIsTUFBcEJKLEVBQVNLLFFBQ1gxRCxFQUFBeUIsS0FBQWQsR0FBQUEsR0FBb0JnRCx3QkFBd0JMLEVBQWVDLEdBRTNENUYsU0FBU3FFLGNBQWMsSUFBSUMsWUFBWSw0QkFBNkIsQ0FBRUMsT0FBUVQsU0FDckU4QixFQUFhdkUsT0FBUyxJQUMvQnJCLFNBQVNpRyxPQUNUakcsU0FBU2tHLE1BQU1OLEdBQ2Y1RixTQUFTbUcsU0FBQWxDLGVBQUFtQyxFQVdtQlYsRUFBVVcsRUFBTTNGLEdBQzlDLE1BQU1rRixRQUFldkQsRUFBTXlCLEtBQU5MLEdBQUFBLEdBQTJCaUMsR0FFTyxtQkFBNUNZLE9BQU81RixFQUFlNkYsa0JBQy9CRCxPQUFPNUYsRUFBZTZGLGtCQUFrQlgsR0FDL0JBLEVBQWFZLGFBQ3RCbkUsRUFBQXlCLEtBQUFKLEdBQUFBLEdBQXdCMkMsRUFBTVQsSUFFOUJ2RCxFQUFBeUIsS0FBQUYsR0FBQUEsR0FBcUJ5QyxFQUFNVCxFQUFjbEYsR0FDekMyQixFQUFBeUIsS0FBQUgsR0FBQUEsR0FBcUIwQyxFQUFNM0YsUUFBQSxJQUV2QjJGLElBQ0ZDLE9BQU9HLFNBQVNKLEtBQU9BLEdBR3pCckcsU0FBU3FFLGNBQWMsSUFBSUMsWUFBWSw0QkFBQSxTQUFBb0MsRUFRdEJ4QixHQUNmQSxJQUNGQSxFQUFheUIsVUFBQSxHQUFXLFNBQUFDLEVBUVIxQixHQUNkQSxJQUNGQSxFQUFheUIsVUFBQSxHQUFXMUMsZUFBQTRDLEVBU05uQixHQUNwQixJQUNFLGFBQWFBLEVBQVNHLFFBQVFpQixPQUM5QixNQUFPQyxHQUNQLGFBQWFyQixFQUFTRyxRQUFRQyxRQUFBLFNBQUFrQixFQUlmWCxFQUFNVCxRQUFBLElBQ25CUyxHQUNGQyxPQUFPRyxTQUFTUSxLQUFPckIsRUFBYVksYUFBZUgsRUFDbkRDLE9BQU9HLFNBQVNTLFVBRWhCWixPQUFPRyxTQUFTUSxLQUFPckIsRUFBYVksYUFBQSxTQUFBVyxFQUl4QmQsRUFBTTNGLEdBQ3BCMEcsV0FBVyxLQUNULEdBQUlmLEVBQU0sQ0FDUixNQUFNVixFQUFnQjNGLFNBQVNxSCxjQUFULHNCQUFBQyxPQUE2Q2pCLEVBQTdDLE9BRXRCQyxPQUFPaUIsU0FBUyxDQUFFQyxJQUFLN0IsRUFBYzhCLHdCQUF3QkMsRUFBR0MsU0FBVSxlQUNyRSxDQUNMLE1BQ01DLEVBRGdCNUgsU0FBU3FILGNBQWMzRyxFQUFlaUYsZUFDNUI4Qix3QkFBd0JDLEVBRXBEMUgsU0FBUzZILFVBQVlELEdBQ3ZCdEIsT0FBT2lCLFNBQVMsQ0FBRUMsSUFBS0ksRUFBV0QsU0FBVSxjQUFBLFNBQUFHLEVBTXBDekIsRUFBTVQsRUFBY2xGLEdBQ2xDLElBQUlpRixFQUNBb0MsRUFFSixHQUFJMUIsR0FBUXJHLFNBQVNxSCxjQUFjaEIsR0FBTyxDQUN4QyxNQUNNMkIsR0FBQSxJQURhQyxXQUNBQyxnQkFBZ0J0QyxFQUFjLGFBRWpERCxFQUFnQjNGLFNBQVNxSCxjQUFjaEIsR0FDdkMwQixFQUFxQkMsRUFBSVgsY0FBY2hCLEdBQU1sRyxlQUU3Q3dGLEVBQWdCM0YsU0FBU3FILGNBQWMzRyxFQUFlaUYsZUFDdERvQyxFQUFxQm5DLEVBR3ZCRCxFQUFjeEYsVUFBWTRILEdBQUEsRUFDMUJwSSxFQUFBd0ksa0JBQWlCeEMsR0FBQXlDLEVBQUFDLFNBclFkLE1BZ0JMQyxZQUFZQyxFQUFrQkMsR0FBZTNILE9BQUE0SCxlQUFBM0UsS0FBQUYsRUFBQSxDQUFBaEQsTUFBQWtILElBQUFqSCxPQUFBNEgsZUFBQTNFLEtBQUFILEVBQUEsQ0FBQS9DLE1BQUF1RyxJQUFBdEcsT0FBQTRILGVBQUEzRSxLQUFBSixFQUFBLENBQUE5QyxNQUFBb0csSUFBQW5HLE9BQUE0SCxlQUFBM0UsS0FBQUwsRUFBQSxDQUFBN0MsTUFBQWlHLElBQUFoRyxPQUFBNEgsZUFBQTNFLEtBQUFOLEVBQUEsQ0FBQTVDLE1BQUFnRyxJQUFBL0YsT0FBQTRILGVBQUEzRSxLQUFBUCxFQUFBLENBQUEzQyxNQUFBOEYsSUFBQTdGLE9BQUE0SCxlQUFBM0UsS0FBQVIsRUFBQSxDQUFBMUMsTUFBQXdGLElBQUF2RixPQUFBNEgsZUFBQTNFLEtBQUFULEVBQUEsQ0FBQXpDLE1BQUE2RSxJQUFBNUUsT0FBQTRILGVBQUEzRSxLQUFBVixFQUFBLENBQUF4QyxNQUFBb0UsSUFBQW5FLE9BQUE0SCxlQUFBM0UsS0FBQVgsRUFBQSxDQUFBdkMsTUFBQStELElBQUE5RCxPQUFBNEgsZUFBQTNFLEtBQUFaLEVBQUEsQ0FBQXRDLE1BQUFpRCxJQUFBaEQsT0FBQTRILGVBQUEzRSxLQUFBZixFQUFBLENBQUEyRixVQUFBLEVBQUE5SCxXQUFBLElBQUFDLE9BQUE0SCxlQUFBM0UsS0FBQWQsRUFBQSxDQUFBMEYsVUFBQSxFQUFBOUgsV0FBQSxJQUFBQyxPQUFBNEgsZUFBQTNFLEtBQUFiLEVBQUEsQ0FBQXlGLFVBQUEsRUFBQTlILE1BYmpDLENBQ1YyRixpQkFBa0IsS0FDbEJaLGNBQWUsV0FDZmdELGdCQUFBLEVBQ0F2RCxlQUFnQixLQUNoQndELE9BQVEsUUFTUnZHLEVBQUF5QixLQUFBZixHQUFBQSxHQUF5QndGLEVBQ3pCbEcsRUFBQXlCLEtBQUFkLEdBQUFBLEdBQXNCd0YsRUFFdEJuRyxFQUFBeUIsS0FBQVosR0FBQUEsS0FnRHNCb0YseUJBQUMzQyxHQUN2QixNQUFNakYsR0FBQSxFQUFpQmYsRUFBQVcsZUFBQStCLEVBQWN5QixLQUFkYixHQUFBQSxHQUE4QixHQUFJMEMsRUFBY2IsU0FDdkUsSUFBSXVCLEVBQU1uQixFQUVvQyxJQUFBMkQsRUFHNUN4QyxFQUhFVixhQUF5Qm1ELGdCQUd2QixRQUFBRCxFQUZKM0QsRUFBZVMsRUFBYzBCLGNBQWMsK0NBQUEsSUFFdkN3QixPQUFBLEVBQUdBLEVBQWMvRCxRQUFRaUUsV0FFdEJwRCxFQUFjYixRQUFRaUUsV0FHM0JySSxFQUFlaUksaUJBQ2pCdEcsRUFBQXlCLEtBQUFmLEdBQUFBLEdBQXVCaUcsb0JBQW9COUQsR0FBZ0JTLEdBQzNEdEQsRUFBQXlCLEtBQUFmLEdBQUFBLEdBQXVCa0cscUJBQXFCL0QsR0FBZ0JTLElBRzlEdEQsRUFBQXlCLEtBQUFQLEdBQUFBLEdBQTBCMkIsR0FFMUIsSUFBSSxJQUFBZ0UsRUFBQUMsRUFBQUMsRUFBQUMsRUFDRixNQUFNVCxFQUFNLFFBQUFNLEVBQUEsUUFBQUMsRUFBQSxRQUFBQyxFQUNWekQsRUFBY0wsYUFBYSxpQkFBQSxJQURqQjhELE9BQUEsRUFDVkEsRUFBc0NFLHFCQUFBLElBRDVCSCxFQUFBQSxFQUFBLFFBQUFFLEVBQzZDM0ksRUFBZWtJLGNBQUEsSUFENURTLE9BQUEsRUFDNkNBLEVBQXVCQyxxQkFBQSxJQURwRUosRUFBQUEsRUFDcUYsTUFFM0Z4RCxRQUFpQjZELE1BQU01RCxFQUFjTCxhQUFhLFdBQWFLLEVBQWNMLGFBQWEsUUFBUyxDQUN2R3NELE9BQVFBLEVBQ1JZLEtBQWlCLFFBQVhaLEVBQUF2RyxFQUFtQnlCLEtBQW5CVixHQUFBQSxHQUF5Q3VDLEVBQWVULEVBQWN4RSxHQUFrQixLQUM5RitJLFFBQVMsQ0FDUEMsbUJBQW9CLG9CQUluQmhFLEVBQVNpRSxTQUdadEgsRUFBTXlCLEtBQU5SLEdBQUFBLEdBQXFDb0MsRUFBVVcsRUFBTTNGLFNBRnJEMkIsRUFBTXlCLEtBQU5ULEdBQUFBLEdBQWdDcUMsRUFBVUMsR0FJNUMsTUFBT29CLEdBQ1A2QyxRQUFRN0MsTUFBTUEsR0FsQmhCLFFBb0JFMUUsRUFBQXlCLEtBQUFmLEdBQUFBLEdBQXVCOEcscUJBQXFCM0UsR0FBZ0JTLEdBQzVEdEQsRUFBQXlCLEtBQUFOLEdBQUFBLEdBQXlCMEIsOFNDeEVMUyxFQUFlbUUsR0FBTSxJQUFBQyxFQUMzQyxRQUFBQSxFQUFBcEUsRUFBYzBCLGNBQWMsNkJBQUEsSUFBNUIwQyxHQUFBQSxFQUFtREMsVUFBVUMsT0FBTyw0QkFBNkJILEdBQUFJLEVBQUFDLGlCQXhDOUYsTUFBdUI3QixjQUFBekgsT0FBQTRILGVBQUEzRSxLQUFBc0csRUFBQSxDQUFBeEosTUFBQXlKLElBSzVCL0Isb0JBQW9CM0MsR0FDbEIsSUFBS0EsRUFBYzBCLGNBQWMsc0JBQXVCLENBQ3RELE1BQU1tQyxFQUFPeEosU0FBU3FILGNBQWMsUUFFOUJpRCxFQUNKLHNIQUZpQmhKLEtBQUtDLE1BQU1pSSxFQUFLMUUsUUFBUXlGLFVBRy9CQyxxQkFDVixpQkFFRjdFLEVBQWM4RSxtQkFBbUIsYUFBY0gsSUFRbkRoQyxxQkFBcUIzQyxHQUNuQitFLEVBQUE1RyxLQUFBc0csR0FBQUEsR0FBNkJ6RSxHQUFBLEdBTy9CMkMscUJBQXFCM0MsR0FDbkIrRSxFQUFBNUcsS0FBQXNHLEdBQUFBLEdBQTZCekUsR0FBQSxjQy9CakMsU0FBQWdGLEVBQUFySSxFQUFBQyxHQUFBLElBQUExQixPQUFBMkIsVUFBQUMsZUFBQUMsS0FBQUosRUFBQUMsR0FBQSxNQUFBLElBQUFJLFVBQUEsa0RBQUEsT0FBQUwsMEVBQUEsSUFBQXNJLEVBQUEsRUFBQSxTQUFBQyxFQUFBL0gsR0FBQSxNQUFBLGFBQUE4SCxJQUFBLElBQUE5SCxFQUFBLElBQUFnSSxFQUFBRCxFQUFBLFlBQUFFLEVBQUFGLEVBQUEsWUFBQUcsRUFBQUgsRUFBQSwyQkFBQUksRUFBQUosRUFBQSxtQ0FBQUssRUFBQUwsRUFBQSw4QkFBQU0sRUFBQU4sRUFBQSxpQ0FBQU8sRUFBQVAsRUFBQSxvQ0FBQVEsRUFBQVIsRUFBQSwwQkFBQVMsRUFBQVQsRUFBQSx1QkFBQSxTQUFBVSxFQW9EMkJ0RyxHQUN2QkEsRUFBWWpELGlCQUFpQixlQUFlQyxRQUFTdUosSUFDbkRBLEVBQWlCeEIsVUFBVXlCLE9BQU8sZ0JBQUEsU0FBQUMsRUFRTEMsR0FBVyxJQUFBQyxFQUFBQyxFQUMxQyxRQUFBRCxFQUFBRCxFQUFVOUcsUUFBUSxjQUFBLElBQWxCK0csR0FBQSxRQUFBQyxFQUFBRCxFQUEwQnZFLGNBQWMsNEJBQUEsSUFBeEN3RSxHQUFBQSxFQUE4REosU0FBQSxTQUFBSyxFQVFwQ0gsRUFBV0ksR0FDckNwQixFQUFBN0csS0FBQW1ILEdBQUFBLEdBQXNDVSxHQUV0Q0EsRUFBVTNCLFVBQVVnQyxJQUFJLGNBRXhCTCxFQUNHOUcsUUFBUSx5Q0FDUjRGLG1CQUFtQixZQUZ0QixpQ0FBQW5ELE9BRW9FeUUsRUFGcEUsV0FBQSxTQUFBRSxFQVM2QmhILEdBQzdCLElBQUtBLEVBQVlvQyxjQUFjLGFBQzdCLE9BR0YsTUFBTTZFLEVBQXFCakgsRUFBWW9DLGNBQWMsZUFFckQsSUFBSzZFLEVBQ0gsT0FHRixNQUFNQyxFQUFRRCxFQUFtQnJILFFBQVEsYUFBYVMsYUFBYSxNQUVuRUwsRUFBWW9DLGNBQWMsc0JBQXdCOEUsRUFBUSxNQUFNQyxRQUVoRUYsRUFBbUJHLFFBQUEsU0FBQUMsRUFvRGFySCxFQUFhc0gsR0FDN0M1QixFQUFBN0csS0FBQWtILEdBQUFBLEdBQThCL0YsR0FHOUJzSCxFQUFTdkssaUJBQWlCLE1BQU1DLFFBQVN1SyxJQUN2QyxJQUFJQyxFQUFhRCxFQUFpQjFILFFBQVFyRCxRQUUxQyxJQUFJLE1BQUFnTCxPQUFBLEVBQUFBLEVBQVlwTCxRQUFTLEVBQUcsQ0FDMUIsSUFBSWEsRUFBT2xDLFNBQVMwTSxlQUFlRCxJQUFleEgsRUFBWW9DLGNBQWMsU0FBV29GLEVBQWEsTUFFaEd2SyxJQUdGeUksRUFBQTdHLEtBQUFvSCxHQUFBQSxHQUFpQ2hKLEVBQUssR0FBSXNLLEVBQWlCck0sV0FDM0RxTSxFQUFpQmYsYUFNd0IsSUFBM0NjLEVBQVN2SyxpQkFBaUIsTUFBTVgsUUFDbENrTCxFQUFTZCxTQUdYZCxFQUFBN0csS0FBQXFILEdBQUFBLEdBQW9DbEcsR0FDcEMwRixFQUFBN0csS0FBQXVILEdBQUFBLEdBQTZCcEcsR0FBQSxTQUFBMEgsR0FNUDFILEdBQWEsSUFBQTJILEVBQ25DLElBQUksUUFBQUEsRUFBQTNILEVBQVlKLFFBQVEsaUJBQUEsSUFBcEIrSCxPQUFBLEVBQUFBLEVBQStCdkwsUUFBUyxFQUMxQyxPQUdGLE1BQU13TCxFQUFhNUgsRUFBWWpELGlCQUFpQixlQUVoRCxJQUFLNkssR0FBb0MsSUFBdEJBLEVBQVd4TCxPQUM1QixPQUdGLEdBQUFzSixFQUFJN0csS0FBSndILEdBQUFBLEdBQThCckcsRUFBWW9DLGNBQWMsc0JBQ3RELE9BR0YsSUFBSU8sRUFBWWlGLEVBQVdDLEtBQUssR0FBR3JGLHdCQUF3QkQsSUFFM0QsR0FBSW1ELEVBQUE3RyxLQUFBaUgsR0FBQUEsR0FBZWdDLG9CQUFxQixDQUN0QyxNQUFNQSxFQUFzQi9NLFNBQVNxSCxjQUFjc0QsRUFBQTdHLEtBQUFpSCxHQUFBQSxHQUFlZ0MscUJBRTlEQSxJQUNGbkYsR0FBYW1GLEVBQW9CQyxjQUlyQzFHLE9BQU9pQixTQUFTLENBQUVDLElBQUtJLEVBQVdELFNBQVUsV0FBQSxTQUFBc0YsR0FHekJ4TCxHQUNuQixNQUFNc0wsRUFBc0IvTSxTQUFTcUgsY0FBY3NELEVBQUE3RyxLQUFBaUgsR0FBQUEsR0FBZWdDLHFCQUNsRSxJQUFJbkYsRUFBWSxFQUVabUYsSUFDRm5GLEVBQVltRixFQUFvQkMsY0FHbEMsTUFBTUUsRUFBT3pMLEVBQVFnRyx3QkFFckIsT0FDRXlGLEVBQUsxRixLQUFPSSxHQUNac0YsRUFBS0MsTUFBUSxHQUNiRCxFQUFLRSxTQUFXOUcsT0FBTytHLGFBQWVyTixTQUFTc04sZ0JBQWdCTixlQUMvREUsRUFBS0ssUUFBVWpILE9BQU9rSCxZQUFjeE4sU0FBU3NOLGdCQUFnQkcsYUFBQUMsRUFBQUMsY0EvTjVELE1BTUxyRixjQUEwQixJQUFkc0YsRUFBY0MsVUFBQXhNLE9BQUEsUUFBQSxJQUFBd00sVUFBQSxHQUFBQSxVQUFBLEdBQUosR0FBSWhOLE9BQUE0SCxlQUFBM0UsS0FBQXdILEVBQUEsQ0FBQTFLLE1BQUFxTSxLQUFBcE0sT0FBQTRILGVBQUEzRSxLQUFBdUgsRUFBQSxDQUFBekssTUFBQStMLEtBQUE5TCxPQUFBNEgsZUFBQTNFLEtBQUFzSCxFQUFBLENBQUF4SyxNQUFBMEwsSUFBQXpMLE9BQUE0SCxlQUFBM0UsS0FBQXFILEVBQUEsQ0FBQXZLLE1BQUFxTCxJQUFBcEwsT0FBQTRILGVBQUEzRSxLQUFBb0gsRUFBQSxDQUFBdEssTUFBQWtMLElBQUFqTCxPQUFBNEgsZUFBQTNFLEtBQUFtSCxFQUFBLENBQUFySyxNQUFBOEssSUFBQTdLLE9BQUE0SCxlQUFBM0UsS0FBQWtILEVBQUEsQ0FBQXBLLE1BQUEySyxJQUFBMUssT0FBQTRILGVBQUEzRSxLQUFBZ0gsRUFBQSxDQUFBcEMsVUFBQSxFQUFBOUgsTUFMZCxDQUNWbU0sb0JBQXFCLFFBSUdsTSxPQUFBNEgsZUFBQTNFLEtBQUFpSCxFQUFBLENBQUFyQyxVQUFBLEVBQUE5SCxXQUFBLElBQ3hCK0osRUFBQTdHLEtBQUFpSCxHQUFBQSxJQUFBLEVBQWlCcEwsRUFBQVcsZUFBQXFLLEVBQWM3RyxLQUFkZ0gsR0FBQUEsR0FBOEI4QyxFQUFTLElBUTFEdEYsZ0JBQWdCckQsR0FLZCxPQUpBbkIsS0FBS1ksMkJBQTJCTyxHQUNoQzBGLEVBQUE3RyxLQUFBcUgsR0FBQUEsR0FBb0NsRyxHQUNwQzBGLEVBQUE3RyxLQUFBdUgsR0FBQUEsR0FBNkJwRyxHQUV0Qm5CLEtBQUtVLFFBQVFTLEdBT3RCcUQsMkJBQTJCckQsR0FDekIwRixFQUFBN0csS0FBQWtILEdBQUFBLEdBQThCL0YsR0FFOUIsSUFBSyxNQUFNNkksS0FBUzdJLEVBQVk4SSxTQUNQLFVBQW5CRCxFQUFNRSxVQUEyQyxhQUFuQkYsRUFBTUUsVUFBOEMsV0FBbkJGLEVBQU1FLFVBSXBFRixFQUFNRyxrQkFDVHRELEVBQUE3RyxLQUFBb0gsR0FBQUEsR0FBaUM0QyxFQUFPQSxFQUFNSSxtQkFFekNqSixFQUFZdUQsZ0JBQ2Z2RCxFQUFZdUQsY0FBZ0IsSUFHOUJ2RCxFQUFZdUQsY0FBY2hFLFNBQUEsR0FnRWhDOEQsUUFBUXJELEdBQWEsSUFBQWtKLEVBQ25CLFFBQVEsUUFBQUEsRUFBQ2xKLEVBQVl1RCxxQkFBQSxJQUFiMkYsSUFBQ0EsRUFBMkIzSixTQU90QzhELGVBQWVyRCxHQUNiQSxFQUFZdUQsY0FBZ0IsQ0FDMUJoRSxTQUFBLEdBU0o4RCx3QkFBd0IzQyxFQUFleUksR0FBbUIsSUFBQUMsRUFDeEQsS0FBTTFJLGFBQXlCbUQsaUJBQzdCLE9BR0YsTUFBTXdGLEVBQVkzSSxFQUFjMEIsY0FBYyxlQUc5QyxRQUFBZ0gsRUFBQXJPLFNBQVMwTSxlQUFlLG9CQUFBLElBQXhCMkIsR0FBQUEsRUFBc0M1QyxTQUdsQzlGLEVBQWNkLFFBQVEsV0FBYXlKLEVBQ3JDQSxFQUFVN0QsbUJBQW1CLGFBQWMyRCxHQUUzQ3pJLEVBQWM4RSxtQkFBbUIsYUFBYzJELEdBR2pEekQsRUFBQTdHLEtBQUFzSCxHQUFBQSxHQUF1Q3pGLEVBQWUzRixTQUFTME0sZUFBZSxnQkMzSWhGLElBQUl0RSxFQUFBQyxTQUFTLElBQUk2QixFQUFBQyxpQkFBb0IsSUFBSXVELEVBQUFDLGVOVjNDIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSBieSB0aGUgQUNQMyBEZXZlbG9wZXJzLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBtb2R1bGUgZGlyZWN0b3J5IGZvciBsaWNlbnNpbmcgZGV0YWlscy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTZXR0aW5ncyhkZWZhdWx0U2V0dGluZ3MsIGNvbnN0cnVjdG9yT3B0aW9ucywgZGF0YUF0dHJpYnV0ZU9wdGlvbnMpIHtcbiAgY29uc3QgbWVyZ2VkU2V0dGluZ3MgPSB7IC4uLmRlZmF1bHRTZXR0aW5ncywgLi4uY29uc3RydWN0b3JPcHRpb25zIH07XG5cbiAgaWYgKCFkYXRhQXR0cmlidXRlT3B0aW9ucykge1xuICAgIHJldHVybiBtZXJnZWRTZXR0aW5ncztcbiAgfVxuXG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhQXR0cmlidXRlT3B0aW9ucykpIHtcbiAgICBjb25zdCBrZXlTdHJpcHBlZCA9IGxvd2VyQ2FzZUZpcnN0TGV0dGVyKGtleS5yZXBsYWNlKFwiYWpheEZvcm1cIiwgXCJcIikpO1xuXG4gICAgaWYgKGtleVN0cmlwcGVkLmxlbmd0aCA+IDAgJiYgdHlwZW9mIG1lcmdlZFNldHRpbmdzW2tleVN0cmlwcGVkXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbWVyZ2VkU2V0dGluZ3Nba2V5U3RyaXBwZWRdID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgbWVyZ2VkU2V0dGluZ3Nba2V5U3RyaXBwZWRdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZFNldHRpbmdzO1xufVxuXG5mdW5jdGlvbiBsb3dlckNhc2VGaXJzdExldHRlcihzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFkZCBkb3dubG9hZHMgamF2YXNjcmlwdCBjb2RlIChlLmcuIGFmdGVyIFhIUiByZXF1ZXN0cykgdG8gdGhlIEhUTUwgZG9jdW1lbnRzIDxoZWFkPiwgc28gdGhhdCB0aGVcbiAqIGphdmFzY3JpcHQgY29kZSBjYW4gYWN0dWFsbHkgZ2V0IGV4ZWN1dGVkLlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRDb250YWluaW5nU2NyaXB0VGFnc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkU2NyaXB0c1RvSGVhZChlbGVtZW50Q29udGFpbmluZ1NjcmlwdFRhZ3MpIHtcbiAgZm9yIChjb25zdCBhamF4U2NyaXB0RWxlbWVudCBvZiBlbGVtZW50Q29udGFpbmluZ1NjcmlwdFRhZ3MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIikpIHtcbiAgICBjb25zdCBzY3JpcHRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICBpZiAoIWFqYXhTY3JpcHRFbGVtZW50LnNyYykge1xuICAgICAgc2NyaXB0RWxlbWVudC5pbm5lckhUTUwgPSBhamF4U2NyaXB0RWxlbWVudC5pbm5lckhUTUw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjcmlwdEVsZW1lbnQuc3JjID0gYWpheFNjcmlwdEVsZW1lbnQuc3JjO1xuICAgIH1cbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdEVsZW1lbnQpO1xuICB9XG59XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSBieSB0aGUgQUNQMyBEZXZlbG9wZXJzLlxuICogU2VlIHRoZSBMSUNFTkNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBtb2R1bGUgZGlyZWN0b3J5IGZvciBsaWNlbmNpbmcgZGV0YWlscy5cbiAqL1xuXG4vKipcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fERvY3VtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcGFyYW0ge3N0cmluZ3xIVE1MRWxlbWVudH0gc2VsZWN0b3JPclRhcmdldEVsZW1lbnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGhhbmRsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlbGVnYXRlRXZlbnQoZWxlbWVudCwgZXZlbnROYW1lLCBzZWxlY3Rvck9yVGFyZ2V0RWxlbWVudCwgaGFuZGxlcikge1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoZXZlbnQpID0+IHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yT3JUYXJnZXRFbGVtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JPclRhcmdldEVsZW1lbnQpO1xuXG4gICAgICBpZiAoIWVsZW1zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZWxlbXMuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgICBpZiAoZWxlbSAmJiBlbGVtLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBoYW5kbGVyKGV2ZW50LCBlbGVtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzZWxlY3Rvck9yVGFyZ2V0RWxlbWVudCAmJiBzZWxlY3Rvck9yVGFyZ2V0RWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICBoYW5kbGVyKGV2ZW50LCBzZWxlY3Rvck9yVGFyZ2V0RWxlbWVudCk7XG4gICAgfVxuICB9KTtcbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIGJ5IHRoZSBBQ1AzIERldmVsb3BlcnMuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBhdCB0aGUgdG9wLWxldmVsIG1vZHVsZSBkaXJlY3RvcnkgZm9yIGxpY2Vuc2luZyBkZXRhaWxzLlxuICovXG5cbmltcG9ydCB7IGFkZFNjcmlwdHNUb0hlYWQsIG1lcmdlU2V0dGluZ3MgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgZGVsZWdhdGVFdmVudCB9IGZyb20gXCIuL2V2ZW50LWhhbmRsZXJcIjtcblxuZXhwb3J0IGNsYXNzIEFqYXhGb3JtIHtcbiAgI2xvYWRpbmdJbmRpY2F0b3I7XG4gICNmb3JtVmFsaWRhdG9yO1xuICAjZGVmYXVsdHMgPSB7XG4gICAgY29tcGxldGVDYWxsYmFjazogbnVsbCxcbiAgICB0YXJnZXRFbGVtZW50OiBcIiNjb250ZW50XCIsXG4gICAgbG9hZGluZ092ZXJsYXk6IHRydWUsXG4gICAgY3VzdG9tRm9ybURhdGE6IG51bGwsXG4gICAgbWV0aG9kOiBudWxsLFxuICB9O1xuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0xvYWRpbmdJbmRpY2F0b3J9IGxvYWRpbmdJbmRpY2F0b3JcbiAgICogQHBhcmFtIHtGb3JtVmFsaWRhdG9yfSBmb3JtVmFsaWRhdG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihsb2FkaW5nSW5kaWNhdG9yLCBmb3JtVmFsaWRhdG9yKSB7XG4gICAgdGhpcy4jbG9hZGluZ0luZGljYXRvciA9IGxvYWRpbmdJbmRpY2F0b3I7XG4gICAgdGhpcy4jZm9ybVZhbGlkYXRvciA9IGZvcm1WYWxpZGF0b3I7XG5cbiAgICB0aGlzLiNpbml0KCk7XG4gIH1cblxuICAjaW5pdCgpIHtcbiAgICB0aGlzLiNyZWdpc3RlckNsaWNrZWRTdWJtaXRCdXR0b24oKTtcblxuICAgIGRlbGVnYXRlRXZlbnQoZG9jdW1lbnQsIFwiY2xpY2tcIiwgJ2FbZGF0YS1hamF4LWZvcm09XCJ0cnVlXCJdJywgYXN5bmMgKGV2ZW50LCBlbGVtKSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBhd2FpdCB0aGlzLnBlcmZvcm1BamF4UmVxdWVzdChlbGVtKTtcbiAgICB9KTtcblxuICAgIGRlbGVnYXRlRXZlbnQoZG9jdW1lbnQsIFwic3VibWl0XCIsICdmb3JtW2RhdGEtYWpheC1mb3JtPVwidHJ1ZVwiXScsIGFzeW5jIChldmVudCwgZWxlbSkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgdGhpcy4jZm9ybVZhbGlkYXRvci5zZXRGb3JtQXNWYWxpZChlbGVtKTtcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJhY3AzLmFqYXhGcm9tLnN1Ym1pdC5iZWZvcmVcIiwgeyBkZXRhaWw6IHRoaXMgfSkpO1xuXG4gICAgICBpZiAodGhpcy4jZm9ybVZhbGlkYXRvci5pc1ZhbGlkKGVsZW0pICYmIHRoaXMuI2Zvcm1WYWxpZGF0b3IucHJlVmFsaWRhdGVGb3JtKGVsZW0pKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucGVyZm9ybUFqYXhSZXF1ZXN0KGVsZW0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZGVsZWdhdGVFdmVudChkb2N1bWVudCwgXCJjaGFuZ2VcIiwgJ2Zvcm1bZGF0YS1hamF4LWZvcm09XCJ0cnVlXCJdJywgYXN5bmMgKGV2ZW50LCBlbGVtKSA9PiB7XG4gICAgICBpZiAodGhpcy4jZm9ybVZhbGlkYXRvci5pc1ZhbGlkKGVsZW0pID09PSBmYWxzZSkge1xuICAgICAgICB0aGlzLiNmb3JtVmFsaWRhdG9yLmNoZWNrRm9ybUVsZW1lbnRzRm9yRXJyb3JzKGVsZW0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgI3JlZ2lzdGVyQ2xpY2tlZFN1Ym1pdEJ1dHRvbigpIHtcbiAgICBkZWxlZ2F0ZUV2ZW50KGRvY3VtZW50LCBcImNsaWNrXCIsICdmb3JtW2RhdGEtYWpheC1mb3JtPVwidHJ1ZVwiXSBbdHlwZT1cInN1Ym1pdFwiXScsIChldmVudCwgc3VibWl0RWxlbSkgPT4ge1xuICAgICAgc3VibWl0RWxlbVxuICAgICAgICAuY2xvc2VzdChcImZvcm1cIilcbiAgICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbdHlwZT1zdWJtaXRdXCIpXG4gICAgICAgIC5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICAgICAgZGVsZXRlIGVsZW0uZGF0YXNldFtcImNsaWNrZWRcIl07XG4gICAgICAgIH0pO1xuICAgICAgc3VibWl0RWxlbS5kYXRhc2V0LmNsaWNrZWQgPSBcInRydWVcIjtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRFbGVtZW50XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgcGVyZm9ybUFqYXhSZXF1ZXN0KHRhcmdldEVsZW1lbnQpIHtcbiAgICBjb25zdCBtZXJnZWRTZXR0aW5ncyA9IG1lcmdlU2V0dGluZ3ModGhpcy4jZGVmYXVsdHMsIHt9LCB0YXJnZXRFbGVtZW50LmRhdGFzZXQpO1xuICAgIGxldCBoYXNoLCBzdWJtaXRCdXR0b247XG5cbiAgICBpZiAodGFyZ2V0RWxlbWVudCBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkge1xuICAgICAgc3VibWl0QnV0dG9uID0gdGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCdbdHlwZT1cInN1Ym1pdFwiXVtkYXRhLWNsaWNrZWQ9XCJ0cnVlXCJdJyk7XG5cbiAgICAgIGhhc2ggPSBzdWJtaXRCdXR0b24/LmRhdGFzZXQuaGFzaENoYW5nZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzaCA9IHRhcmdldEVsZW1lbnQuZGF0YXNldC5oYXNoQ2hhbmdlO1xuICAgIH1cblxuICAgIGlmIChtZXJnZWRTZXR0aW5ncy5sb2FkaW5nT3ZlcmxheSkge1xuICAgICAgdGhpcy4jbG9hZGluZ0luZGljYXRvci5hZGRMb2FkaW5nSW5kaWNhdG9yKHN1Ym1pdEJ1dHRvbiB8fCB0YXJnZXRFbGVtZW50KTtcbiAgICAgIHRoaXMuI2xvYWRpbmdJbmRpY2F0b3Iuc2hvd0xvYWRpbmdJbmRpY2F0b3Ioc3VibWl0QnV0dG9uIHx8IHRhcmdldEVsZW1lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuI2Rpc2FibGVTdWJtaXRCdXR0b24oc3VibWl0QnV0dG9uKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBtZXRob2QgPVxuICAgICAgICB0YXJnZXRFbGVtZW50LmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKT8udG9VcHBlckNhc2UoKSA/PyBtZXJnZWRTZXR0aW5ncy5tZXRob2Q/LnRvVXBwZXJDYXNlKCkgPz8gXCJHRVRcIjtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh0YXJnZXRFbGVtZW50LmdldEF0dHJpYnV0ZShcImFjdGlvblwiKSB8fCB0YXJnZXRFbGVtZW50LmdldEF0dHJpYnV0ZShcImhyZWZcIiksIHtcbiAgICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICAgIGJvZHk6IG1ldGhvZCAhPT0gXCJHRVRcIiA/IHRoaXMuI3ByZXBhcmVGb3JtRGF0YSh0YXJnZXRFbGVtZW50LCBzdWJtaXRCdXR0b24sIG1lcmdlZFNldHRpbmdzKSA6IG51bGwsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIlgtUmVxdWVzdGVkLVdpdGhcIjogXCJYTUxIdHRwUmVxdWVzdFwiLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgYXdhaXQgdGhpcy4jaGFuZGxlUmVzcG9uc2VFcnJvcihyZXNwb25zZSwgdGFyZ2V0RWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCB0aGlzLiNoYW5kbGVTdWNjZXNzZnVsUmVzcG9uc2UocmVzcG9uc2UsIGhhc2gsIG1lcmdlZFNldHRpbmdzKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuI2xvYWRpbmdJbmRpY2F0b3IuaGlkZUxvYWRpbmdJbmRpY2F0b3Ioc3VibWl0QnV0dG9uIHx8IHRhcmdldEVsZW1lbnQpO1xuICAgICAgdGhpcy4jZW5hYmxlU3VibWl0QnV0dG9uKHN1Ym1pdEJ1dHRvbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEZvcm1FbGVtZW50fSBmb3JtRWxlbWVudFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBzdWJtaXRCdXR0b25cbiAgICogQHBhcmFtIHtSZWNvcmQ8c3RyaW5nLCBhbnk+fSBtZXJnZWRTZXR0aW5nc1xuICAgKiBAcmV0dXJucyB7Rm9ybURhdGF9XG4gICAqL1xuICAjcHJlcGFyZUZvcm1EYXRhKGZvcm1FbGVtZW50LCBzdWJtaXRCdXR0b24sIG1lcmdlZFNldHRpbmdzKSB7XG4gICAgY29uc3QgaW5pdGlhbERhdGEgPSBtZXJnZWRTZXR0aW5ncy5jdXN0b21Gb3JtRGF0YSB8fCB7fTtcbiAgICBsZXQgZGF0YTtcblxuICAgIGlmIChmb3JtRWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZm9ybUVsZW1lbnQpO1xuXG4gICAgICBpZiAoc3VibWl0QnV0dG9uKSB7XG4gICAgICAgIGRhdGEuYXBwZW5kKHN1Ym1pdEJ1dHRvbi5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpLCBcIjFcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoaW5pdGlhbERhdGEpKSB7XG4gICAgICBkYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1Jlc3BvbnNlfSByZXNwb25zZVxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRFbGVtZW50XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgI2hhbmRsZVJlc3BvbnNlRXJyb3IocmVzcG9uc2UsIHRhcmdldEVsZW1lbnQpIHtcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5jbG9uZSgpLnRleHQoKTtcblxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgdGhpcy4jZm9ybVZhbGlkYXRvci5oYW5kbGVGb3JtRXJyb3JNZXNzYWdlcyh0YXJnZXRFbGVtZW50LCByZXNwb25zZURhdGEpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImFjcDMuYWpheEZyb20uc3VibWl0LmZhaWxcIiwgeyBkZXRhaWw6IHRoaXMgfSkpO1xuICAgIH0gZWxzZSBpZiAocmVzcG9uc2VEYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgIGRvY3VtZW50Lm9wZW4oKTtcbiAgICAgIGRvY3VtZW50LndyaXRlKHJlc3BvbnNlRGF0YSk7XG4gICAgICBkb2N1bWVudC5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1Jlc3BvbnNlfSByZXNwb25zZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaFxuICAgKiBAcGFyYW0ge1JlY29yZDxzdHJpbmcsIGFueT59IG1lcmdlZFNldHRpbmdzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgYXN5bmMgI2hhbmRsZVN1Y2Nlc3NmdWxSZXNwb25zZShyZXNwb25zZSwgaGFzaCwgbWVyZ2VkU2V0dGluZ3MpIHtcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCB0aGlzLiNkZWNvZGVSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvd1ttZXJnZWRTZXR0aW5ncy5jb21wbGV0ZUNhbGxiYWNrXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB3aW5kb3dbbWVyZ2VkU2V0dGluZ3MuY29tcGxldGVDYWxsYmFja10ocmVzcG9uc2VEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlRGF0YS5yZWRpcmVjdF91cmwpIHtcbiAgICAgIHRoaXMuI3JlZGlyZWN0VG9OZXdQYWdlKGhhc2gsIHJlc3BvbnNlRGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuI3JlcGxhY2VDb250ZW50KGhhc2gsIHJlc3BvbnNlRGF0YSwgbWVyZ2VkU2V0dGluZ3MpO1xuICAgICAgdGhpcy4jc2Nyb2xsSW50b1ZpZXcoaGFzaCwgbWVyZ2VkU2V0dGluZ3MpO1xuXG4gICAgICBpZiAoaGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gaGFzaDtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJhY3AzLmFqYXhGcm9tLmNvbXBsZXRlXCIpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtFbGVtZW50fSBzdWJtaXRCdXR0b25cbiAgICovXG4gICNkaXNhYmxlU3VibWl0QnV0dG9uKHN1Ym1pdEJ1dHRvbikge1xuICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gc3VibWl0QnV0dG9uXG4gICAqL1xuICAjZW5hYmxlU3VibWl0QnV0dG9uKHN1Ym1pdEJ1dHRvbikge1xuICAgIGlmIChzdWJtaXRCdXR0b24pIHtcbiAgICAgIHN1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge1Jlc3BvbnNlfSByZXNwb25zZVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTwqPn1cbiAgICovXG4gIGFzeW5jICNkZWNvZGVSZXNwb25zZShyZXNwb25zZSkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuY2xvbmUoKS5qc29uKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5jbG9uZSgpLnRleHQoKTtcbiAgICB9XG4gIH1cblxuICAjcmVkaXJlY3RUb05ld1BhZ2UoaGFzaCwgcmVzcG9uc2VEYXRhKSB7XG4gICAgaWYgKGhhc2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSByZXNwb25zZURhdGEucmVkaXJlY3RfdXJsICsgaGFzaDtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSByZXNwb25zZURhdGEucmVkaXJlY3RfdXJsO1xuICAgIH1cbiAgfVxuXG4gICNzY3JvbGxJbnRvVmlldyhoYXNoLCBtZXJnZWRTZXR0aW5ncykge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKGhhc2gpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWhhc2gtY2hhbmdlPVwiJHtoYXNofVwiXWApO1xuXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogdGFyZ2V0RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS55LCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG1lcmdlZFNldHRpbmdzLnRhcmdldEVsZW1lbnQpO1xuICAgICAgICBjb25zdCBvZmZzZXRUb3AgPSB0YXJnZXRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnk7XG5cbiAgICAgICAgaWYgKGRvY3VtZW50LnNjcm9sbFRvcCA+IG9mZnNldFRvcCkge1xuICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7IHRvcDogb2Zmc2V0VG9wLCBiZWhhdmlvcjogXCJzbW9vdGhcIiB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgI3JlcGxhY2VDb250ZW50KGhhc2gsIHJlc3BvbnNlRGF0YSwgbWVyZ2VkU2V0dGluZ3MpIHtcbiAgICBsZXQgdGFyZ2V0RWxlbWVudDtcbiAgICBsZXQgdXBkYXRlZENvbnRlbnREYXRhO1xuXG4gICAgaWYgKGhhc2ggJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihoYXNoKSkge1xuICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZURhdGEsIFwidGV4dC9odG1sXCIpO1xuXG4gICAgICB0YXJnZXRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihoYXNoKTtcbiAgICAgIHVwZGF0ZWRDb250ZW50RGF0YSA9IGRvYy5xdWVyeVNlbGVjdG9yKGhhc2gpLmlubmVySFRNTDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWVyZ2VkU2V0dGluZ3MudGFyZ2V0RWxlbWVudCk7XG4gICAgICB1cGRhdGVkQ29udGVudERhdGEgPSByZXNwb25zZURhdGE7XG4gICAgfVxuXG4gICAgdGFyZ2V0RWxlbWVudC5pbm5lckhUTUwgPSB1cGRhdGVkQ29udGVudERhdGE7XG4gICAgYWRkU2NyaXB0c1RvSGVhZCh0YXJnZXRFbGVtZW50KTtcbiAgfVxufVxuIiwiLypcbiAqIENvcHlyaWdodCAoYykgYnkgdGhlIEFDUDMgRGV2ZWxvcGVycy5cbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgbW9kdWxlIGRpcmVjdG9yeSBmb3IgbGljZW5zaW5nIGRldGFpbHMuXG4gKi9cblxuZXhwb3J0IGNsYXNzIExvYWRpbmdJbmRpY2F0b3Ige1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0RWxlbWVudFxuICAgKi9cbiAgYWRkTG9hZGluZ0luZGljYXRvcih0YXJnZXRFbGVtZW50KSB7XG4gICAgaWYgKCF0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubG9hZGluZy1pbmRpY2F0b3JcIikpIHtcbiAgICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKTtcbiAgICAgIGNvbnN0IGpzU3ZnSWNvbnMgPSBKU09OLnBhcnNlKGJvZHkuZGF0YXNldC5zdmdJY29ucyk7XG4gICAgICBjb25zdCBsb2FkaW5nSW5kaWNhdG9ySHRtbCA9XG4gICAgICAgICc8c3ZnIGNsYXNzPVwic3ZnLWljb24gc3ZnLWljb25fX3NwaW5uZXIgc3ZnLWljb24tLXNwaW4gbG9hZGluZy1pbmRpY2F0b3IgbWUtMVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIj48dXNlIHhsaW5rOmhyZWY9XCInICtcbiAgICAgICAganNTdmdJY29uc1tcImxvYWRpbmdJbmRpY2F0b3JJY29uXCJdICtcbiAgICAgICAgJ1wiPjwvdXNlPjwvc3ZnPic7XG5cbiAgICAgIHRhcmdldEVsZW1lbnQuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYWZ0ZXJiZWdpblwiLCBsb2FkaW5nSW5kaWNhdG9ySHRtbCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldEVsZW1lbnRcbiAgICovXG4gIHNob3dMb2FkaW5nSW5kaWNhdG9yKHRhcmdldEVsZW1lbnQpIHtcbiAgICB0aGlzLiN0b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRhcmdldEVsZW1lbnQsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldEVsZW1lbnRcbiAgICovXG4gIGhpZGVMb2FkaW5nSW5kaWNhdG9yKHRhcmdldEVsZW1lbnQpIHtcbiAgICB0aGlzLiN0b2dnbGVMb2FkaW5nSW5kaWNhdG9yKHRhcmdldEVsZW1lbnQsIGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXRFbGVtZW50XG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gc2hvd1xuICAgKi9cbiAgI3RvZ2dsZUxvYWRpbmdJbmRpY2F0b3IodGFyZ2V0RWxlbWVudCwgc2hvdykge1xuICAgIHRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5sb2FkaW5nLWluZGljYXRvclwiKT8uY2xhc3NMaXN0LnRvZ2dsZShcImxvYWRpbmctaW5kaWNhdG9yX19hY3RpdmVcIiwgc2hvdyk7XG4gIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIGJ5IHRoZSBBQ1AzIERldmVsb3BlcnMuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBhdCB0aGUgdG9wLWxldmVsIG1vZHVsZSBkaXJlY3RvcnkgZm9yIGxpY2Vuc2luZyBkZXRhaWxzLlxuICovXG5cbmltcG9ydCB7IG1lcmdlU2V0dGluZ3MgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gICNkZWZhdWx0cyA9IHtcbiAgICBzY3JvbGxPZmZzZXRFbGVtZW50OiBudWxsLFxuICB9O1xuICAjc2V0dGluZ3M7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy4jc2V0dGluZ3MgPSBtZXJnZVNldHRpbmdzKHRoaXMuI2RlZmF1bHRzLCBvcHRpb25zLCB7fSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1FbGVtZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgcHJlVmFsaWRhdGVGb3JtKGZvcm1FbGVtZW50KSB7XG4gICAgdGhpcy5jaGVja0Zvcm1FbGVtZW50c0ZvckVycm9ycyhmb3JtRWxlbWVudCk7XG4gICAgdGhpcy4jZm9jdXNUYWJXaXRoRmlyc3RFcnJvck1lc3NhZ2UoZm9ybUVsZW1lbnQpO1xuICAgIHRoaXMuI3Njcm9sbFRvRmlyc3RGb3JtRXJyb3IoZm9ybUVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZChmb3JtRWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1FbGVtZW50XG4gICAqL1xuICBjaGVja0Zvcm1FbGVtZW50c0ZvckVycm9ycyhmb3JtRWxlbWVudCkge1xuICAgIHRoaXMuI3JlbW92ZUFsbFByZXZpb3VzRXJyb3JzKGZvcm1FbGVtZW50KTtcblxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgZm9ybUVsZW1lbnQuZWxlbWVudHMpIHtcbiAgICAgIGlmIChmaWVsZC5ub2RlTmFtZSAhPT0gXCJJTlBVVFwiICYmIGZpZWxkLm5vZGVOYW1lICE9PSBcIlRFWFRBUkVBXCIgJiYgZmllbGQubm9kZU5hbWUgIT09IFwiU0VMRUNUXCIpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghZmllbGQuY2hlY2tWYWxpZGl0eSgpKSB7XG4gICAgICAgIHRoaXMuI2FkZEVycm9yTWVzc2FnZVRvRm9ybUZpZWxkKGZpZWxkLCBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZSk7XG5cbiAgICAgICAgaWYgKCFmb3JtRWxlbWVudC5mb3JtVmFsaWRhdG9yKSB7XG4gICAgICAgICAgZm9ybUVsZW1lbnQuZm9ybVZhbGlkYXRvciA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9ybUVsZW1lbnQuZm9ybVZhbGlkYXRvci5pc1ZhbGlkID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEZvcm1FbGVtZW50fSBmb3JtRWxlbWVudFxuICAgKi9cbiAgI3JlbW92ZUFsbFByZXZpb3VzRXJyb3JzKGZvcm1FbGVtZW50KSB7XG4gICAgZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5pcy1pbnZhbGlkXCIpLmZvckVhY2goKGludmFsaWRGb3JtRmllbGQpID0+IHtcbiAgICAgIGludmFsaWRGb3JtRmllbGQuY2xhc3NMaXN0LnJlbW92ZShcImlzLWludmFsaWRcIik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZm9ybUZpZWxkXG4gICAqL1xuICAjcmVtb3ZlRXJyb3JNZXNzYWdlRnJvbUZvcm1GaWVsZChmb3JtRmllbGQpIHtcbiAgICBmb3JtRmllbGQuY2xvc2VzdChcImRpdlwiKT8ucXVlcnlTZWxlY3RvcihcIi5pbnZhbGlkLWZlZWRiYWNrXCIpPy5yZW1vdmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBmb3JtRmllbGRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGVycm9yTWVzc2FnZVxuICAgKi9cbiAgI2FkZEVycm9yTWVzc2FnZVRvRm9ybUZpZWxkKGZvcm1GaWVsZCwgZXJyb3JNZXNzYWdlKSB7XG4gICAgdGhpcy4jcmVtb3ZlRXJyb3JNZXNzYWdlRnJvbUZvcm1GaWVsZChmb3JtRmllbGQpO1xuXG4gICAgZm9ybUZpZWxkLmNsYXNzTGlzdC5hZGQoXCJpcy1pbnZhbGlkXCIpO1xuXG4gICAgZm9ybUZpZWxkXG4gICAgICAuY2xvc2VzdChcImRpdjpub3QoLmlucHV0LWdyb3VwKTpub3QoLmJ0bi1ncm91cClcIilcbiAgICAgIC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgYDxkaXYgY2xhc3M9XCJpbnZhbGlkLWZlZWRiYWNrXCI+JHtlcnJvck1lc3NhZ2V9PC9kaXY+YCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1FbGVtZW50XG4gICAqL1xuICAjZm9jdXNUYWJXaXRoRmlyc3RFcnJvck1lc3NhZ2UoZm9ybUVsZW1lbnQpIHtcbiAgICBpZiAoIWZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubmF2LXRhYnNcIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBmaXJzdEVsZW1XaXRoRXJyb3IgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmlzLWludmFsaWRcIik7XG5cbiAgICBpZiAoIWZpcnN0RWxlbVdpdGhFcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRhYklkID0gZmlyc3RFbGVtV2l0aEVycm9yLmNsb3Nlc3QoXCIudGFiLXBhbmVcIikuZ2V0QXR0cmlidXRlKFwiaWRcIik7XG5cbiAgICBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcubmF2LXRhYnMgYVtocmVmPVwiIycgKyB0YWJJZCArICdcIl0nKS5jbGljaygpO1xuXG4gICAgZmlyc3RFbGVtV2l0aEVycm9yLmZvY3VzKCk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1FbGVtZW50XG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgaXNWYWxpZChmb3JtRWxlbWVudCkge1xuICAgIHJldHVybiAhIWZvcm1FbGVtZW50LmZvcm1WYWxpZGF0b3I/LmlzVmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1FbGVtZW50XG4gICAqL1xuICBzZXRGb3JtQXNWYWxpZChmb3JtRWxlbWVudCkge1xuICAgIGZvcm1FbGVtZW50LmZvcm1WYWxpZGF0b3IgPSB7XG4gICAgICBpc1ZhbGlkOiB0cnVlLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdGFyZ2V0RWxlbWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXJyb3JNZXNzYWdlc0h0bWxcbiAgICovXG4gIGhhbmRsZUZvcm1FcnJvck1lc3NhZ2VzKHRhcmdldEVsZW1lbnQsIGVycm9yTWVzc2FnZXNIdG1sKSB7XG4gICAgaWYgKCEodGFyZ2V0RWxlbWVudCBpbnN0YW5jZW9mIEhUTUxGb3JtRWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RhbEJvZHkgPSB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtYm9keVwiKTtcblxuICAgIC8vIFJlbW92ZSB0aGUgb2xkIC0gcG9zc2libGUgZXhpc3RpbmcgLSBlcnJvci1ib3hcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yLWJveFwiKT8ucmVtb3ZlKCk7XG5cbiAgICAvLyBQbGFjZSB0aGUgZXJyb3IgbWVzc2FnZXMgaW5zaWRlIHRoZSBtb2RhbCBib2R5IGZvciBhIGJldHRlciBzdHlsaW5nXG4gICAgaWYgKHRhcmdldEVsZW1lbnQuY2xvc2VzdChcIi5tb2RhbFwiKSAmJiBtb2RhbEJvZHkpIHtcbiAgICAgIG1vZGFsQm9keS5pbnNlcnRBZGphY2VudEhUTUwoXCJhZnRlcmJlZ2luXCIsIGVycm9yTWVzc2FnZXNIdG1sKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0RWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoXCJhZnRlcmJlZ2luXCIsIGVycm9yTWVzc2FnZXNIdG1sKTtcbiAgICB9XG5cbiAgICB0aGlzLiNwcmV0dHlQcmludFJlc3BvbnNlRXJyb3JNZXNzYWdlcyh0YXJnZXRFbGVtZW50LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImVycm9yLWJveFwiKSk7XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtIVE1MRm9ybUVsZW1lbnR9IGZvcm1FbGVtZW50XG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVycm9yQm94XG4gICAqL1xuICAjcHJldHR5UHJpbnRSZXNwb25zZUVycm9yTWVzc2FnZXMoZm9ybUVsZW1lbnQsIGVycm9yQm94KSB7XG4gICAgdGhpcy4jcmVtb3ZlQWxsUHJldmlvdXNFcnJvcnMoZm9ybUVsZW1lbnQpO1xuXG4gICAgLy8gaGlnaGxpZ2h0IGFsbCBpbnB1dCBmaWVsZHMgd2hlcmUgdGhlIHZhbGlkYXRpb24gaGFzIGZhaWxlZFxuICAgIGVycm9yQm94LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaVwiKS5mb3JFYWNoKChlcnJvck1lc3NhZ2VMaW5lKSA9PiB7XG4gICAgICBsZXQgZXJyb3JDbGFzcyA9IGVycm9yTWVzc2FnZUxpbmUuZGF0YXNldC5lbGVtZW50O1xuXG4gICAgICBpZiAoZXJyb3JDbGFzcz8ubGVuZ3RoID4gMCkge1xuICAgICAgICBsZXQgZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVycm9yQ2xhc3MpIHx8IGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tpZHw9XCInICsgZXJyb3JDbGFzcyArICdcIl0nKTtcblxuICAgICAgICBpZiAoZWxlbSkge1xuICAgICAgICAgIC8vIE1vdmUgdGhlIGVycm9yIG1lc3NhZ2UgdG8gdGhlIHJlc3BvbnNpYmxlIGlucHV0IGZpZWxkKHMpXG4gICAgICAgICAgLy8gYW5kIHJlbW92ZSB0aGUgbGlzdCBpdGVtIGZyb20gdGhlIGVycm9yIGJveCBjb250YWluZXJcbiAgICAgICAgICB0aGlzLiNhZGRFcnJvck1lc3NhZ2VUb0Zvcm1GaWVsZChlbGVtWzBdLCBlcnJvck1lc3NhZ2VMaW5lLmlubmVySFRNTCk7XG4gICAgICAgICAgZXJyb3JNZXNzYWdlTGluZS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gaWYgYWxsIGxpc3QgaXRlbXMgaGF2ZSBiZWVuIHJlbW92ZWQsIHJlbW92ZSB0aGUgZXJyb3IgYm94IGNvbnRhaW5lciB0b29cbiAgICBpZiAoZXJyb3JCb3gucXVlcnlTZWxlY3RvckFsbChcImxpXCIpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZXJyb3JCb3gucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy4jZm9jdXNUYWJXaXRoRmlyc3RFcnJvck1lc3NhZ2UoZm9ybUVsZW1lbnQpO1xuICAgIHRoaXMuI3Njcm9sbFRvRmlyc3RGb3JtRXJyb3IoZm9ybUVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7SFRNTEZvcm1FbGVtZW50fSBmb3JtRWxlbWVudFxuICAgKi9cbiAgI3Njcm9sbFRvRmlyc3RGb3JtRXJyb3IoZm9ybUVsZW1lbnQpIHtcbiAgICBpZiAoZm9ybUVsZW1lbnQuY2xvc2VzdChcIi5tb2RhbFwiKT8ubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm1FcnJvcnMgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmlzLWludmFsaWRcIik7XG5cbiAgICBpZiAoIWZvcm1FcnJvcnMgfHwgZm9ybUVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy4jaXNFbGVtZW50SW5WaWV3cG9ydChmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmludmFsaWQtZmVlZGJhY2tcIikpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG9mZnNldFRvcCA9IGZvcm1FcnJvcnMuaXRlbSgwKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG5cbiAgICBpZiAodGhpcy4jc2V0dGluZ3Muc2Nyb2xsT2Zmc2V0RWxlbWVudCkge1xuICAgICAgY29uc3Qgc2Nyb2xsT2Zmc2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy4jc2V0dGluZ3Muc2Nyb2xsT2Zmc2V0RWxlbWVudCk7XG5cbiAgICAgIGlmIChzY3JvbGxPZmZzZXRFbGVtZW50KSB7XG4gICAgICAgIG9mZnNldFRvcCAtPSBzY3JvbGxPZmZzZXRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aW5kb3cuc2Nyb2xsVG8oeyB0b3A6IG9mZnNldFRvcCwgYmVoYXZpb3I6IFwic21vb3RoXCIgfSk7XG4gIH1cblxuICAjaXNFbGVtZW50SW5WaWV3cG9ydChlbGVtZW50KSB7XG4gICAgY29uc3Qgc2Nyb2xsT2Zmc2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy4jc2V0dGluZ3Muc2Nyb2xsT2Zmc2V0RWxlbWVudCk7XG4gICAgbGV0IG9mZnNldFRvcCA9IDA7XG5cbiAgICBpZiAoc2Nyb2xsT2Zmc2V0RWxlbWVudCkge1xuICAgICAgb2Zmc2V0VG9wID0gc2Nyb2xsT2Zmc2V0RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgfVxuXG4gICAgY29uc3QgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgcmVjdC50b3AgPj0gb2Zmc2V0VG9wICYmXG4gICAgICByZWN0LmxlZnQgPj0gMCAmJlxuICAgICAgcmVjdC5ib3R0b20gPD0gKHdpbmRvdy5pbm5lckhlaWdodCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0KSAmJlxuICAgICAgcmVjdC5yaWdodCA8PSAod2luZG93LmlubmVyV2lkdGggfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKVxuICAgICk7XG4gIH1cbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgKGMpIGJ5IHRoZSBBQ1AzIERldmVsb3BlcnMuXG4gKiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBhdCB0aGUgdG9wLWxldmVsIG1vZHVsZSBkaXJlY3RvcnkgZm9yIGxpY2VuY2luZyBkZXRhaWxzLlxuICovXG5cbmltcG9ydCB7IEFqYXhGb3JtIH0gZnJvbSBcIi4uL2xpYi9hamF4LWZvcm1cIjtcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3IgfSBmcm9tIFwiLi4vbGliL2xvYWRpbmctaW5kaWNhdG9yXCI7XG5pbXBvcnQgeyBGb3JtVmFsaWRhdG9yIH0gZnJvbSBcIi4uL2xpYi9mb3JtLXZhbGlkYXRvclwiO1xuXG4oKCkgPT4ge1xuICBuZXcgQWpheEZvcm0obmV3IExvYWRpbmdJbmRpY2F0b3IoKSwgbmV3IEZvcm1WYWxpZGF0b3IoKSk7XG59KSgpO1xuIl19","file":"ajax-form.min.js"}