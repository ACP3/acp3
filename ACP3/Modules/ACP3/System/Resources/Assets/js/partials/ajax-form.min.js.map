{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/utils.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/ajax-form.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/loading-indicator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/form-validator.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ajax-form.js"],"names":["_$utils_5","elementContainingScriptTags","ajaxScriptElement","getElementsByTagName","scriptElement","document","createElement","src","innerHTML","head","appendChild","mergeSettings","defaultSettings","constructorOptions","dataAttributeOptions","mergedSettings","key","value","Object","entries","keyStripped","string","replace","charAt","toLowerCase","slice","length","JSON","parse","_unused","element","eventName","selectorOrTargetElement","handler","addEventListener","event","elems","querySelectorAll","forEach","elem","contains","target","_classPrivateFieldLooseBase","receiver","privateKey","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","_loadingIndicator","_formValidator","_defaults","_init","_registerClickedSubmitButton","_prepareFormData","_handleResponseError","_handleSuccessfulResponse","_disableSubmitButton","_enableSubmitButton","_decodeResponse","_redirectToNewPage","_scrollIntoView","_replaceContent","_init2","this","_$eventHandler_2","delegateEvent","async","preventDefault","performAjaxRequest","setFormAsValid","dispatchEvent","CustomEvent","detail","isValid","preValidateForm","checkFormElementsForErrors","_registerClickedSubmitButton2","submitElem","closest","dataset","clicked","_prepareFormData2","formElement","submitButton","initialData","customFormData","data","getAttribute","FormData","append","_handleResponseError2","response","targetElement","responseData","clone","text","status","handleFormErrorMessages","open","write","close","_handleSuccessfulResponse2","hash","window","completeCallback","redirect_url","location","_disableSubmitButton2","disabled","_enableSubmitButton2","_decodeResponse2","json","error","_redirectToNewPage2","href","reload","_scrollIntoView2","setTimeout","querySelector","concat","scrollTo","top","getBoundingClientRect","y","behavior","offsetTop","scrollTop","_replaceContent2","updatedContentData","doc","DOMParser","parseFromString","addScriptsToHead","_$ajaxForm_1","AjaxForm","[object Object]","loadingIndicator","formValidator","defineProperty","writable","loadingOverlay","method","_submitButton","HTMLFormElement","hashChange","addLoadingIndicator","showLoadingIndicator","_ref","_targetElement$getAtt","_targetElement$getAtt2","_mergedSettings$metho","toUpperCase","fetch","body","headers","X-Requested-With","ok","console","hideLoadingIndicator","show","_targetElement$queryS","classList","toggle","_$loadingIndicator_4","LoadingIndicator","_toggleLoadingIndicator","_toggleLoadingIndicator2","jsSvgIcons","svgIcons","insertAdjacentHTML","loadingIndicatorIcon","___classPrivateFieldLooseBase_4","___classPrivateFieldLooseBase_3","__id_3","___classPrivateFieldLooseKey_3","___defaults_3","_settings","_removeAllPreviousErrors","_removeErrorMessageFromFormField","_addErrorMessageToFormField","_focusTabWithFirstErrorMessage","_prettyPrintResponseErrorMessages","_scrollToFirstFormError","_isElementInViewport","_removeAllPreviousErrors2","invalidFormField","remove","_removeErrorMessageFromFormField2","formField","_formField$closest","_formField$closest$qu","_addErrorMessageToFormField2","errorMessage","add","_focusTabWithFirstErrorMessage2","firstElemWithError","tabId","click","focus","_prettyPrintResponseErrorMessages2","errorBox","errorMessageLine","errorClass","getElementById","_scrollToFirstFormError2","_formElement$closest","formErrors","item","scrollOffsetElement","clientHeight","_isElementInViewport2","rect","left","bottom","innerHeight","documentElement","right","innerWidth","clientWidth","_$formValidator_3","FormValidator","options","arguments","field","elements","nodeName","checkValidity","validationMessage","_formElement$formVali","errorMessagesHtml","_document$getElementB","modalBody"],"mappings":"CAAA,WACA,IAAAA,EAAA,uECoCO,SAA0BC,GAC/B,IAAK,MAAMC,KAAqBD,EAA4BE,qBAAqB,UAAW,CAC1F,MAAMC,EAAgBC,SAASC,cAAc,UACxCJ,EAAkBK,IAGrBH,EAAcG,IAAML,EAAkBK,IAFtCH,EAAcI,UAAYN,EAAkBM,UAI9CH,SAASI,KAAKC,YAAYN,KAAAJ,EAAAW,cAxCvB,SAAuBC,EAAiBC,EAAoBC,GACjE,MAAMC,EAAiB,IAAKH,KAAoBC,GAEhD,IAAKC,EACH,OAAOC,EAGT,IAAK,IAAKC,EAAKC,KAAUC,OAAOC,QAAQL,GAAuB,CAC7D,MAAMM,GAcoBC,EAdeL,EAAIM,QAAQ,WAAY,KAerDC,OAAO,GAAGC,cAAgBH,EAAOI,MAAM,GAbnD,GAAIL,EAAYM,OAAS,QAAA,IAAYX,EAAeK,GAClD,IACEL,EAAeK,GAAeO,KAAKC,MAAMX,GACzC,MAAAY,GACAd,EAAeK,GAAeH,GAQtC,IAA8BI,EAH5B,OAAON,6ECZF,SAAuBe,EAASC,EAAWC,EAAyBC,GACzEH,EAAQI,iBAAiBH,EAAYI,IACnC,GAAuC,iBAA5BH,EAAsC,CAC/C,MAAMI,EAAQ/B,SAASgC,iBAAiBL,GAExC,IAAKI,EACH,OAGFA,EAAME,QAASC,IACTA,GAAQA,EAAKC,SAASL,EAAMM,SAC9BR,EAAQE,EAAOI,UAGVP,GAA2BA,EAAwBQ,SAASL,EAAMM,SAC3ER,EAAQE,EAAOH,eCrBrB,SAAAU,EAAAC,EAAAC,GAAA,IAAA1B,OAAA2B,UAAAC,eAAAC,KAAAJ,EAAAC,GAAA,MAAA,IAAAI,UAAA,kDAAA,OAAAL,qEAAA,IAAAM,EAAA,EAAA,SAAAC,EAAAC,GAAA,MAAA,aAAAF,IAAA,IAAAE,EAAA,IAAAC,EAAAF,EAAA,oBAAAG,EAAAH,EAAA,iBAAAI,EAAAJ,EAAA,YAAAK,EAAAL,EAAA,QAAAM,EAAAN,EAAA,+BAAAO,EAAAP,EAAA,mBAAAQ,EAAAR,EAAA,uBAAAS,EAAAT,EAAA,4BAAAU,EAAAV,EAAA,uBAAAW,EAAAX,EAAA,sBAAAY,EAAAZ,EAAA,kBAAAa,EAAAb,EAAA,qBAAAc,EAAAd,EAAA,kBAAAe,EAAAf,EAAA,kBAAA,SAAAgB,IA0BIxB,EAAAyB,KAAAX,GAAAA,MAAA,EAEAY,EAAAC,eAAchE,SAAU,QAAS,2BAA4BiE,MAAOnC,EAAOI,KACzEJ,EAAMoC,uBAEAJ,KAAKK,mBAAmBjC,MAAA,EAGhC6B,EAAAC,eAAchE,SAAU,SAAU,8BAA+BiE,MAAOnC,EAAOI,KAC7EJ,EAAMoC,iBAEN7B,EAAAyB,KAAAd,GAAAA,GAAoBoB,eAAelC,GAEnClC,SAASqE,cAAc,IAAIC,YAAY,8BAA+B,CAAEC,OAAQT,QAE5EzB,EAAAyB,KAAAd,GAAAA,GAAoBwB,QAAQtC,IAASG,EAAAyB,KAAAd,GAAAA,GAAoByB,gBAAgBvC,UACrE4B,KAAKK,mBAAmBjC,MAAA,EAIlC6B,EAAAC,eAAchE,SAAU,SAAU,8BAA+BiE,MAAOnC,EAAOI,MAAA,IACzEG,EAAAyB,KAAAd,GAAAA,GAAoBwB,QAAQtC,IAC9BG,EAAAyB,KAAAd,GAAAA,GAAoB0B,2BAA2BxC,KAAA,SAAAyC,KAAA,EAMnDZ,EAAAC,eAAchE,SAAU,QAAS,8CAA+C,CAAC8B,EAAO8C,KACtFA,EACGC,QAAQ,QACR7C,iBAAiB,iBACjBC,QAASC,WACDA,EAAK4C,QAALC,UAEXH,EAAWE,QAAQC,QAAU,SAAA,SAAAC,EA4DhBC,EAAaC,EAAcxE,GAC1C,MAAMyE,EAAczE,EAAe0E,gBAAkB,GACrD,IAAIC,EAEAJ,EAAYK,aAAa,WAC3BD,EAAO,IAAIE,SAASN,GAEhBC,GACFG,EAAKG,OAAON,EAAaI,aAAa,QAAS,MAGjDD,EAAO,IAAIE,SAGb,IAAK,IAAK5E,EAAKC,KAAUC,OAAOC,QAAQqE,GACtCE,EAAKG,OAAO7E,EAAKC,GAGnB,OAAOyE,EAAApB,eAAAwB,EASkBC,EAAUC,GACnC,MAAMC,QAAqBF,EAASG,QAAQC,OAEpB,MAApBJ,EAASK,QACX1D,EAAAyB,KAAAd,GAAAA,GAAoBgD,wBAAwBL,EAAeC,GAE3D5F,SAASqE,cAAc,IAAIC,YAAY,4BAA6B,CAAEC,OAAQT,SACrE8B,EAAavE,OAAS,IAC/BrB,SAASiG,OACTjG,SAASkG,MAAMN,GACf5F,SAASmG,SAAAlC,eAAAmC,EAWmBV,EAAUW,EAAM3F,GAC9C,MAAMkF,QAAevD,EAAMyB,KAANL,GAAAA,GAA2BiC,GAEO,mBAA5CY,OAAO5F,EAAe6F,kBAC/BD,OAAO5F,EAAe6F,kBAAkBX,GAC/BA,EAAaY,aACtBnE,EAAAyB,KAAAJ,GAAAA,GAAwB2C,EAAMT,IAE9BvD,EAAAyB,KAAAF,GAAAA,GAAqByC,EAAMT,EAAclF,GACzC2B,EAAAyB,KAAAH,GAAAA,GAAqB0C,EAAM3F,QAAA,IAEvB2F,IACFC,OAAOG,SAASJ,KAAOA,GAGzBrG,SAASqE,cAAc,IAAIC,YAAY,4BAAA,SAAAoC,EAQtBxB,GACfA,IACFA,EAAayB,UAAA,GAAW,SAAAC,EAQR1B,GACdA,IACFA,EAAayB,UAAA,GAAW1C,eAAA4C,EASNnB,GACpB,IACE,aAAaA,EAASG,QAAQiB,OAC9B,MAAOC,GACP,aAAarB,EAASG,QAAQC,QAAA,SAAAkB,EAIfX,EAAMT,QAAA,IACnBS,GACFC,OAAOG,SAASQ,KAAOrB,EAAaY,aAAeH,EACnDC,OAAOG,SAASS,UAEhBZ,OAAOG,SAASQ,KAAOrB,EAAaY,aAAA,SAAAW,EAIxBd,EAAM3F,GACpB0G,WAAW,KACT,GAAIf,EAAM,CACR,MAAMV,EAAgB3F,SAASqH,cAAT,sBAAAC,OAA6CjB,EAA7C,OAEtBC,OAAOiB,SAAS,CAAEC,IAAK7B,EAAc8B,wBAAwBC,EAAGC,SAAU,eACrE,CACL,MACMC,EADgB5H,SAASqH,cAAc3G,EAAeiF,eAC5B8B,wBAAwBC,EAEpD1H,SAAS6H,UAAYD,GACvBtB,OAAOiB,SAAS,CAAEC,IAAKI,EAAWD,SAAU,cAAA,SAAAG,EAMpCzB,EAAMT,EAAclF,GAClC,IAAIiF,EACAoC,EAEJ,GAAI1B,GAAQrG,SAASqH,cAAchB,GAAO,CACxC,MACM2B,GAAA,IADaC,WACAC,gBAAgBtC,EAAc,aAEjDD,EAAgB3F,SAASqH,cAAchB,GACvC0B,EAAqBC,EAAIX,cAAchB,GAAMlG,eAE7CwF,EAAgB3F,SAASqH,cAAc3G,EAAeiF,eACtDoC,EAAqBnC,EAGvBD,EAAcxF,UAAY4H,GAAA,EAC1BpI,EAAAwI,kBAAiBxC,GAAAyC,EAAAC,SArQd,MAgBLC,YAAYC,EAAkBC,GAAe3H,OAAA4H,eAAA3E,KAAAF,EAAA,CAAAhD,MAAAkH,IAAAjH,OAAA4H,eAAA3E,KAAAH,EAAA,CAAA/C,MAAAuG,IAAAtG,OAAA4H,eAAA3E,KAAAJ,EAAA,CAAA9C,MAAAoG,IAAAnG,OAAA4H,eAAA3E,KAAAL,EAAA,CAAA7C,MAAAiG,IAAAhG,OAAA4H,eAAA3E,KAAAN,EAAA,CAAA5C,MAAAgG,IAAA/F,OAAA4H,eAAA3E,KAAAP,EAAA,CAAA3C,MAAA8F,IAAA7F,OAAA4H,eAAA3E,KAAAR,EAAA,CAAA1C,MAAAwF,IAAAvF,OAAA4H,eAAA3E,KAAAT,EAAA,CAAAzC,MAAA6E,IAAA5E,OAAA4H,eAAA3E,KAAAV,EAAA,CAAAxC,MAAAoE,IAAAnE,OAAA4H,eAAA3E,KAAAX,EAAA,CAAAvC,MAAA+D,IAAA9D,OAAA4H,eAAA3E,KAAAZ,EAAA,CAAAtC,MAAAiD,IAAAhD,OAAA4H,eAAA3E,KAAAf,EAAA,CAAA2F,UAAA,EAAA9H,WAAA,IAAAC,OAAA4H,eAAA3E,KAAAd,EAAA,CAAA0F,UAAA,EAAA9H,WAAA,IAAAC,OAAA4H,eAAA3E,KAAAb,EAAA,CAAAyF,UAAA,EAAA9H,MAbjC,CACV2F,iBAAkB,KAClBZ,cAAe,WACfgD,gBAAA,EACAvD,eAAgB,KAChBwD,OAAQ,QASRvG,EAAAyB,KAAAf,GAAAA,GAAyBwF,EACzBlG,EAAAyB,KAAAd,GAAAA,GAAsBwF,EAEtBnG,EAAAyB,KAAAZ,GAAAA,KAgDsBoF,yBAAC3C,GACvB,MAAMjF,GAAA,EAAiBf,EAAAW,eAAA+B,EAAcyB,KAAdb,GAAAA,GAA8B,GAAI0C,EAAcb,SACvE,IAAIuB,EAAMnB,EAEoC,IAAA2D,EAG5CxC,EAHEV,aAAyBmD,gBAGvB,QAAAD,EAFJ3D,EAAeS,EAAc0B,cAAc,+CAAA,IAEvCwB,OAAA,EAAGA,EAAc/D,QAAQiE,WAEtBpD,EAAcb,QAAQiE,WAG3BrI,EAAeiI,iBACjBtG,EAAAyB,KAAAf,GAAAA,GAAuBiG,oBAAoB9D,GAAgBS,GAC3DtD,EAAAyB,KAAAf,GAAAA,GAAuBkG,qBAAqB/D,GAAgBS,IAG9DtD,EAAAyB,KAAAP,GAAAA,GAA0B2B,GAE1B,IAAI,IAAAgE,EAAAC,EAAAC,EAAAC,EACF,MAAMT,EAAM,QAAAM,EAAA,QAAAC,EAAA,QAAAC,EACVzD,EAAcL,aAAa,iBAAA,IADjB8D,OAAA,EACVA,EAAsCE,qBAAA,IAD5BH,EAAAA,EAAA,QAAAE,EAC6C3I,EAAekI,cAAA,IAD5DS,OAAA,EAC6CA,EAAuBC,qBAAA,IADpEJ,EAAAA,EACqF,MAE3FxD,QAAiB6D,MAAM5D,EAAcL,aAAa,WAAaK,EAAcL,aAAa,QAAS,CACvGsD,OAAQA,EACRY,KAAiB,QAAXZ,EAAAvG,EAAmByB,KAAnBV,GAAAA,GAAyCuC,EAAeT,EAAcxE,GAAkB,KAC9F+I,QAAS,CACPC,mBAAoB,oBAInBhE,EAASiE,SAGZtH,EAAMyB,KAANR,GAAAA,GAAqCoC,EAAUW,EAAM3F,SAFrD2B,EAAMyB,KAANT,GAAAA,GAAgCqC,EAAUC,GAI5C,MAAOoB,GACP6C,QAAQ7C,MAAMA,GAlBhB,QAoBE1E,EAAAyB,KAAAf,GAAAA,GAAuB8G,qBAAqB3E,GAAgBS,GAC5DtD,EAAAyB,KAAAN,GAAAA,GAAyB0B,8SC5ELS,EAAemE,GAAM,IAAAC,EAC3C,QAAAA,EAAApE,EAAc0B,cAAc,6BAAA,IAA5B0C,GAAAA,EAAmDC,UAAUC,OAAO,4BAA6BH,GAAAI,EAAAC,iBApC9F,MAAuB7B,cAAAzH,OAAA4H,eAAA3E,KAAAsG,EAAA,CAAAxJ,MAAAyJ,IAK5B/B,oBAAoB3C,GAClB,IAAKA,EAAc0B,cAAc,sBAAuB,CACtD,MAAMmC,EAAOxJ,SAASqH,cAAc,QAC9BiD,EAAahJ,KAAKC,MAAMiI,EAAK1E,QAAQyF,UAE3C5E,EAAc6E,mBAAmB,aAAcF,EAAUG,uBAQ7DnC,qBAAqB3C,GACnB+E,EAAA5G,KAAAsG,GAAAA,GAA6BzE,GAAA,GAO/B2C,qBAAqB3C,GACnB+E,EAAA5G,KAAAsG,GAAAA,GAA6BzE,GAAA,cC3BjC,SAAAgF,EAAArI,EAAAC,GAAA,IAAA1B,OAAA2B,UAAAC,eAAAC,KAAAJ,EAAAC,GAAA,MAAA,IAAAI,UAAA,kDAAA,OAAAL,0EAAA,IAAAsI,EAAA,EAAA,SAAAC,EAAA/H,GAAA,MAAA,aAAA8H,IAAA,IAAA9H,EAAA,IAAAgI,EAAAD,EAAA,YAAAE,EAAAF,EAAA,YAAAG,EAAAH,EAAA,2BAAAI,EAAAJ,EAAA,mCAAAK,EAAAL,EAAA,8BAAAM,EAAAN,EAAA,iCAAAO,EAAAP,EAAA,oCAAAQ,EAAAR,EAAA,0BAAAS,EAAAT,EAAA,uBAAA,SAAAU,EAoD2BtG,GACvBA,EAAYjD,iBAAiB,eAAeC,QAASuJ,IACnDA,EAAiBxB,UAAUyB,OAAO,gBAAA,SAAAC,EAQLC,GAAW,IAAAC,EAAAC,EAC1C,QAAAD,EAAAD,EAAU9G,QAAQ,cAAA,IAAlB+G,GAAA,QAAAC,EAAAD,EAA0BvE,cAAc,4BAAA,IAAxCwE,GAAAA,EAA8DJ,SAAA,SAAAK,EAQpCH,EAAWI,GACrCpB,EAAA7G,KAAAmH,GAAAA,GAAsCU,GAEtCA,EAAU3B,UAAUgC,IAAI,cAExBL,EACG9G,QAAQ,yCACR2F,mBAAmB,YAFtB,iCAAAlD,OAEoEyE,EAFpE,WAAA,SAAAE,EAS6BhH,GAC7B,IAAKA,EAAYoC,cAAc,aAC7B,OAGF,MAAM6E,EAAqBjH,EAAYoC,cAAc,eAErD,IAAK6E,EACH,OAGF,MAAMC,EAAQD,EAAmBrH,QAAQ,aAAaS,aAAa,MAEnEL,EAAYoC,cAAc,sBAAwB8E,EAAQ,MAAMC,QAEhEF,EAAmBG,QAAA,SAAAC,EAoDarH,EAAasH,GAC7C5B,EAAA7G,KAAAkH,GAAAA,GAA8B/F,GAG9BsH,EAASvK,iBAAiB,MAAMC,QAASuK,IACvC,IAAIC,EAAaD,EAAiB1H,QAAQrD,QAE1C,IAAI,MAAAgL,OAAA,EAAAA,EAAYpL,QAAS,EAAG,CAC1B,IAAIa,EAAOlC,SAAS0M,eAAeD,IAAexH,EAAYoC,cAAc,SAAWoF,EAAa,MAEhGvK,IAGFyI,EAAA7G,KAAAoH,GAAAA,GAAiChJ,EAAK,GAAIsK,EAAiBrM,WAC3DqM,EAAiBf,aAMwB,IAA3Cc,EAASvK,iBAAiB,MAAMX,QAClCkL,EAASd,SAGXd,EAAA7G,KAAAqH,GAAAA,GAAoClG,GACpC0F,EAAA7G,KAAAuH,GAAAA,GAA6BpG,GAAA,SAAA0H,GAMP1H,GAAa,IAAA2H,EACnC,IAAI,QAAAA,EAAA3H,EAAYJ,QAAQ,iBAAA,IAApB+H,OAAA,EAAAA,EAA+BvL,QAAS,EAC1C,OAGF,MAAMwL,EAAa5H,EAAYjD,iBAAiB,eAEhD,IAAK6K,GAAoC,IAAtBA,EAAWxL,OAC5B,OAGF,GAAAsJ,EAAI7G,KAAJwH,GAAAA,GAA8BrG,EAAYoC,cAAc,sBACtD,OAGF,IAAIO,EAAYiF,EAAWC,KAAK,GAAGrF,wBAAwBD,IAE3D,GAAImD,EAAA7G,KAAAiH,GAAAA,GAAegC,oBAAqB,CACtC,MAAMA,EAAsB/M,SAASqH,cAAcsD,EAAA7G,KAAAiH,GAAAA,GAAegC,qBAE9DA,IACFnF,GAAamF,EAAoBC,cAIrC1G,OAAOiB,SAAS,CAAEC,IAAKI,EAAWD,SAAU,WAAA,SAAAsF,GAGzBxL,GACnB,MAAMsL,EAAsB/M,SAASqH,cAAcsD,EAAA7G,KAAAiH,GAAAA,GAAegC,qBAClE,IAAInF,EAAY,EAEZmF,IACFnF,EAAYmF,EAAoBC,cAGlC,MAAME,EAAOzL,EAAQgG,wBAErB,OACEyF,EAAK1F,KAAOI,GACZsF,EAAKC,MAAQ,GACbD,EAAKE,SAAW9G,OAAO+G,aAAerN,SAASsN,gBAAgBN,eAC/DE,EAAKK,QAAUjH,OAAOkH,YAAcxN,SAASsN,gBAAgBG,aAAAC,EAAAC,cA/N5D,MAMLrF,cAA0B,IAAdsF,EAAcC,UAAAxM,OAAA,QAAA,IAAAwM,UAAA,GAAAA,UAAA,GAAJ,GAAIhN,OAAA4H,eAAA3E,KAAAwH,EAAA,CAAA1K,MAAAqM,KAAApM,OAAA4H,eAAA3E,KAAAuH,EAAA,CAAAzK,MAAA+L,KAAA9L,OAAA4H,eAAA3E,KAAAsH,EAAA,CAAAxK,MAAA0L,IAAAzL,OAAA4H,eAAA3E,KAAAqH,EAAA,CAAAvK,MAAAqL,IAAApL,OAAA4H,eAAA3E,KAAAoH,EAAA,CAAAtK,MAAAkL,IAAAjL,OAAA4H,eAAA3E,KAAAmH,EAAA,CAAArK,MAAA8K,IAAA7K,OAAA4H,eAAA3E,KAAAkH,EAAA,CAAApK,MAAA2K,IAAA1K,OAAA4H,eAAA3E,KAAAgH,EAAA,CAAApC,UAAA,EAAA9H,MALd,CACVmM,oBAAqB,QAIGlM,OAAA4H,eAAA3E,KAAAiH,EAAA,CAAArC,UAAA,EAAA9H,WAAA,IACxB+J,EAAA7G,KAAAiH,GAAAA,IAAA,EAAiBpL,EAAAW,eAAAqK,EAAc7G,KAAdgH,GAAAA,GAA8B8C,EAAS,IAQ1DtF,gBAAgBrD,GAKd,OAJAnB,KAAKY,2BAA2BO,GAChC0F,EAAA7G,KAAAqH,GAAAA,GAAoClG,GACpC0F,EAAA7G,KAAAuH,GAAAA,GAA6BpG,GAEtBnB,KAAKU,QAAQS,GAOtBqD,2BAA2BrD,GACzB0F,EAAA7G,KAAAkH,GAAAA,GAA8B/F,GAE9B,IAAK,MAAM6I,KAAS7I,EAAY8I,SACP,UAAnBD,EAAME,UAA2C,aAAnBF,EAAME,UAA8C,WAAnBF,EAAME,UAIpEF,EAAMG,kBACTtD,EAAA7G,KAAAoH,GAAAA,GAAiC4C,EAAOA,EAAMI,mBAEzCjJ,EAAYuD,gBACfvD,EAAYuD,cAAgB,IAG9BvD,EAAYuD,cAAchE,SAAA,GAgEhC8D,QAAQrD,GAAa,IAAAkJ,EACnB,QAAQ,QAAAA,EAAClJ,EAAYuD,qBAAA,IAAb2F,IAACA,EAA2B3J,SAOtC8D,eAAerD,GACbA,EAAYuD,cAAgB,CAC1BhE,SAAA,GASJ8D,wBAAwB3C,EAAeyI,GAAmB,IAAAC,EACxD,KAAM1I,aAAyBmD,iBAC7B,OAGF,MAAMwF,EAAY3I,EAAc0B,cAAc,eAG9C,QAAAgH,EAAArO,SAAS0M,eAAe,oBAAA,IAAxB2B,GAAAA,EAAsC5C,SAGlC9F,EAAcd,QAAQ,WAAayJ,EACrCA,EAAU9D,mBAAmB,aAAc4D,GAE3CzI,EAAc6E,mBAAmB,aAAc4D,GAGjDzD,EAAA7G,KAAAsH,GAAAA,GAAuCzF,EAAe3F,SAAS0M,eAAe,gBC3IhF,IAAItE,EAAAC,SAAS,IAAI6B,EAAAC,iBAAoB,IAAIuD,EAAAC,eNV3C","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport function mergeSettings(defaultSettings, constructorOptions, dataAttributeOptions) {\n  const mergedSettings = { ...defaultSettings, ...constructorOptions };\n\n  if (!dataAttributeOptions) {\n    return mergedSettings;\n  }\n\n  for (let [key, value] of Object.entries(dataAttributeOptions)) {\n    const keyStripped = lowerCaseFirstLetter(key.replace(\"ajaxForm\", \"\"));\n\n    if (keyStripped.length > 0 && typeof mergedSettings[keyStripped] !== \"undefined\") {\n      try {\n        mergedSettings[keyStripped] = JSON.parse(value);\n      } catch {\n        mergedSettings[keyStripped] = value;\n      }\n    }\n  }\n\n  return mergedSettings;\n}\n\nfunction lowerCaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n}\n\n/**\n * This function add downloads javascript code (e.g. after XHR requests) to the HTML documents <head>, so that the\n * javascript code can actually get executed.\n *\n * @param {HTMLElement} elementContainingScriptTags\n */\nexport function addScriptsToHead(elementContainingScriptTags) {\n  for (const ajaxScriptElement of elementContainingScriptTags.getElementsByTagName(\"script\")) {\n    const scriptElement = document.createElement(\"script\");\n    if (!ajaxScriptElement.src) {\n      scriptElement.innerHTML = ajaxScriptElement.innerHTML;\n    } else {\n      scriptElement.src = ajaxScriptElement.src;\n    }\n    document.head.appendChild(scriptElement);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { addScriptsToHead, mergeSettings } from \"./utils\";\nimport { delegateEvent } from \"./event-handler\";\n\nexport class AjaxForm {\n  #loadingIndicator;\n  #formValidator;\n  #defaults = {\n    completeCallback: null,\n    targetElement: \"#content\",\n    loadingOverlay: true,\n    customFormData: null,\n    method: null,\n  };\n\n  /**\n   *\n   * @param {LoadingIndicator} loadingIndicator\n   * @param {FormValidator} formValidator\n   */\n  constructor(loadingIndicator, formValidator) {\n    this.#loadingIndicator = loadingIndicator;\n    this.#formValidator = formValidator;\n\n    this.#init();\n  }\n\n  #init() {\n    this.#registerClickedSubmitButton();\n\n    delegateEvent(document, \"click\", 'a[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      await this.performAjaxRequest(elem);\n    });\n\n    delegateEvent(document, \"submit\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      event.preventDefault();\n\n      this.#formValidator.setFormAsValid(elem);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.before\", { detail: this }));\n\n      if (this.#formValidator.isValid(elem) && this.#formValidator.preValidateForm(elem)) {\n        await this.performAjaxRequest(elem);\n      }\n    });\n\n    delegateEvent(document, \"change\", 'form[data-ajax-form=\"true\"]', async (event, elem) => {\n      if (this.#formValidator.isValid(elem) === false) {\n        this.#formValidator.checkFormElementsForErrors(elem);\n      }\n    });\n  }\n\n  #registerClickedSubmitButton() {\n    delegateEvent(document, \"click\", 'form[data-ajax-form=\"true\"] [type=\"submit\"]', (event, submitElem) => {\n      submitElem\n        .closest(\"form\")\n        .querySelectorAll(\"[type=submit]\")\n        .forEach((elem) => {\n          delete elem.dataset[\"clicked\"];\n        });\n      submitElem.dataset.clicked = \"true\";\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async performAjaxRequest(targetElement) {\n    const mergedSettings = mergeSettings(this.#defaults, {}, targetElement.dataset);\n    let hash, submitButton;\n\n    if (targetElement instanceof HTMLFormElement) {\n      submitButton = targetElement.querySelector('[type=\"submit\"][data-clicked=\"true\"]');\n\n      hash = submitButton?.dataset.hashChange;\n    } else {\n      hash = targetElement.dataset.hashChange;\n    }\n\n    if (mergedSettings.loadingOverlay) {\n      this.#loadingIndicator.addLoadingIndicator(submitButton || targetElement);\n      this.#loadingIndicator.showLoadingIndicator(submitButton || targetElement);\n    }\n\n    this.#disableSubmitButton(submitButton);\n\n    try {\n      const method =\n        targetElement.getAttribute(\"method\")?.toUpperCase() ?? mergedSettings.method?.toUpperCase() ?? \"GET\";\n\n      const response = await fetch(targetElement.getAttribute(\"action\") || targetElement.getAttribute(\"href\"), {\n        method: method,\n        body: method !== \"GET\" ? this.#prepareFormData(targetElement, submitButton, mergedSettings) : null,\n        headers: {\n          \"X-Requested-With\": \"XMLHttpRequest\",\n        },\n      });\n\n      if (!response.ok) {\n        await this.#handleResponseError(response, targetElement);\n      } else {\n        await this.#handleSuccessfulResponse(response, hash, mergedSettings);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.#loadingIndicator.hideLoadingIndicator(submitButton || targetElement);\n      this.#enableSubmitButton(submitButton);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} submitButton\n   * @param {Record<string, any>} mergedSettings\n   * @returns {FormData}\n   */\n  #prepareFormData(formElement, submitButton, mergedSettings) {\n    const initialData = mergedSettings.customFormData || {};\n    let data;\n\n    if (formElement.getAttribute(\"method\")) {\n      data = new FormData(formElement);\n\n      if (submitButton) {\n        data.append(submitButton.getAttribute(\"name\"), \"1\");\n      }\n    } else {\n      data = new FormData();\n    }\n\n    for (let [key, value] of Object.entries(initialData)) {\n      data.append(key, value);\n    }\n\n    return data;\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {HTMLElement} targetElement\n   * @returns {Promise<void>}\n   */\n  async #handleResponseError(response, targetElement) {\n    const responseData = await response.clone().text();\n\n    if (response.status === 400) {\n      this.#formValidator.handleFormErrorMessages(targetElement, responseData);\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.submit.fail\", { detail: this }));\n    } else if (responseData.length > 0) {\n      document.open();\n      document.write(responseData);\n      document.close();\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @param {string} hash\n   * @param {Record<string, any>} mergedSettings\n   * @returns {Promise<void>}\n   */\n  async #handleSuccessfulResponse(response, hash, mergedSettings) {\n    const responseData = await this.#decodeResponse(response);\n\n    if (typeof window[mergedSettings.completeCallback] === \"function\") {\n      window[mergedSettings.completeCallback](responseData);\n    } else if (responseData.redirect_url) {\n      this.#redirectToNewPage(hash, responseData);\n    } else {\n      this.#replaceContent(hash, responseData, mergedSettings);\n      this.#scrollIntoView(hash, mergedSettings);\n\n      if (hash !== undefined) {\n        window.location.hash = hash;\n      }\n\n      document.dispatchEvent(new CustomEvent(\"acp3.ajaxFrom.complete\"));\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #disableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = true;\n    }\n  }\n\n  /**\n   *\n   * @param {Element} submitButton\n   */\n  #enableSubmitButton(submitButton) {\n    if (submitButton) {\n      submitButton.disabled = false;\n    }\n  }\n\n  /**\n   *\n   * @param {Response} response\n   * @returns {Promise<*>}\n   */\n  async #decodeResponse(response) {\n    try {\n      return await response.clone().json();\n    } catch (error) {\n      return await response.clone().text();\n    }\n  }\n\n  #redirectToNewPage(hash, responseData) {\n    if (hash !== undefined) {\n      window.location.href = responseData.redirect_url + hash;\n      window.location.reload();\n    } else {\n      window.location.href = responseData.redirect_url;\n    }\n  }\n\n  #scrollIntoView(hash, mergedSettings) {\n    setTimeout(() => {\n      if (hash) {\n        const targetElement = document.querySelector(`[data-hash-change=\"${hash}\"]`);\n\n        window.scrollTo({ top: targetElement.getBoundingClientRect().y, behavior: \"smooth\" });\n      } else {\n        const targetElement = document.querySelector(mergedSettings.targetElement);\n        const offsetTop = targetElement.getBoundingClientRect().y;\n\n        if (document.scrollTop > offsetTop) {\n          window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n        }\n      }\n    });\n  }\n\n  #replaceContent(hash, responseData, mergedSettings) {\n    let targetElement;\n    let updatedContentData;\n\n    if (hash && document.querySelector(hash)) {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(responseData, \"text/html\");\n\n      targetElement = document.querySelector(hash);\n      updatedContentData = doc.querySelector(hash).innerHTML;\n    } else {\n      targetElement = document.querySelector(mergedSettings.targetElement);\n      updatedContentData = responseData;\n    }\n\n    targetElement.innerHTML = updatedContentData;\n    addScriptsToHead(targetElement);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nexport class LoadingIndicator {\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  addLoadingIndicator(targetElement) {\n    if (!targetElement.querySelector(\".loading-indicator\")) {\n      const body = document.querySelector(\"body\");\n      const jsSvgIcons = JSON.parse(body.dataset.svgIcons);\n\n      targetElement.insertAdjacentHTML(\"afterbegin\", jsSvgIcons[\"loadingIndicatorIcon\"]);\n    }\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  showLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, true);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   */\n  hideLoadingIndicator(targetElement) {\n    this.#toggleLoadingIndicator(targetElement, false);\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {Boolean} show\n   */\n  #toggleLoadingIndicator(targetElement, show) {\n    targetElement.querySelector(\".loading-indicator\")?.classList.toggle(\"loading-indicator__active\", show);\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nimport { mergeSettings } from \"./utils\";\n\nexport class FormValidator {\n  #defaults = {\n    scrollOffsetElement: null,\n  };\n  #settings;\n\n  constructor(options = {}) {\n    this.#settings = mergeSettings(this.#defaults, options, {});\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  preValidateForm(formElement) {\n    this.checkFormElementsForErrors(formElement);\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n\n    return this.isValid(formElement);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  checkFormElementsForErrors(formElement) {\n    this.#removeAllPreviousErrors(formElement);\n\n    for (const field of formElement.elements) {\n      if (field.nodeName !== \"INPUT\" && field.nodeName !== \"TEXTAREA\" && field.nodeName !== \"SELECT\") {\n        continue;\n      }\n\n      if (!field.checkValidity()) {\n        this.#addErrorMessageToFormField(field, field.validationMessage);\n\n        if (!formElement.formValidator) {\n          formElement.formValidator = {};\n        }\n\n        formElement.formValidator.isValid = false;\n      }\n    }\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #removeAllPreviousErrors(formElement) {\n    formElement.querySelectorAll(\".is-invalid\").forEach((invalidFormField) => {\n      invalidFormField.classList.remove(\"is-invalid\");\n    });\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   */\n  #removeErrorMessageFromFormField(formField) {\n    formField.closest(\"div\")?.querySelector(\".invalid-feedback\")?.remove();\n  }\n\n  /**\n   *\n   * @param {HTMLElement} formField\n   * @param {string} errorMessage\n   */\n  #addErrorMessageToFormField(formField, errorMessage) {\n    this.#removeErrorMessageFromFormField(formField);\n\n    formField.classList.add(\"is-invalid\");\n\n    formField\n      .closest(\"div:not(.input-group):not(.btn-group)\")\n      .insertAdjacentHTML(\"beforeend\", `<div class=\"invalid-feedback\">${errorMessage}</div>`);\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  #focusTabWithFirstErrorMessage(formElement) {\n    if (!formElement.querySelector(\".nav-tabs\")) {\n      return;\n    }\n\n    const firstElemWithError = formElement.querySelector(\".is-invalid\");\n\n    if (!firstElemWithError) {\n      return;\n    }\n\n    const tabId = firstElemWithError.closest(\".tab-pane\").getAttribute(\"id\");\n\n    formElement.querySelector('.nav-tabs a[href=\"#' + tabId + '\"]').click();\n\n    firstElemWithError.focus();\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @returns {boolean}\n   */\n  isValid(formElement) {\n    return !!formElement.formValidator?.isValid;\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   */\n  setFormAsValid(formElement) {\n    formElement.formValidator = {\n      isValid: true,\n    };\n  }\n\n  /**\n   *\n   * @param {HTMLElement} targetElement\n   * @param {string} errorMessagesHtml\n   */\n  handleFormErrorMessages(targetElement, errorMessagesHtml) {\n    if (!(targetElement instanceof HTMLFormElement)) {\n      return;\n    }\n\n    const modalBody = targetElement.querySelector(\".modal-body\");\n\n    // Remove the old - possible existing - error-box\n    document.getElementById(\"error-box\")?.remove();\n\n    // Place the error messages inside the modal body for a better styling\n    if (targetElement.closest(\".modal\") && modalBody) {\n      modalBody.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    } else {\n      targetElement.insertAdjacentHTML(\"afterbegin\", errorMessagesHtml);\n    }\n\n    this.#prettyPrintResponseErrorMessages(targetElement, document.getElementById(\"error-box\"));\n  }\n\n  /**\n   *\n   * @param {HTMLFormElement} formElement\n   * @param {HTMLElement} errorBox\n   */\n  #prettyPrintResponseErrorMessages(formElement, errorBox) {\n    this.#removeAllPreviousErrors(formElement);\n\n    // highlight all input fields where the validation has failed\n    errorBox.querySelectorAll(\"li\").forEach((errorMessageLine) => {\n      let errorClass = errorMessageLine.dataset.element;\n\n      if (errorClass?.length > 0) {\n        let elem = document.getElementById(errorClass) || formElement.querySelector('[id|=\"' + errorClass + '\"]');\n\n        if (elem) {\n          // Move the error message to the responsible input field(s)\n          // and remove the list item from the error box container\n          this.#addErrorMessageToFormField(elem[0], errorMessageLine.innerHTML);\n          errorMessageLine.remove();\n        }\n      }\n    });\n\n    // if all list items have been removed, remove the error box container too\n    if (errorBox.querySelectorAll(\"li\").length === 0) {\n      errorBox.remove();\n    }\n\n    this.#focusTabWithFirstErrorMessage(formElement);\n    this.#scrollToFirstFormError(formElement);\n  }\n\n  /**\n   * @param {HTMLFormElement} formElement\n   */\n  #scrollToFirstFormError(formElement) {\n    if (formElement.closest(\".modal\")?.length > 0) {\n      return;\n    }\n\n    const formErrors = formElement.querySelectorAll(\".is-invalid\");\n\n    if (!formErrors || formErrors.length === 0) {\n      return;\n    }\n\n    if (this.#isElementInViewport(formElement.querySelector(\".invalid-feedback\"))) {\n      return;\n    }\n\n    let offsetTop = formErrors.item(0).getBoundingClientRect().top;\n\n    if (this.#settings.scrollOffsetElement) {\n      const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n\n      if (scrollOffsetElement) {\n        offsetTop -= scrollOffsetElement.clientHeight;\n      }\n    }\n\n    window.scrollTo({ top: offsetTop, behavior: \"smooth\" });\n  }\n\n  #isElementInViewport(element) {\n    const scrollOffsetElement = document.querySelector(this.#settings.scrollOffsetElement);\n    let offsetTop = 0;\n\n    if (scrollOffsetElement) {\n      offsetTop = scrollOffsetElement.clientHeight;\n    }\n\n    const rect = element.getBoundingClientRect();\n\n    return (\n      rect.top >= offsetTop &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth)\n    );\n  }\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licencing details.\n */\n\nimport { AjaxForm } from \"../lib/ajax-form\";\nimport { LoadingIndicator } from \"../lib/loading-indicator\";\nimport { FormValidator } from \"../lib/form-validator\";\n\n(() => {\n  new AjaxForm(new LoadingIndicator(), new FormValidator());\n})();\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"ajax-form.min.js"}