{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/mass-action.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/mass-action.js"],"names":["_$eventHandler_1","element","eventName","selectorOrTargetElement","handler","addEventListener","event","elems","document","querySelectorAll","forEach","elem","contains","target","markAllRowsCheckboxElem","action","_markAllRowsCheckboxE","closest","dispatchEvent","CustomEvent","detail","bubbles","_$massAction_2","highlightTableRow","massActionBarElem","tableElem","checkboxName","dataset","delegateEvent","type","nodeName","rowCheckbox","querySelector","concat","checked","classList","add","selectedRowCssClassName","toggle","tbodyElem","visibleSelectedTableRows","length","visibleMassActionCheckboxes","indeterminate","deleteMarkedResults","massDeleteButtonElem","options","settings","checkBoxName","language","confirmationTextSingle","confirmationTextMultiple","preventDefault","selectedMassActionCheckboxes","modalElem","modal","bootstrap","Modal","getOrCreateInstance","innerHTML","replace","toString","show","markAllElem","tableIdentifier","id","massActionBar","getElementById","highlightAllTableRows","JSON","parse","deleteOptions"],"mappings":"CAAA,WACA,IAAAA,EAAA,oECWO,SAAuBC,EAASC,EAAWC,EAAyBC,GACzEH,EAAQI,iBAAiBH,EAAYI,IACnC,GAAuC,iBAA5BH,EAAsC,CAC/C,MAAMI,EAAQC,SAASC,iBAAiBN,GAExC,IAAKI,EACH,OAGFA,EAAMG,QAASC,IACTA,GAAQA,EAAKC,SAASN,EAAMO,SAC9BT,EAAQE,EAAOK,UAGVR,GAA2BA,EAAwBS,SAASN,EAAMO,SAC3ET,EAAQE,EAAOH,wFCVd,SAA+BW,EAAyBC,GAAQ,IAAAC,EACrE,QAAAA,EAAAF,EACGG,QAAQ,SACRR,iBAAiB,uDAAA,IAFpBO,GAAAA,EAGIN,QAASC,IACTA,EAAKO,cAAc,IAAIC,YAAY,QAAS,CAAEC,OAAQL,EAAQM,SAAA,QAASC,EAAAC,kBAUtE,SAA2BT,EAAyBU,GACzD,MAAMC,EAAYX,EAAwBG,QAAQ,SAC5CS,EAAeZ,EAAwBa,QAAQD,cAAA,EAErD1B,EAAA4B,eAAcH,EAAW,QAAS,kCAAmC,CAACnB,EAAOK,KAC3E,MAAMI,EAAST,EAAMc,OAErB,GAA0B,aAAtBd,EAAMO,OAAOgB,KAAqB,CACpC,GAA8B,MAA1BvB,EAAMO,OAAOiB,UAAoBxB,EAAMO,OAAOI,QAAQ,KACxD,OAGF,MAAMc,EAAcpB,EAAKqB,cAAL,eAAAC,OAAkCP,EAAlC,SACpBK,EAAYG,SAAWH,EAAYG,SAAsB,QAAXnB,EAGjC,QAAXA,EACFJ,EAAKwB,UAAUC,IAAIC,GAEnB1B,EAAKwB,UAAUG,OAAOD,GAa5B,SAAiCvB,EAAyBY,EAAcF,GACtE,MAAMe,EAAYzB,EAAwBG,QAAQ,SAASe,cAAc,SACnEQ,EAA2BD,EAAU9B,iBAAV,MAAAwB,OAAiCI,EAAjC,kBAAyEI,OACpGC,EAA8BH,EAAU9B,iBAAV,+BAAAwB,OACHP,EADG,SAElCe,OAEF3B,EAAwB6B,cACtBH,EAA2B,GAAKE,IAAgCF,EAClE1B,EAAwBoB,QACtBM,EAA2B,GAAKE,IAAgCF,EAE9DhB,GACFA,EAAkBW,UAAUG,OAAO,SAAuC,IAA7BE,GAbjD,CAV4B1B,EAAyBY,EAAcF,MAAAF,EAAAsB,oBAgC5D,SAA6BC,EAAsBC,GACxD,MAOMC,EAAW,CANfC,aAAc,GACdC,SAAU,CACRC,uBAAwB,GACxBC,yBAA0B,OAGKL,GAEnCD,EAAqBxC,iBAAiB,QAAUC,IAC9CA,EAAM8C,iBAEN,MAAMC,EAA+BR,EAClC5B,QAAQ,SACRR,iBAAiB,eAAiBsC,EAASC,aAAe,gBAEvDM,EAAYT,EAAqB5B,QAAQ,QAAQe,cAAc,yBAC/DuB,EAAQC,UAAUC,MAAMC,oBAAoBJ,GAElDA,EAAUtB,cAAc,eAAe2B,UACG,IAAxCN,EAA6BZ,OACzBM,EAASE,SAASC,uBAClBH,EAASE,SAASE,yBAAyBS,QAAQ,UAAWP,EAA6BZ,OAAOoB,YAExGN,EAAMO,UAtGV,MAAMzB,EAA0B,aCPhC7B,SAASC,iBAAiB,sBAAsBC,QAASqD,IAEvD,MAAMC,EAAkBD,EAAY9C,QAAQ,SAASgD,GAC/CC,EAAgB1D,SAAS2D,eAAT,GAAAlC,OAA2B+B,EAA3B,qBAEtBD,EAAY1D,iBAAiB,QAAS,KAAA,EACpCiB,EAAA8C,uBAAsBL,EAAaA,EAAY7B,QAAU,MAAQ,YAAA,EAGnEZ,EAAAC,mBAAkBwC,EAAaG,IAAA,EAE/B5C,EAAAsB,qBACEpC,SAAS2D,eAAT,GAAAlC,OAA2B+B,EAA3B,iBACAK,KAAKC,MAAMP,EAAYpC,QAAQ4C,kBHfnC","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\n/* global bootstrap */\n\nimport { delegateEvent } from \"./event-handler\";\n\nconst selectedRowCssClassName = \"table-info\";\n\n/**\n * Marks all visible results\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} action\n */\nexport function highlightAllTableRows(markAllRowsCheckboxElem, action) {\n  markAllRowsCheckboxElem\n    .closest(\"table\")\n    .querySelectorAll(\"tbody tr:not(.d-none):not(.sub-table-header)\")\n    ?.forEach((elem) => {\n      elem.dispatchEvent(new CustomEvent(\"click\", { detail: action, bubbles: true }));\n    });\n}\n\n/**\n * Highlights a single table row\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {HTMLElement} massActionBarElem\n */\nexport function highlightTableRow(markAllRowsCheckboxElem, massActionBarElem) {\n  const tableElem = markAllRowsCheckboxElem.closest(\"table\");\n  const checkboxName = markAllRowsCheckboxElem.dataset.checkboxName;\n\n  delegateEvent(tableElem, \"click\", \"tbody tr:not(.sub-table-header)\", (event, elem) => {\n    const action = event.detail;\n\n    if (event.target.type !== \"checkbox\") {\n      if (event.target.nodeName === \"A\" || event.target.closest(\"a\")) {\n        return;\n      }\n\n      const rowCheckbox = elem.querySelector(`input[name=\"${checkboxName}[]\"]`);\n      rowCheckbox.checked = !rowCheckbox.checked || action === \"add\";\n    }\n\n    if (action === \"add\") {\n      elem.classList.add(selectedRowCssClassName);\n    } else {\n      elem.classList.toggle(selectedRowCssClassName);\n    }\n\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem);\n  });\n}\n\n/**\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} checkboxName\n * @param {HTMLElement} massActionBarElem\n */\nfunction setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem) {\n  const tbodyElem = markAllRowsCheckboxElem.closest(\"table\").querySelector(\"tbody\");\n  const visibleSelectedTableRows = tbodyElem.querySelectorAll(`tr.${selectedRowCssClassName}:not(.d-none)`).length;\n  const visibleMassActionCheckboxes = tbodyElem.querySelectorAll(\n    `tr:not(.d-none) input[name=\"${checkboxName}[]\"]`\n  ).length;\n\n  markAllRowsCheckboxElem.indeterminate =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes !== visibleSelectedTableRows;\n  markAllRowsCheckboxElem.checked =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes === visibleSelectedTableRows;\n\n  if (massActionBarElem) {\n    massActionBarElem.classList.toggle(\"d-none\", visibleSelectedTableRows === 0);\n  }\n}\n\n/**\n *\n * @param {HTMLElement} massDeleteButtonElem\n * @param options\n */\nexport function deleteMarkedResults(massDeleteButtonElem, options) {\n  const defaults = {\n    checkBoxName: \"\",\n    language: {\n      confirmationTextSingle: \"\",\n      confirmationTextMultiple: \"\",\n    },\n  };\n  const settings = { ...defaults, ...options };\n\n  massDeleteButtonElem.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    const selectedMassActionCheckboxes = massDeleteButtonElem\n      .closest(\"table\")\n      .querySelectorAll('input[name=\"' + settings.checkBoxName + '[]\"]:checked');\n\n    const modalElem = massDeleteButtonElem.closest(\"form\").querySelector(\".js-mass-delete-modal\");\n    const modal = bootstrap.Modal.getOrCreateInstance(modalElem);\n\n    modalElem.querySelector(\".modal-body\").innerHTML =\n      selectedMassActionCheckboxes.length === 1\n        ? settings.language.confirmationTextSingle\n        : settings.language.confirmationTextMultiple.replace(\"{items}\", selectedMassActionCheckboxes.length.toString());\n\n    modal.show();\n  });\n}\n","import { highlightAllTableRows, highlightTableRow, deleteMarkedResults } from \"../lib/mass-action\";\n\ndocument.querySelectorAll(\"[data-mark-all-id]\").forEach((markAllElem) => {\n  // Get the unique identifier of the grid, so that we can find the element responsible for the mass actions\n  const tableIdentifier = markAllElem.closest(\"table\").id;\n  const massActionBar = document.getElementById(`${tableIdentifier}-mass-delete-bar`);\n\n  markAllElem.addEventListener(\"click\", () =>\n    highlightAllTableRows(markAllElem, markAllElem.checked ? \"add\" : \"remove\")\n  );\n\n  highlightTableRow(markAllElem, massActionBar);\n\n  deleteMarkedResults(\n    document.getElementById(`${tableIdentifier}-mass-delete`),\n    JSON.parse(markAllElem.dataset.deleteOptions)\n  );\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2stZmxhdC9fcHJlbHVkZSIsIkFDUDMvTW9kdWxlcy9BQ1AzL1N5c3RlbS9SZXNvdXJjZXMvQXNzZXRzL2pzL2xpYi9ldmVudC1oYW5kbGVyLmpzIiwiQUNQMy9Nb2R1bGVzL0FDUDMvU3lzdGVtL1Jlc291cmNlcy9Bc3NldHMvanMvbGliL21hc3MtYWN0aW9uLmpzIiwiQUNQMy9Nb2R1bGVzL0FDUDMvU3lzdGVtL1Jlc291cmNlcy9Bc3NldHMvanMvcGFydGlhbHMvbWFzcy1hY3Rpb24uanMiXSwibmFtZXMiOlsiXyRldmVudEhhbmRsZXJfMSIsImVsZW1lbnQiLCJldmVudE5hbWUiLCJzZWxlY3Rvck9yVGFyZ2V0RWxlbWVudCIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJlbGVtcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbGVtIiwiY29udGFpbnMiLCJ0YXJnZXQiLCJtYXJrQWxsUm93c0NoZWNrYm94RWxlbSIsImFjdGlvbiIsIl9tYXJrQWxsUm93c0NoZWNrYm94RSIsImNsb3Nlc3QiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJidWJibGVzIiwiXyRtYXNzQWN0aW9uXzIiLCJoaWdobGlnaHRUYWJsZVJvdyIsIm1hc3NBY3Rpb25CYXJFbGVtIiwidGFibGVFbGVtIiwiY2hlY2tib3hOYW1lIiwiZGF0YXNldCIsImRlbGVnYXRlRXZlbnQiLCJ0eXBlIiwibm9kZU5hbWUiLCJyb3dDaGVja2JveCIsInF1ZXJ5U2VsZWN0b3IiLCJjb25jYXQiLCJjaGVja2VkIiwiY2xhc3NMaXN0IiwiYWRkIiwic2VsZWN0ZWRSb3dDc3NDbGFzc05hbWUiLCJ0b2dnbGUiLCJ0Ym9keUVsZW0iLCJ2aXNpYmxlU2VsZWN0ZWRUYWJsZVJvd3MiLCJsZW5ndGgiLCJ2aXNpYmxlTWFzc0FjdGlvbkNoZWNrYm94ZXMiLCJpbmRldGVybWluYXRlIiwiZGVsZXRlTWFya2VkUmVzdWx0cyIsIm1hc3NEZWxldGVCdXR0b25FbGVtIiwib3B0aW9ucyIsInNldHRpbmdzIiwiY2hlY2tCb3hOYW1lIiwibGFuZ3VhZ2UiLCJjb25maXJtYXRpb25UZXh0U2luZ2xlIiwiY29uZmlybWF0aW9uVGV4dE11bHRpcGxlIiwicHJldmVudERlZmF1bHQiLCJzZWxlY3RlZE1hc3NBY3Rpb25DaGVja2JveGVzIiwibW9kYWxFbGVtIiwibW9kYWwiLCJib290c3RyYXAiLCJNb2RhbCIsImdldE9yQ3JlYXRlSW5zdGFuY2UiLCJpbm5lckhUTUwiLCJyZXBsYWNlIiwidG9TdHJpbmciLCJzaG93IiwibWFya0FsbEVsZW0iLCJ0YWJsZUlkZW50aWZpZXIiLCJpZCIsIm1hc3NBY3Rpb25CYXIiLCJnZXRFbGVtZW50QnlJZCIsImhpZ2hsaWdodEFsbFRhYmxlUm93cyIsIkpTT04iLCJwYXJzZSIsImRlbGV0ZU9wdGlvbnMiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0EsSUFBQUEsRUFBQSxvRUNXTyxTQUF1QkMsRUFBU0MsRUFBV0MsRUFBeUJDLEdBQ3pFSCxFQUFRSSxpQkFBaUJILEVBQVlJLElBQ25DLEdBQXVDLGlCQUE1QkgsRUFBc0MsQ0FDL0MsTUFBTUksRUFBUUMsU0FBU0MsaUJBQWlCTixHQUV4QyxJQUFLSSxFQUNILE9BR0ZBLEVBQU1HLFFBQVNDLElBQ1RBLEdBQVFBLEVBQUtDLFNBQVNOLEVBQU1PLFNBQzlCVCxFQUFRRSxFQUFPSyxVQUdWUixHQUEyQkEsRUFBd0JTLFNBQVNOLEVBQU1PLFNBQzNFVCxFQUFRRSxFQUFPSCx3RkNWZCxTQUErQlcsRUFBeUJDLEdBQVEsSUFBQUMsRUFDckUsUUFBQUEsRUFBQUYsRUFDR0csUUFBUSxTQUNSUixpQkFBaUIsdURBQUEsSUFGcEJPLEdBQUFBLEVBR0lOLFFBQVNDLElBQ1RBLEVBQUtPLGNBQWMsSUFBSUMsWUFBWSxRQUFTLENBQUVDLE9BQVFMLEVBQVFNLFNBQUEsUUFBU0MsRUFBQUMsa0JBVXRFLFNBQTJCVCxFQUF5QlUsR0FDekQsTUFBTUMsRUFBWVgsRUFBd0JHLFFBQVEsU0FDNUNTLEVBQWVaLEVBQXdCYSxRQUFRRCxjQUFBLEVBRXJEMUIsRUFBQTRCLGVBQWNILEVBQVcsUUFBUyxrQ0FBbUMsQ0FBQ25CLEVBQU9LLEtBQzNFLE1BQU1JLEVBQVNULEVBQU1jLE9BRXJCLEdBQTBCLGFBQXRCZCxFQUFNTyxPQUFPZ0IsS0FBcUIsQ0FDcEMsR0FBOEIsTUFBMUJ2QixFQUFNTyxPQUFPaUIsVUFBb0J4QixFQUFNTyxPQUFPSSxRQUFRLEtBQ3hELE9BR0YsTUFBTWMsRUFBY3BCLEVBQUtxQixjQUFMLGVBQUFDLE9BQWtDUCxFQUFsQyxTQUNwQkssRUFBWUcsU0FBV0gsRUFBWUcsU0FBc0IsUUFBWG5CLEVBR2pDLFFBQVhBLEVBQ0ZKLEVBQUt3QixVQUFVQyxJQUFJQyxHQUVuQjFCLEVBQUt3QixVQUFVRyxPQUFPRCxHQWE1QixTQUFpQ3ZCLEVBQXlCWSxFQUFjRixHQUN0RSxNQUFNZSxFQUFZekIsRUFBd0JHLFFBQVEsU0FBU2UsY0FBYyxTQUNuRVEsRUFBMkJELEVBQVU5QixpQkFBVixNQUFBd0IsT0FBaUNJLEVBQWpDLGtCQUF5RUksT0FDcEdDLEVBQThCSCxFQUFVOUIsaUJBQVYsK0JBQUF3QixPQUNIUCxFQURHLFNBRWxDZSxPQUVGM0IsRUFBd0I2QixjQUN0QkgsRUFBMkIsR0FBS0UsSUFBZ0NGLEVBQ2xFMUIsRUFBd0JvQixRQUN0Qk0sRUFBMkIsR0FBS0UsSUFBZ0NGLEVBRTlEaEIsR0FDRkEsRUFBa0JXLFVBQVVHLE9BQU8sU0FBdUMsSUFBN0JFLEdBYmpELENBVjRCMUIsRUFBeUJZLEVBQWNGLE1BQUFGLEVBQUFzQixvQkFnQzVELFNBQTZCQyxFQUFzQkMsR0FDeEQsTUFPTUMsRUFBVyxDQU5mQyxhQUFjLEdBQ2RDLFNBQVUsQ0FDUkMsdUJBQXdCLEdBQ3hCQyx5QkFBMEIsT0FHS0wsR0FFbkNELEVBQXFCeEMsaUJBQWlCLFFBQVVDLElBQzlDQSxFQUFNOEMsaUJBRU4sTUFBTUMsRUFBK0JSLEVBQ2xDNUIsUUFBUSxTQUNSUixpQkFBaUIsZUFBaUJzQyxFQUFTQyxhQUFlLGdCQUV2RE0sRUFBWVQsRUFBcUI1QixRQUFRLFFBQVFlLGNBQWMseUJBQy9EdUIsRUFBUUMsVUFBVUMsTUFBTUMsb0JBQW9CSixHQUVsREEsRUFBVXRCLGNBQWMsZUFBZTJCLFVBQ0csSUFBeENOLEVBQTZCWixPQUN6Qk0sRUFBU0UsU0FBU0MsdUJBQ2xCSCxFQUFTRSxTQUFTRSx5QkFBeUJTLFFBQVEsVUFBV1AsRUFBNkJaLE9BQU9vQixZQUV4R04sRUFBTU8sVUF0R1YsTUFBTXpCLEVBQTBCLGFDUGhDN0IsU0FBU0MsaUJBQWlCLHNCQUFzQkMsUUFBU3FELElBRXZELE1BQU1DLEVBQWtCRCxFQUFZOUMsUUFBUSxTQUFTZ0QsR0FDL0NDLEVBQWdCMUQsU0FBUzJELGVBQVQsR0FBQWxDLE9BQTJCK0IsRUFBM0IscUJBRXRCRCxFQUFZMUQsaUJBQWlCLFFBQVMsS0FBQSxFQUNwQ2lCLEVBQUE4Qyx1QkFBc0JMLEVBQWFBLEVBQVk3QixRQUFVLE1BQVEsWUFBQSxFQUduRVosRUFBQUMsbUJBQWtCd0MsRUFBYUcsSUFBQSxFQUUvQjVDLEVBQUFzQixxQkFDRXBDLFNBQVMyRCxlQUFULEdBQUFsQyxPQUEyQitCLEVBQTNCLGlCQUNBSyxLQUFLQyxNQUFNUCxFQUFZcEMsUUFBUTRDLGtCSGZuQyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1xuIiwiLypcbiAqIENvcHlyaWdodCAoYykgYnkgdGhlIEFDUDMgRGV2ZWxvcGVycy5cbiAqIFNlZSB0aGUgTElDRU5DRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgbW9kdWxlIGRpcmVjdG9yeSBmb3IgbGljZW5jaW5nIGRldGFpbHMuXG4gKi9cblxuLyoqXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxEb2N1bWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHBhcmFtIHtzdHJpbmd8SFRNTEVsZW1lbnR9IHNlbGVjdG9yT3JUYXJnZXRFbGVtZW50XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBoYW5kbGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxlZ2F0ZUV2ZW50KGVsZW1lbnQsIGV2ZW50TmFtZSwgc2VsZWN0b3JPclRhcmdldEVsZW1lbnQsIGhhbmRsZXIpIHtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgKGV2ZW50KSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzZWxlY3Rvck9yVGFyZ2V0RWxlbWVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgZWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yT3JUYXJnZXRFbGVtZW50KTtcblxuICAgICAgaWYgKCFlbGVtcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVsZW1zLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgaWYgKGVsZW0gJiYgZWxlbS5jb250YWlucyhldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgaGFuZGxlcihldmVudCwgZWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3JPclRhcmdldEVsZW1lbnQgJiYgc2VsZWN0b3JPclRhcmdldEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgaGFuZGxlcihldmVudCwgc2VsZWN0b3JPclRhcmdldEVsZW1lbnQpO1xuICAgIH1cbiAgfSk7XG59XG4iLCIvKlxuICogQ29weXJpZ2h0IChjKSBieSB0aGUgQUNQMyBEZXZlbG9wZXJzLlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBtb2R1bGUgZGlyZWN0b3J5IGZvciBsaWNlbnNpbmcgZGV0YWlscy5cbiAqL1xuXG4vKiBnbG9iYWwgYm9vdHN0cmFwICovXG5cbmltcG9ydCB7IGRlbGVnYXRlRXZlbnQgfSBmcm9tIFwiLi9ldmVudC1oYW5kbGVyXCI7XG5cbmNvbnN0IHNlbGVjdGVkUm93Q3NzQ2xhc3NOYW1lID0gXCJ0YWJsZS1pbmZvXCI7XG5cbi8qKlxuICogTWFya3MgYWxsIHZpc2libGUgcmVzdWx0c1xuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG1hcmtBbGxSb3dzQ2hlY2tib3hFbGVtXG4gKiBAcGFyYW0ge3N0cmluZ30gYWN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBoaWdobGlnaHRBbGxUYWJsZVJvd3MobWFya0FsbFJvd3NDaGVja2JveEVsZW0sIGFjdGlvbikge1xuICBtYXJrQWxsUm93c0NoZWNrYm94RWxlbVxuICAgIC5jbG9zZXN0KFwidGFibGVcIilcbiAgICAucXVlcnlTZWxlY3RvckFsbChcInRib2R5IHRyOm5vdCguZC1ub25lKTpub3QoLnN1Yi10YWJsZS1oZWFkZXIpXCIpXG4gICAgPy5mb3JFYWNoKChlbGVtKSA9PiB7XG4gICAgICBlbGVtLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiY2xpY2tcIiwgeyBkZXRhaWw6IGFjdGlvbiwgYnViYmxlczogdHJ1ZSB9KSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogSGlnaGxpZ2h0cyBhIHNpbmdsZSB0YWJsZSByb3dcbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBtYXJrQWxsUm93c0NoZWNrYm94RWxlbVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbWFzc0FjdGlvbkJhckVsZW1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhpZ2hsaWdodFRhYmxlUm93KG1hcmtBbGxSb3dzQ2hlY2tib3hFbGVtLCBtYXNzQWN0aW9uQmFyRWxlbSkge1xuICBjb25zdCB0YWJsZUVsZW0gPSBtYXJrQWxsUm93c0NoZWNrYm94RWxlbS5jbG9zZXN0KFwidGFibGVcIik7XG4gIGNvbnN0IGNoZWNrYm94TmFtZSA9IG1hcmtBbGxSb3dzQ2hlY2tib3hFbGVtLmRhdGFzZXQuY2hlY2tib3hOYW1lO1xuXG4gIGRlbGVnYXRlRXZlbnQodGFibGVFbGVtLCBcImNsaWNrXCIsIFwidGJvZHkgdHI6bm90KC5zdWItdGFibGUtaGVhZGVyKVwiLCAoZXZlbnQsIGVsZW0pID0+IHtcbiAgICBjb25zdCBhY3Rpb24gPSBldmVudC5kZXRhaWw7XG5cbiAgICBpZiAoZXZlbnQudGFyZ2V0LnR5cGUgIT09IFwiY2hlY2tib3hcIikge1xuICAgICAgaWYgKGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJBXCIgfHwgZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCJhXCIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgcm93Q2hlY2tib3ggPSBlbGVtLnF1ZXJ5U2VsZWN0b3IoYGlucHV0W25hbWU9XCIke2NoZWNrYm94TmFtZX1bXVwiXWApO1xuICAgICAgcm93Q2hlY2tib3guY2hlY2tlZCA9ICFyb3dDaGVja2JveC5jaGVja2VkIHx8IGFjdGlvbiA9PT0gXCJhZGRcIjtcbiAgICB9XG5cbiAgICBpZiAoYWN0aW9uID09PSBcImFkZFwiKSB7XG4gICAgICBlbGVtLmNsYXNzTGlzdC5hZGQoc2VsZWN0ZWRSb3dDc3NDbGFzc05hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtLmNsYXNzTGlzdC50b2dnbGUoc2VsZWN0ZWRSb3dDc3NDbGFzc05hbWUpO1xuICAgIH1cblxuICAgIHNldE1hcmtBbGxDaGVja2JveFN0YXRlKG1hcmtBbGxSb3dzQ2hlY2tib3hFbGVtLCBjaGVja2JveE5hbWUsIG1hc3NBY3Rpb25CYXJFbGVtKTtcbiAgfSk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG1hcmtBbGxSb3dzQ2hlY2tib3hFbGVtXG4gKiBAcGFyYW0ge3N0cmluZ30gY2hlY2tib3hOYW1lXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBtYXNzQWN0aW9uQmFyRWxlbVxuICovXG5mdW5jdGlvbiBzZXRNYXJrQWxsQ2hlY2tib3hTdGF0ZShtYXJrQWxsUm93c0NoZWNrYm94RWxlbSwgY2hlY2tib3hOYW1lLCBtYXNzQWN0aW9uQmFyRWxlbSkge1xuICBjb25zdCB0Ym9keUVsZW0gPSBtYXJrQWxsUm93c0NoZWNrYm94RWxlbS5jbG9zZXN0KFwidGFibGVcIikucXVlcnlTZWxlY3RvcihcInRib2R5XCIpO1xuICBjb25zdCB2aXNpYmxlU2VsZWN0ZWRUYWJsZVJvd3MgPSB0Ym9keUVsZW0ucXVlcnlTZWxlY3RvckFsbChgdHIuJHtzZWxlY3RlZFJvd0Nzc0NsYXNzTmFtZX06bm90KC5kLW5vbmUpYCkubGVuZ3RoO1xuICBjb25zdCB2aXNpYmxlTWFzc0FjdGlvbkNoZWNrYm94ZXMgPSB0Ym9keUVsZW0ucXVlcnlTZWxlY3RvckFsbChcbiAgICBgdHI6bm90KC5kLW5vbmUpIGlucHV0W25hbWU9XCIke2NoZWNrYm94TmFtZX1bXVwiXWBcbiAgKS5sZW5ndGg7XG5cbiAgbWFya0FsbFJvd3NDaGVja2JveEVsZW0uaW5kZXRlcm1pbmF0ZSA9XG4gICAgdmlzaWJsZVNlbGVjdGVkVGFibGVSb3dzID4gMCAmJiB2aXNpYmxlTWFzc0FjdGlvbkNoZWNrYm94ZXMgIT09IHZpc2libGVTZWxlY3RlZFRhYmxlUm93cztcbiAgbWFya0FsbFJvd3NDaGVja2JveEVsZW0uY2hlY2tlZCA9XG4gICAgdmlzaWJsZVNlbGVjdGVkVGFibGVSb3dzID4gMCAmJiB2aXNpYmxlTWFzc0FjdGlvbkNoZWNrYm94ZXMgPT09IHZpc2libGVTZWxlY3RlZFRhYmxlUm93cztcblxuICBpZiAobWFzc0FjdGlvbkJhckVsZW0pIHtcbiAgICBtYXNzQWN0aW9uQmFyRWxlbS5jbGFzc0xpc3QudG9nZ2xlKFwiZC1ub25lXCIsIHZpc2libGVTZWxlY3RlZFRhYmxlUm93cyA9PT0gMCk7XG4gIH1cbn1cblxuLyoqXG4gKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbWFzc0RlbGV0ZUJ1dHRvbkVsZW1cbiAqIEBwYXJhbSBvcHRpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWxldGVNYXJrZWRSZXN1bHRzKG1hc3NEZWxldGVCdXR0b25FbGVtLCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGNoZWNrQm94TmFtZTogXCJcIixcbiAgICBsYW5ndWFnZToge1xuICAgICAgY29uZmlybWF0aW9uVGV4dFNpbmdsZTogXCJcIixcbiAgICAgIGNvbmZpcm1hdGlvblRleHRNdWx0aXBsZTogXCJcIixcbiAgICB9LFxuICB9O1xuICBjb25zdCBzZXR0aW5ncyA9IHsgLi4uZGVmYXVsdHMsIC4uLm9wdGlvbnMgfTtcblxuICBtYXNzRGVsZXRlQnV0dG9uRWxlbS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkTWFzc0FjdGlvbkNoZWNrYm94ZXMgPSBtYXNzRGVsZXRlQnV0dG9uRWxlbVxuICAgICAgLmNsb3Nlc3QoXCJ0YWJsZVwiKVxuICAgICAgLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9XCInICsgc2V0dGluZ3MuY2hlY2tCb3hOYW1lICsgJ1tdXCJdOmNoZWNrZWQnKTtcblxuICAgIGNvbnN0IG1vZGFsRWxlbSA9IG1hc3NEZWxldGVCdXR0b25FbGVtLmNsb3Nlc3QoXCJmb3JtXCIpLnF1ZXJ5U2VsZWN0b3IoXCIuanMtbWFzcy1kZWxldGUtbW9kYWxcIik7XG4gICAgY29uc3QgbW9kYWwgPSBib290c3RyYXAuTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZShtb2RhbEVsZW0pO1xuXG4gICAgbW9kYWxFbGVtLnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtYm9keVwiKS5pbm5lckhUTUwgPVxuICAgICAgc2VsZWN0ZWRNYXNzQWN0aW9uQ2hlY2tib3hlcy5sZW5ndGggPT09IDFcbiAgICAgICAgPyBzZXR0aW5ncy5sYW5ndWFnZS5jb25maXJtYXRpb25UZXh0U2luZ2xlXG4gICAgICAgIDogc2V0dGluZ3MubGFuZ3VhZ2UuY29uZmlybWF0aW9uVGV4dE11bHRpcGxlLnJlcGxhY2UoXCJ7aXRlbXN9XCIsIHNlbGVjdGVkTWFzc0FjdGlvbkNoZWNrYm94ZXMubGVuZ3RoLnRvU3RyaW5nKCkpO1xuXG4gICAgbW9kYWwuc2hvdygpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7IGhpZ2hsaWdodEFsbFRhYmxlUm93cywgaGlnaGxpZ2h0VGFibGVSb3csIGRlbGV0ZU1hcmtlZFJlc3VsdHMgfSBmcm9tIFwiLi4vbGliL21hc3MtYWN0aW9uXCI7XG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1tYXJrLWFsbC1pZF1cIikuZm9yRWFjaCgobWFya0FsbEVsZW0pID0+IHtcbiAgLy8gR2V0IHRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgZ3JpZCwgc28gdGhhdCB3ZSBjYW4gZmluZCB0aGUgZWxlbWVudCByZXNwb25zaWJsZSBmb3IgdGhlIG1hc3MgYWN0aW9uc1xuICBjb25zdCB0YWJsZUlkZW50aWZpZXIgPSBtYXJrQWxsRWxlbS5jbG9zZXN0KFwidGFibGVcIikuaWQ7XG4gIGNvbnN0IG1hc3NBY3Rpb25CYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgJHt0YWJsZUlkZW50aWZpZXJ9LW1hc3MtZGVsZXRlLWJhcmApO1xuXG4gIG1hcmtBbGxFbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PlxuICAgIGhpZ2hsaWdodEFsbFRhYmxlUm93cyhtYXJrQWxsRWxlbSwgbWFya0FsbEVsZW0uY2hlY2tlZCA/IFwiYWRkXCIgOiBcInJlbW92ZVwiKVxuICApO1xuXG4gIGhpZ2hsaWdodFRhYmxlUm93KG1hcmtBbGxFbGVtLCBtYXNzQWN0aW9uQmFyKTtcblxuICBkZWxldGVNYXJrZWRSZXN1bHRzKFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGAke3RhYmxlSWRlbnRpZmllcn0tbWFzcy1kZWxldGVgKSxcbiAgICBKU09OLnBhcnNlKG1hcmtBbGxFbGVtLmRhdGFzZXQuZGVsZXRlT3B0aW9ucylcbiAgKTtcbn0pO1xuIl19","file":"mass-action.min.js"}