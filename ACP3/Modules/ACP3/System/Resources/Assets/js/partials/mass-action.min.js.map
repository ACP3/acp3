{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/mass-action.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/mass-action.js"],"names":["_$massAction_1","markAllRowsCheckboxElem","action","jQuery","closest","find","trigger","highlightTableRow","massActionBarElem","$markAllCheckbox","$table","checkboxName","data","on","event","target","type","nodeName","rowCheckbox","this","querySelector","concat","checked","classList","add","cssClassName","toggle","setMarkAllCheckboxState","document","deleteMarkedResults","elem","options","$this","settings","_objectSpread","checkBoxName","language","confirmationTextSingle","confirmationTextMultiple","noEntriesSelectedText","bootboxLocale","e","preventDefault","$selectedMassActionCheckboxes","length","confirmationText","replace","bootbox","confirm","message","locale","callback","result","$form","formSubmit","customFormData","triggerHandler","alert","$tbody","visibleSelectedTableRows","visibleMassActionCheckboxes","indeterminate","querySelectorAll","forEach","element","tableIdentifier","id","massActionBar","getElementById","addEventListener","highlightAllTableRows","JSON","parse","dataset","deleteOptions"],"mappings":"CAAA,WACA,IAAAA,EAAA,mwBCYO,SAA+BC,EAAyBC,GAC7DC,OAAOF,GAAyBG,QAAQ,SAASC,KAAK,gCAAgCC,QAAQ,QAAS,CAACJ,KAAAF,EAAAO,kBASnG,SAA2BN,EAAyBO,GACzD,IAAMC,EAAmBN,OAAOF,GAC9BS,EAASD,EAAiBL,QAAQ,SAClCO,EAAeF,EAAiBG,KAAK,iBAEvCF,EAAOG,GAAG,QAAS,wBAAwB,SAAUC,EAAOZ,GAC1D,GAA0B,aAAtBY,EAAMC,OAAOC,KAAqB,CACpC,GAA8B,MAA1BF,EAAMC,OAAOE,UAAoBH,EAAMC,OAAOX,QAAQ,KACxD,OAGF,IAAMc,EAAcC,KAAKC,cAAL,eAAAC,OAAkCV,EAAlC,SACpBO,EAAYI,SAAWJ,EAAYI,SAAsB,QAAXpB,EAGjC,QAAXA,EACFiB,KAAKI,UAAUC,IAAIC,GAEnBN,KAAKI,UAAUG,OAAOD,GAGxBE,EAAwB1B,EAAyBU,EAAcH,MAGjEL,OAAOyB,UAAUf,GAAG,WAAW,WAC7Bc,EAAwB1B,EAAyBU,EAAcH,OAAAR,EAAA6B,oBA4B5D,SAA6BC,EAAMC,GACxC,IASEC,EAAQ7B,OAAO2B,GACfG,EAAQC,EAAAA,EAAA,GAVO,CACbC,aAAc,GACdC,SAAU,CACRC,uBAAwB,GACxBC,yBAA0B,GAC1BC,sBAAuB,IAEzBC,cAAe,OAGYT,GAE/BC,EAAMnB,GAAG,SAAS,SAAU4B,GAC1BA,EAAEC,iBAEF,IAAMC,EAAgCxC,OAAO,2BAA6B8B,EAASE,aAAe,gBAElG,GAAIQ,EAA8BC,OAAS,EAAG,CAC5C,IAAMC,EACqC,IAAzCF,EAA8BC,OAC1BX,EAASG,SAASC,uBAClBJ,EAASG,SAASE,yBAAyBQ,QAAQ,UAAWH,EAA8BC,QAElGG,QAAQC,QAAQ,CACdC,QAASJ,EACTK,OAAQjB,EAASO,cACjBW,SAAU,SAACC,GACT,GAAIA,EAAQ,CACV,IAAMC,EAAQrB,EAAM5B,QAAQ,QAE5BiD,EAAMC,WAAW,CACfC,eAAgB,CACdrD,OAAQ,eAGZmD,EAAMG,eAAe,mBAK3BT,QAAQU,MAAM,CACZR,QAAShB,EAASG,SAASG,sBAC3BW,OAAQjB,EAASO,oBAlHzB,IAAMf,EAAe,OAqDrB,SAASE,EAAwB1B,EAAyBU,EAAcH,GACtE,IAAMkD,EAASvD,OAAOF,GAAyBG,QAAQ,SAASC,KAAK,SAC/DsD,EAA2BD,EAAOrD,KAAK,MAAQoB,EAAe,YAAYmB,OAC1EgB,EAA8BF,EAAOrD,KAAK,eAAiBM,EAAe,gBAAgBiC,OAEhG3C,EAAwB4D,cACtBF,EAA2B,GAAKC,IAAgCD,EAClE1D,EAAwBqB,QACtBqC,EAA2B,GAAKC,IAAgCD,EAElEnD,EAAkBe,UAAUG,OAAO,SAAuC,IAA7BiC,GClE/C/B,SAASkC,iBAAiB,sBAAsBC,SAAQ,SAACC,GAEvD,IAAMC,EAAkBD,EAAQ5D,QAAQ,SAAS8D,GAC3CC,EAAgBvC,SAASwC,eAAT,GAAA/C,OAA2B4C,EAA3B,qBAEtBD,EAAQK,iBAAiB,SAAS,WAAA,OAAA,EAChCrE,EAAAsE,uBAAsBN,EAASA,EAAQ1C,QAAU,MAAQ,SAAU6C,OAAA,EAGrEnE,EAAAO,mBAAkByD,EAASG,IAAA,EAE3BnE,EAAA6B,qBACED,SAASwC,eAAT,GAAA/C,OAA2B4C,EAA3B,iBACAM,KAAKC,MAAMR,EAAQS,QAAQC,mBFf/B","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\nconst cssClassName = \"info\";\n\n/**\n * Marks all visible results\n *\n * @param {Element} markAllRowsCheckboxElem\n * @param {string} action\n */\nexport function highlightAllTableRows(markAllRowsCheckboxElem, action) {\n  jQuery(markAllRowsCheckboxElem).closest(\"table\").find(\"tr:has(td :checkbox:visible)\").trigger(\"click\", [action]);\n}\n\n/**\n * Highlights a single table row\n *\n * @param {Element} markAllRowsCheckboxElem\n * @param {Element} massActionBarElem\n */\nexport function highlightTableRow(markAllRowsCheckboxElem, massActionBarElem) {\n  const $markAllCheckbox = jQuery(markAllRowsCheckboxElem),\n    $table = $markAllCheckbox.closest(\"table\"),\n    checkboxName = $markAllCheckbox.data(\"checkbox-name\");\n\n  $table.on(\"click\", \"tr:has(td :checkbox)\", function (event, action) {\n    if (event.target.type !== \"checkbox\") {\n      if (event.target.nodeName === \"A\" || event.target.closest(\"a\")) {\n        return;\n      }\n\n      const rowCheckbox = this.querySelector(`input[name=\"${checkboxName}[]\"]`);\n      rowCheckbox.checked = !rowCheckbox.checked || action === \"add\";\n    }\n\n    if (action === \"add\") {\n      this.classList.add(cssClassName);\n    } else {\n      this.classList.toggle(cssClassName);\n    }\n\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem);\n  });\n\n  jQuery(document).on(\"draw.dt\", () => {\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem);\n  });\n}\n\n/**\n *\n * @param {Element} markAllRowsCheckboxElem\n * @param {string} checkboxName\n * @param {Element} massActionBarElem\n */\nfunction setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem) {\n  const $tbody = jQuery(markAllRowsCheckboxElem).closest(\"table\").find(\"tbody\");\n  const visibleSelectedTableRows = $tbody.find(\"tr.\" + cssClassName + \":visible\").length;\n  const visibleMassActionCheckboxes = $tbody.find('input[name=\"' + checkboxName + '[]\"]:visible').length;\n\n  markAllRowsCheckboxElem.indeterminate =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes !== visibleSelectedTableRows;\n  markAllRowsCheckboxElem.checked =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes === visibleSelectedTableRows;\n\n  massActionBarElem.classList.toggle(\"hidden\", visibleSelectedTableRows === 0);\n}\n\n/**\n *\n * @param {HTMLElement} elem\n * @param options\n */\nexport function deleteMarkedResults(elem, options) {\n  const defaults = {\n      checkBoxName: \"\",\n      language: {\n        confirmationTextSingle: \"\",\n        confirmationTextMultiple: \"\",\n        noEntriesSelectedText: \"\",\n      },\n      bootboxLocale: \"en\",\n    },\n    $this = jQuery(elem),\n    settings = { ...defaults, ...options };\n\n  $this.on(\"click\", function (e) {\n    e.preventDefault();\n\n    const $selectedMassActionCheckboxes = jQuery('form .table input[name=\"' + settings.checkBoxName + '[]\"]:checked');\n\n    if ($selectedMassActionCheckboxes.length > 0) {\n      const confirmationText =\n        $selectedMassActionCheckboxes.length === 1\n          ? settings.language.confirmationTextSingle\n          : settings.language.confirmationTextMultiple.replace(\"{items}\", $selectedMassActionCheckboxes.length);\n\n      bootbox.confirm({\n        message: confirmationText,\n        locale: settings.bootboxLocale,\n        callback: (result) => {\n          if (result) {\n            const $form = $this.closest(\"form\");\n\n            $form.formSubmit({\n              customFormData: {\n                action: \"confirmed\",\n              },\n            });\n            $form.triggerHandler(\"submit\");\n          }\n        },\n      });\n    } else {\n      bootbox.alert({\n        message: settings.language.noEntriesSelectedText,\n        locale: settings.bootboxLocale,\n      });\n    }\n  });\n}\n","import { highlightAllTableRows, highlightTableRow, deleteMarkedResults } from \"../lib/mass-action\";\n\ndocument.querySelectorAll(\"[data-mark-all-id]\").forEach((element) => {\n  // Get the unique identifier of the grid, so that we can find the element responsible for the mass actions\n  const tableIdentifier = element.closest(\"table\").id;\n  const massActionBar = document.getElementById(`${tableIdentifier}-mass-delete-bar`);\n\n  element.addEventListener(\"click\", () =>\n    highlightAllTableRows(element, element.checked ? \"add\" : \"remove\", massActionBar)\n  );\n\n  highlightTableRow(element, massActionBar);\n\n  deleteMarkedResults(\n    document.getElementById(`${tableIdentifier}-mass-delete`),\n    JSON.parse(element.dataset.deleteOptions)\n  );\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"mass-action.min.js"}