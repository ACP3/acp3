{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/mass-action.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/mass-action.js"],"names":["_$eventHandler_1","element","eventName","selectorOrTargetElement","handler","addEventListener","event","elems","document","querySelectorAll","forEach","elem","contains","target","massDeleteButtonElem","options","settings","checkBoxName","language","confirmationTextSingle","confirmationTextMultiple","preventDefault","selectedMassActionCheckboxes","closest","modalElem","querySelector","modal","bootstrap","Modal","getOrCreateInstance","innerHTML","length","replace","toString","show","_$massAction_2","highlightAllTableRows","markAllRowsCheckboxElem","action","_markAllRowsCheckboxE","dispatchEvent","CustomEvent","detail","bubbles","highlightTableRow","massActionBarElem","tableElem","checkboxName","dataset","delegateEvent","type","nodeName","rowCheckbox","concat","checked","classList","add","selectedRowCssClassName","toggle","tbodyElem","visibleSelectedTableRows","visibleMassActionCheckboxes","indeterminate","markAllElem","tableIdentifier","id","massActionBar","getElementById","deleteMarkedResults","JSON","parse","deleteOptions"],"mappings":"CAAA,WACA,IAAAA,EAAA,oECWO,SAAuBC,EAASC,EAAWC,EAAyBC,GACzEH,EAAQI,iBAAiBH,EAAYI,IACnC,GAAuC,iBAA5BH,EAAsC,CAC/C,MAAMI,EAAQC,SAASC,iBAAiBN,GAExC,IAAKI,EACH,OAGFA,EAAMG,QAASC,IACTA,GAAQA,EAAKC,SAASN,EAAMO,SAC9BT,EAAQE,EAAOK,UAGVR,GAA2BA,EAAwBS,SAASN,EAAMO,SAC3ET,EAAQE,EAAOH,sFC2Dd,SAA6BW,EAAsBC,GACxD,MAOMC,EAAW,CANfC,aAAc,GACdC,SAAU,CACRC,uBAAwB,GACxBC,yBAA0B,OAGKL,GAEnCD,EAAqBT,iBAAiB,QAAUC,IAC9CA,EAAMe,iBAEN,MAAMC,EAA+BR,EAClCS,QAAQ,SACRd,iBAAiB,eAAiBO,EAASC,aAAe,gBAEvDO,EAAYV,EAAqBS,QAAQ,QAAQE,cAAc,yBAC/DC,EAAQC,UAAUC,MAAMC,oBAAoBL,GAElDA,EAAUC,cAAc,eAAeK,UACG,IAAxCR,EAA6BS,OACzBf,EAASE,SAASC,uBAClBH,EAASE,SAASE,yBAAyBY,QAAQ,UAAWV,EAA6BS,OAAOE,YAExGP,EAAMQ,UAAAC,EAAAC,sBA9FH,SAA+BC,EAAyBC,GAAQ,IAAAC,EACrE,QAAAA,EAAAF,EACGd,QAAQ,SACRd,iBAAiB,uDAAA,IAFpB8B,GAAAA,EAGI7B,QAASC,IACTA,EAAK6B,cAAc,IAAIC,YAAY,QAAS,CAAEC,OAAQJ,EAAQK,SAAA,QAASR,EAAAS,kBAUtE,SAA2BP,EAAyBQ,GACzD,MAAMC,EAAYT,EAAwBd,QAAQ,SAC5CwB,EAAeV,EAAwBW,QAAQD,cAAA,EAErD/C,EAAAiD,eAAcH,EAAW,QAAS,kCAAmC,CAACxC,EAAOK,KAC3E,MAAM2B,EAAShC,EAAMoC,OAErB,GAA0B,aAAtBpC,EAAMO,OAAOqC,KAAqB,CACpC,GAA8B,MAA1B5C,EAAMO,OAAOsC,UAAoB7C,EAAMO,OAAOU,QAAQ,KACxD,OAGF,MAAM6B,EAAczC,EAAKc,cAAL,eAAA4B,OAAkCN,EAAlC,SACpBK,EAAYE,SAAWF,EAAYE,SAAsB,QAAXhB,EAGjC,QAAXA,EACF3B,EAAK4C,UAAUC,IAAIC,GAEnB9C,EAAK4C,UAAUG,OAAOD,GAa5B,SAAiCpB,EAAyBU,EAAcF,GACtE,MAAMc,EAAYtB,EAAwBd,QAAQ,SAASE,cAAc,SACnEmC,EAA2BD,EAAUlD,iBAAV,MAAA4C,OAAiCI,EAAjC,kBAAyE1B,OACpG8B,EAA8BF,EAAUlD,iBAAV,+BAAA4C,OACHN,EADG,SAElChB,OAEFM,EAAwByB,cACtBF,EAA2B,GAAKC,IAAgCD,EAClEvB,EAAwBiB,QACtBM,EAA2B,GAAKC,IAAgCD,EAE9Df,GACFA,EAAkBU,UAAUG,OAAO,SAAuC,IAA7BE,GAbjD,CAV4BvB,EAAyBU,EAAcF,MA7CnE,MAAMY,EAA0B,aCPhCjD,SAASC,iBAAiB,sBAAsBC,QAASqD,IAEvD,MAAMC,EAAkBD,EAAYxC,QAAQ,SAAS0C,GAC/CC,EAAgB1D,SAAS2D,eAAT,GAAAd,OAA2BW,EAA3B,qBAEtBD,EAAY1D,iBAAiB,QAAS,KAAA,EACpC8B,EAAAC,uBAAsB2B,EAAaA,EAAYT,QAAU,MAAQ,YAAA,EAGnEnB,EAAAS,mBAAkBmB,EAAaG,IAAA,EAE/B/B,EAAAiC,qBACE5D,SAAS2D,eAAT,GAAAd,OAA2BW,EAA3B,iBACAK,KAAKC,MAAMP,EAAYf,QAAQuB,kBHfnC","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\n/* global bootstrap */\n\nimport { delegateEvent } from \"./event-handler\";\n\nconst selectedRowCssClassName = \"table-info\";\n\n/**\n * Marks all visible results\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} action\n */\nexport function highlightAllTableRows(markAllRowsCheckboxElem, action) {\n  markAllRowsCheckboxElem\n    .closest(\"table\")\n    .querySelectorAll(\"tbody tr:not(.d-none):not(.sub-table-header)\")\n    ?.forEach((elem) => {\n      elem.dispatchEvent(new CustomEvent(\"click\", { detail: action, bubbles: true }));\n    });\n}\n\n/**\n * Highlights a single table row\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {HTMLElement} massActionBarElem\n */\nexport function highlightTableRow(markAllRowsCheckboxElem, massActionBarElem) {\n  const tableElem = markAllRowsCheckboxElem.closest(\"table\");\n  const checkboxName = markAllRowsCheckboxElem.dataset.checkboxName;\n\n  delegateEvent(tableElem, \"click\", \"tbody tr:not(.sub-table-header)\", (event, elem) => {\n    const action = event.detail;\n\n    if (event.target.type !== \"checkbox\") {\n      if (event.target.nodeName === \"A\" || event.target.closest(\"a\")) {\n        return;\n      }\n\n      const rowCheckbox = elem.querySelector(`input[name=\"${checkboxName}[]\"]`);\n      rowCheckbox.checked = !rowCheckbox.checked || action === \"add\";\n    }\n\n    if (action === \"add\") {\n      elem.classList.add(selectedRowCssClassName);\n    } else {\n      elem.classList.toggle(selectedRowCssClassName);\n    }\n\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem);\n  });\n}\n\n/**\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} checkboxName\n * @param {HTMLElement} massActionBarElem\n */\nfunction setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem) {\n  const tbodyElem = markAllRowsCheckboxElem.closest(\"table\").querySelector(\"tbody\");\n  const visibleSelectedTableRows = tbodyElem.querySelectorAll(`tr.${selectedRowCssClassName}:not(.d-none)`).length;\n  const visibleMassActionCheckboxes = tbodyElem.querySelectorAll(\n    `tr:not(.d-none) input[name=\"${checkboxName}[]\"]`\n  ).length;\n\n  markAllRowsCheckboxElem.indeterminate =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes !== visibleSelectedTableRows;\n  markAllRowsCheckboxElem.checked =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes === visibleSelectedTableRows;\n\n  if (massActionBarElem) {\n    massActionBarElem.classList.toggle(\"d-none\", visibleSelectedTableRows === 0);\n  }\n}\n\n/**\n *\n * @param {HTMLElement} massDeleteButtonElem\n * @param options\n */\nexport function deleteMarkedResults(massDeleteButtonElem, options) {\n  const defaults = {\n    checkBoxName: \"\",\n    language: {\n      confirmationTextSingle: \"\",\n      confirmationTextMultiple: \"\",\n    },\n  };\n  const settings = { ...defaults, ...options };\n\n  massDeleteButtonElem.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    const selectedMassActionCheckboxes = massDeleteButtonElem\n      .closest(\"table\")\n      .querySelectorAll('input[name=\"' + settings.checkBoxName + '[]\"]:checked');\n\n    const modalElem = massDeleteButtonElem.closest(\"form\").querySelector(\".js-mass-delete-modal\");\n    const modal = bootstrap.Modal.getOrCreateInstance(modalElem);\n\n    modalElem.querySelector(\".modal-body\").innerHTML =\n      selectedMassActionCheckboxes.length === 1\n        ? settings.language.confirmationTextSingle\n        : settings.language.confirmationTextMultiple.replace(\"{items}\", selectedMassActionCheckboxes.length.toString());\n\n    modal.show();\n  });\n}\n","import { highlightAllTableRows, highlightTableRow, deleteMarkedResults } from \"../lib/mass-action\";\n\ndocument.querySelectorAll(\"[data-mark-all-id]\").forEach((markAllElem) => {\n  // Get the unique identifier of the grid, so that we can find the element responsible for the mass actions\n  const tableIdentifier = markAllElem.closest(\"table\").id;\n  const massActionBar = document.getElementById(`${tableIdentifier}-mass-delete-bar`);\n\n  markAllElem.addEventListener(\"click\", () =>\n    highlightAllTableRows(markAllElem, markAllElem.checked ? \"add\" : \"remove\")\n  );\n\n  highlightTableRow(markAllElem, massActionBar);\n\n  deleteMarkedResults(\n    document.getElementById(`${tableIdentifier}-mass-delete`),\n    JSON.parse(markAllElem.dataset.deleteOptions)\n  );\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"mass-action.min.js"}