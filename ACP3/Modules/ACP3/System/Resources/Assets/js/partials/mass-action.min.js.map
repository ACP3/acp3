{"version":3,"file":"./ACP3/Modules/ACP3/System/Resources/Assets/js/partials/mass-action.min.js","mappings":"mBASA,MAAMA,EAA0B,aAuBzB,SAASC,EAAkBC,EAAyBC,GACzD,MAAMC,EAAYF,EAAwBG,QAAQ,SAC5CC,EAAeJ,EAAwBK,QAAQD,aCtBhD,IAAgCE,EAAWC,EAAyBC,EAApCF,EDwBZ,QCxBuBC,EDwBd,kCCxBuCC,EDwBJ,CAACC,EAAOC,KAC3E,MAAMC,EAASF,EAAMG,OAErB,GAA0B,aAAtBH,EAAMI,OAAOC,KAAqB,CACpC,GAA8B,MAA1BL,EAAMI,OAAOE,UAAoBN,EAAMI,OAAOV,QAAQ,KACxD,OAGF,MAAMa,EAAcN,EAAKO,cAAe,eAAcb,SACtDY,EAAYE,SAAWF,EAAYE,SAAsB,QAAXP,CAC/C,CAEc,QAAXA,EACFD,EAAKS,UAAUC,IAAItB,GAEnBY,EAAKS,UAAUE,OAAOvB,GAa5B,SAAiCE,EAAyBI,EAAcH,GACtE,MAAMqB,EAAYtB,EAAwBG,QAAQ,SAASc,cAAc,SACnEM,EAA2BD,EAAUE,iBAAkB,8BAA6CC,OACpGC,EAA8BJ,EAAUE,iBAC3C,+BAA8BpB,SAC/BqB,OAEFzB,EAAwB2B,cACtBJ,EAA2B,GAAKG,IAAgCH,EAClEvB,EAAwBkB,QACtBK,EAA2B,GAAKG,IAAgCH,EAE9DtB,GACFA,EAAkBkB,UAAUE,OAAO,SAAuC,IAA7BE,EAEhD,CAzBGK,CAAwB5B,EAAyBI,EAAcH,EAA/D,EAlBYC,ECvBN2B,iBAAiBvB,GAAYG,IACnC,GAAuC,iBAA5BF,EAAsC,CAC/C,MAAMuB,EAAQC,SAASP,iBAAiBjB,GAExC,IAAKuB,EACH,OAGFA,EAAME,SAAStB,IACTA,GAAQA,EAAKuB,SAASxB,EAAMI,SAC9BL,EAAQC,EAAOC,EAChB,GAEJ,MAAUH,GAA2BA,EAAwB0B,SAASxB,EAAMI,SAC3EL,EAAQC,EAAOF,EAChB,GD4BJ,CEtDDwB,SAASP,iBAAiB,sBAAsBQ,SAASE,IAEvD,MAAMC,EAAkBD,EAAY/B,QAAQ,SAASiC,GAC/CC,EAAgBN,SAASO,eAAgB,GAAEH,qBAEjDD,EAAYL,iBAAiB,SAAS,KACpCU,OFSkCvC,EETZkC,EFSqCvB,EETxBuB,EAAYhB,QAAU,MAAQ,cFUnElB,EACGG,QAAQ,SACRqB,iBAAiB,iDAChBQ,SAAStB,IACTA,EAAK8B,cAAc,IAAIC,YAAY,QAAS,CAAE7B,OAAQD,EAAQ+B,SAAS,IAAvE,IALC,IAA+B1C,EAAyBW,CEV7D,IAIAZ,EAAkBmC,EAAaG,GF2E1B,SAA6BM,EAAsBC,GACxD,MAOMC,EAAW,CANfC,aAAc,GACdC,SAAU,CACRC,uBAAwB,GACxBC,yBAA0B,OAGKL,GAEnCD,EAAqBd,iBAAiB,SAAUpB,IAC9CA,EAAMyC,iBAEN,MAAMC,EAA+BR,EAClCxC,QAAQ,SACRqB,iBAAiB,eAAiBqB,EAASC,aAAe,gBAEvDM,EAAYT,EAAqBxC,QAAQ,QAAQc,cAAc,yBAC/DoC,EAAQC,UAAUC,MAAMC,oBAAoBJ,GAElDA,EAAUnC,cAAc,eAAewC,UACG,IAAxCN,EAA6B1B,OACzBoB,EAASE,SAASC,uBAClBH,EAASE,SAASE,yBAAyBS,QAAQ,UAAWP,EAA6B1B,OAAOkC,YAExGN,EAAMO,MAAN,GAEH,CEpGCC,CACE9B,SAASO,eAAgB,GAAEH,iBAC3B2B,KAAKC,MAAM7B,EAAY7B,QAAQ2D,eAFjC,G","sources":["webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/lib/mass-action.js","webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","webpack://acp3-cms/./ACP3/Modules/ACP3/System/Resources/Assets/js/partials/mass-action.js"],"sourcesContent":["/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\n/* global bootstrap */\n\nimport { delegateEvent } from \"./event-handler\";\n\nconst selectedRowCssClassName = \"table-info\";\n\n/**\n * Marks all visible results\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} action\n */\nexport function highlightAllTableRows(markAllRowsCheckboxElem, action) {\n  markAllRowsCheckboxElem\n    .closest(\"table\")\n    .querySelectorAll(\"tbody tr:not(.d-none):not(.sub-table-header)\")\n    ?.forEach((elem) => {\n      elem.dispatchEvent(new CustomEvent(\"click\", { detail: action, bubbles: true }));\n    });\n}\n\n/**\n * Highlights a single table row\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {HTMLElement} massActionBarElem\n */\nexport function highlightTableRow(markAllRowsCheckboxElem, massActionBarElem) {\n  const tableElem = markAllRowsCheckboxElem.closest(\"table\");\n  const checkboxName = markAllRowsCheckboxElem.dataset.checkboxName;\n\n  delegateEvent(tableElem, \"click\", \"tbody tr:not(.sub-table-header)\", (event, elem) => {\n    const action = event.detail;\n\n    if (event.target.type !== \"checkbox\") {\n      if (event.target.nodeName === \"A\" || event.target.closest(\"a\")) {\n        return;\n      }\n\n      const rowCheckbox = elem.querySelector(`input[name=\"${checkboxName}[]\"]`);\n      rowCheckbox.checked = !rowCheckbox.checked || action === \"add\";\n    }\n\n    if (action === \"add\") {\n      elem.classList.add(selectedRowCssClassName);\n    } else {\n      elem.classList.toggle(selectedRowCssClassName);\n    }\n\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem);\n  });\n}\n\n/**\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} checkboxName\n * @param {HTMLElement} massActionBarElem\n */\nfunction setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem) {\n  const tbodyElem = markAllRowsCheckboxElem.closest(\"table\").querySelector(\"tbody\");\n  const visibleSelectedTableRows = tbodyElem.querySelectorAll(`tr.${selectedRowCssClassName}:not(.d-none)`).length;\n  const visibleMassActionCheckboxes = tbodyElem.querySelectorAll(\n    `tr:not(.d-none) input[name=\"${checkboxName}[]\"]`\n  ).length;\n\n  markAllRowsCheckboxElem.indeterminate =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes !== visibleSelectedTableRows;\n  markAllRowsCheckboxElem.checked =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes === visibleSelectedTableRows;\n\n  if (massActionBarElem) {\n    massActionBarElem.classList.toggle(\"d-none\", visibleSelectedTableRows === 0);\n  }\n}\n\n/**\n *\n * @param {HTMLElement} massDeleteButtonElem\n * @param options\n */\nexport function deleteMarkedResults(massDeleteButtonElem, options) {\n  const defaults = {\n    checkBoxName: \"\",\n    language: {\n      confirmationTextSingle: \"\",\n      confirmationTextMultiple: \"\",\n    },\n  };\n  const settings = { ...defaults, ...options };\n\n  massDeleteButtonElem.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    const selectedMassActionCheckboxes = massDeleteButtonElem\n      .closest(\"table\")\n      .querySelectorAll('input[name=\"' + settings.checkBoxName + '[]\"]:checked');\n\n    const modalElem = massDeleteButtonElem.closest(\"form\").querySelector(\".js-mass-delete-modal\");\n    const modal = bootstrap.Modal.getOrCreateInstance(modalElem);\n\n    modalElem.querySelector(\".modal-body\").innerHTML =\n      selectedMassActionCheckboxes.length === 1\n        ? settings.language.confirmationTextSingle\n        : settings.language.confirmationTextMultiple.replace(\"{items}\", selectedMassActionCheckboxes.length.toString());\n\n    modal.show();\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","import { highlightAllTableRows, highlightTableRow, deleteMarkedResults } from \"../lib/mass-action\";\n\ndocument.querySelectorAll(\"[data-mark-all-id]\").forEach((markAllElem) => {\n  // Get the unique identifier of the grid, so that we can find the element responsible for the mass actions\n  const tableIdentifier = markAllElem.closest(\"table\").id;\n  const massActionBar = document.getElementById(`${tableIdentifier}-mass-delete-bar`);\n\n  markAllElem.addEventListener(\"click\", () =>\n    highlightAllTableRows(markAllElem, markAllElem.checked ? \"add\" : \"remove\")\n  );\n\n  highlightTableRow(markAllElem, massActionBar);\n\n  deleteMarkedResults(\n    document.getElementById(`${tableIdentifier}-mass-delete`),\n    JSON.parse(markAllElem.dataset.deleteOptions)\n  );\n});\n"],"names":["selectedRowCssClassName","highlightTableRow","markAllRowsCheckboxElem","massActionBarElem","tableElem","closest","checkboxName","dataset","eventName","selectorOrTargetElement","handler","event","elem","action","detail","target","type","nodeName","rowCheckbox","querySelector","checked","classList","add","toggle","tbodyElem","visibleSelectedTableRows","querySelectorAll","length","visibleMassActionCheckboxes","indeterminate","setMarkAllCheckboxState","addEventListener","elems","document","forEach","contains","markAllElem","tableIdentifier","id","massActionBar","getElementById","highlightAllTableRows","dispatchEvent","CustomEvent","bubbles","massDeleteButtonElem","options","settings","checkBoxName","language","confirmationTextSingle","confirmationTextMultiple","preventDefault","selectedMassActionCheckboxes","modalElem","modal","bootstrap","Modal","getOrCreateInstance","innerHTML","replace","toString","show","deleteMarkedResults","JSON","parse","deleteOptions"],"sourceRoot":""}