{"version":3,"sources":["ACP3/Modules/ACP3/System/Resources/Assets/js/partials/node_modules/browser-pack-flat/_prelude","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/event-handler.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/lib/mass-action.js","ACP3/Modules/ACP3/System/Resources/Assets/js/partials/ACP3/Modules/ACP3/System/Resources/Assets/js/partials/mass-action.js"],"names":["_$eventHandler_1","element","eventName","selectorOrTargetElement","handler","addEventListener","event","elems","document","querySelectorAll","forEach","elem","contains","target","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","i","arguments","length","source","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","markAllRowsCheckboxElem","action","_markAllRowsCheckboxE","closest","dispatchEvent","CustomEvent","detail","bubbles","_$massAction_2","highlightTableRow","massActionBarElem","tableElem","checkboxName","dataset","delegateEvent","type","nodeName","rowCheckbox","querySelector","concat","checked","classList","add","selectedRowCssClassName","toggle","tbodyElem","visibleSelectedTableRows","visibleMassActionCheckboxes","indeterminate","deleteMarkedResults","massDeleteButtonElem","options","settings","checkBoxName","language","confirmationTextSingle","confirmationTextMultiple","preventDefault","selectedMassActionCheckboxes","modalElem","modal","bootstrap","Modal","getOrCreateInstance","innerHTML","replace","toString","show","markAllElem","tableIdentifier","id","massActionBar","getElementById","highlightAllTableRows","JSON","parse","deleteOptions"],"mappings":"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","sourcesContent":["(function(){\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENCE file at the top-level module directory for licencing details.\n */\n\n/**\n *\n * @param {HTMLElement|Document} element\n * @param {string} eventName\n * @param {string|HTMLElement} selectorOrTargetElement\n * @param {function} handler\n */\nexport function delegateEvent(element, eventName, selectorOrTargetElement, handler) {\n  element.addEventListener(eventName, (event) => {\n    if (typeof selectorOrTargetElement === \"string\") {\n      const elems = document.querySelectorAll(selectorOrTargetElement);\n\n      if (!elems) {\n        return;\n      }\n\n      elems.forEach((elem) => {\n        if (elem && elem.contains(event.target)) {\n          handler(event, elem);\n        }\n      });\n    } else if (selectorOrTargetElement && selectorOrTargetElement.contains(event.target)) {\n      handler(event, selectorOrTargetElement);\n    }\n  });\n}\n","/*\n * Copyright (c) by the ACP3 Developers.\n * See the LICENSE file at the top-level module directory for licensing details.\n */\n\n/* global bootstrap */\n\nimport { delegateEvent } from \"./event-handler\";\n\nconst selectedRowCssClassName = \"table-info\";\n\n/**\n * Marks all visible results\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} action\n */\nexport function highlightAllTableRows(markAllRowsCheckboxElem, action) {\n  markAllRowsCheckboxElem\n    .closest(\"table\")\n    .querySelectorAll(\"tbody tr:not(.d-none):not(.sub-table-header)\")\n    ?.forEach((elem) => {\n      elem.dispatchEvent(new CustomEvent(\"click\", { detail: action, bubbles: true }));\n    });\n}\n\n/**\n * Highlights a single table row\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {HTMLElement} massActionBarElem\n */\nexport function highlightTableRow(markAllRowsCheckboxElem, massActionBarElem) {\n  const tableElem = markAllRowsCheckboxElem.closest(\"table\");\n  const checkboxName = markAllRowsCheckboxElem.dataset.checkboxName;\n\n  delegateEvent(tableElem, \"click\", \"tbody tr:not(.sub-table-header)\", (event, elem) => {\n    const action = event.detail;\n\n    if (event.target.type !== \"checkbox\") {\n      if (event.target.nodeName === \"A\" || event.target.closest(\"a\")) {\n        return;\n      }\n\n      const rowCheckbox = elem.querySelector(`input[name=\"${checkboxName}[]\"]`);\n      rowCheckbox.checked = !rowCheckbox.checked || action === \"add\";\n    }\n\n    if (action === \"add\") {\n      elem.classList.add(selectedRowCssClassName);\n    } else {\n      elem.classList.toggle(selectedRowCssClassName);\n    }\n\n    setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem);\n  });\n}\n\n/**\n *\n * @param {HTMLElement} markAllRowsCheckboxElem\n * @param {string} checkboxName\n * @param {HTMLElement} massActionBarElem\n */\nfunction setMarkAllCheckboxState(markAllRowsCheckboxElem, checkboxName, massActionBarElem) {\n  const tbodyElem = markAllRowsCheckboxElem.closest(\"table\").querySelector(\"tbody\");\n  const visibleSelectedTableRows = tbodyElem.querySelectorAll(`tr.${selectedRowCssClassName}:not(.d-none)`).length;\n  const visibleMassActionCheckboxes = tbodyElem.querySelectorAll(\n    `tr:not(.d-none) input[name=\"${checkboxName}[]\"]`\n  ).length;\n\n  markAllRowsCheckboxElem.indeterminate =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes !== visibleSelectedTableRows;\n  markAllRowsCheckboxElem.checked =\n    visibleSelectedTableRows > 0 && visibleMassActionCheckboxes === visibleSelectedTableRows;\n\n  if (massActionBarElem) {\n    massActionBarElem.classList.toggle(\"d-none\", visibleSelectedTableRows === 0);\n  }\n}\n\n/**\n *\n * @param {HTMLElement} massDeleteButtonElem\n * @param options\n */\nexport function deleteMarkedResults(massDeleteButtonElem, options) {\n  const defaults = {\n    checkBoxName: \"\",\n    language: {\n      confirmationTextSingle: \"\",\n      confirmationTextMultiple: \"\",\n    },\n  };\n  const settings = { ...defaults, ...options };\n\n  massDeleteButtonElem.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n\n    const selectedMassActionCheckboxes = massDeleteButtonElem\n      .closest(\"table\")\n      .querySelectorAll('input[name=\"' + settings.checkBoxName + '[]\"]:checked');\n\n    const modalElem = massDeleteButtonElem.closest(\"form\").querySelector(\".js-mass-delete-modal\");\n    const modal = bootstrap.Modal.getOrCreateInstance(modalElem);\n\n    modalElem.querySelector(\".modal-body\").innerHTML =\n      selectedMassActionCheckboxes.length === 1\n        ? settings.language.confirmationTextSingle\n        : settings.language.confirmationTextMultiple.replace(\"{items}\", selectedMassActionCheckboxes.length.toString());\n\n    modal.show();\n  });\n}\n","import { highlightAllTableRows, highlightTableRow, deleteMarkedResults } from \"../lib/mass-action\";\n\ndocument.querySelectorAll(\"[data-mark-all-id]\").forEach((markAllElem) => {\n  // Get the unique identifier of the grid, so that we can find the element responsible for the mass actions\n  const tableIdentifier = markAllElem.closest(\"table\").id;\n  const massActionBar = document.getElementById(`${tableIdentifier}-mass-delete-bar`);\n\n  markAllElem.addEventListener(\"click\", () =>\n    highlightAllTableRows(markAllElem, markAllElem.checked ? \"add\" : \"remove\")\n  );\n\n  highlightTableRow(markAllElem, massActionBar);\n\n  deleteMarkedResults(\n    document.getElementById(`${tableIdentifier}-mass-delete`),\n    JSON.parse(markAllElem.dataset.deleteOptions)\n  );\n});\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,","file":"mass-action.min.js"}